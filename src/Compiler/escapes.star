star.compiler.escapes{
  -- Automatically Generated -- Do NOT Edit
  import star.

  import star.compiler.types.

  public escapeType:(string)=>option[tipe].
  escapeType(Es) => case Es in {
    | "_exit" => .some(.allType(.kVar("e"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.kVar("e"))))
    | "_int_plus" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_int_minus" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_int_times" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_int_div" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_int_mod" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_int_hash" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("integer")))
    | "_int_gcd" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_int_lg2" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_flt_plus" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("float")))
    | "_flt_minus" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("float")))
    | "_flt_times" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("float")))
    | "_flt_div" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("float")),.nomnal("errorCode")))
    | "_flt_mod" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("float")),.nomnal("errorCode")))
    | "_int_abs" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("integer")))
    | "_flt_abs" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "_int_eq" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("boolean")))
    | "_int_lt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("boolean")))
    | "_int_ge" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("boolean")))
    | "_int_pow" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_flt_eq" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("boolean")))
    | "_flt_lt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("boolean")))
    | "_flt_ge" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("boolean")))
    | "_int2flt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("float")))
    | "_flt2int" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("integer")))
    | "_bits_float" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("float")))
    | "_float_bits" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("integer")))
    | "_flt_hash" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("integer")))
    | "_flt_pwr" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("float")])),.nomnal("float")))
    | "_big_plus" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_minus" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_times" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_div" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("errorCode")))
    | "_big_bitand" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_bitor" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_bitxor" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_bitnot" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint")])),.nomnal("bigint")))
    | "_big_gcd" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("bigint")),.nomnal("errorCode")))
    | "_big_hash" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint")])),.nomnal("integer")))
    | "_big_eq" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("boolean")))
    | "_big_lt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("boolean")))
    | "_big_ge" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint"),.nomnal("bigint")])),.nomnal("boolean")))
    | "_int2big" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("bigint")))
    | "_big2int" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint")])),.tpExp(.tpFun("option",1),.nomnal("integer"))))
    | "_ints2big" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpFun("cons",1),.nomnal("integer"))])),.nomnal("bigint")))
    | "_big2ints" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint")])),.tpExp(.tpFun("cons",1),.nomnal("integer"))))
    | "_str2big" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("option",1),.nomnal("bigint"))))
    | "_big2str" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("bigint")])),.nomnal("string")))
    | "_big_format" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("bigint"),.nomnal("string")])),.nomnal("string")),.nomnal("errorCode")))
    | "_fiber_eq" => .some(.allType(.kVar("r"),.allType(.kVar("s"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("fiber",2),.kVar("r")),.kVar("s")),.tpExp(.tpExp(.tpFun("fiber",2),.kVar("r")),.kVar("s"))])),.nomnal("boolean")))))
    | "_fiber" => .some(.allType(.kVar("r"),.allType(.kVar("s"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("fiber",2),.kVar("r")),.kVar("s")),.kVar("r")])),.kVar("s"))])),.tpExp(.tpExp(.tpFun("fiber",2),.kVar("r")),.kVar("s"))))))
    | "sqrt" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float")])),.nomnal("float")),.nomnal("errorCode")))
    | "exp" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float")])),.nomnal("float")),.nomnal("errorCode")))
    | "log" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "log10" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "pi" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("float")))
    | "sin" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "cos" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "tan" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "asin" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "acos" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "atan" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "trunc" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "floor" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "ceil" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("float")))
    | "integral" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.nomnal("boolean")))
    | "_irand" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("integer")))
    | "_random" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("float")))
    | "_seed" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.tupleType([])))
    | "_ldexp" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("integer")])),.nomnal("float")))
    | "_frexp" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.tupleType([.nomnal("float"),.nomnal("integer")])))
    | "_modf" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.tupleType([.nomnal("float"),.nomnal("integer")])))
    | "_band" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_bor" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_bxor" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_blsl" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_blsr" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_basr" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer")])),.nomnal("integer")))
    | "_bnot" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("integer")))
    | "_cell_future" => .some(.allType(.kVar("s"),.allType(.kVar("e"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpFun("ref",1),.tpExp(.tpExp(.tpFun("star.either*either",2),.kVar("s")),.kVar("e")))])),.tpExp(.tpExp(.tpFun("future",2),.kVar("s")),.kVar("e"))))))
    | "_futureIsResolved" => .some(.allType(.kVar("a"),.allType(.kVar("e"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("future",2),.kVar("a")),.kVar("e"))])),.nomnal("boolean")))))
    | "_futureIsAccepted" => .some(.allType(.kVar("a"),.allType(.kVar("e"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("future",2),.kVar("a")),.kVar("e"))])),.nomnal("boolean")))))
    | "_futureIsRejected" => .some(.allType(.kVar("a"),.allType(.kVar("e"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("future",2),.kVar("a")),.kVar("e"))])),.nomnal("boolean")))))
    | "_futureVal" => .some(.allType(.kVar("a"),.allType(.kVar("e"),.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.tpExp(.tpExp(.tpFun("future",2),.kVar("a")),.kVar("e"))])),.kVar("a")),.kVar("e")))))
    | "_cwd" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("string")))
    | "_cd" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_rm" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_mv" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_mkdir" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.tupleType([])),.nomnal("errorCode")))
    | "_rmdir" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_isdir" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("boolean")))
    | "_file_chmod" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.tupleType([])),.nomnal("errorCode")))
    | "_ls" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.tpExp(.tpFun("cons",1),.nomnal("string"))),.nomnal("errorCode")))
    | "_repo" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("string")))
    | "_file_mode" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_file_present" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("boolean")))
    | "_file_type" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_file_size" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_file_modified" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_file_date" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.tupleType([.nomnal("integer"),.nomnal("integer"),.nomnal("integer")])),.nomnal("errorCode")))
    | "_openInFile" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.nomnal("ioHandle")),.nomnal("errorCode")))
    | "_openOutFile" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.nomnal("ioHandle")),.nomnal("errorCode")))
    | "_openAppendFile" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.nomnal("ioHandle")),.nomnal("errorCode")))
    | "_openAppendIOFile" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.nomnal("ioHandle")),.nomnal("errorCode")))
    | "_popen" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.tpExp(.tpFun("cons",1),.nomnal("string")),.tpExp(.tpFun("cons",1),.tupleType([.nomnal("string"),.nomnal("string")]))])),.tupleType([.nomnal("ioHandle"),.nomnal("ioHandle"),.nomnal("ioHandle")])),.nomnal("errorCode")))
    | "_close" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.tupleType([])),.nomnal("errorCode")))
    | "_end_of_file" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("ioHandle")])),.nomnal("boolean")))
    | "_inchars" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.nomnal("string")),.nomnal("errorCode")))
    | "_inchars_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tpExp(.tpExp(.tpFun("future",2),.nomnal("string")),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_inchar" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.nomnal("char")),.nomnal("errorCode")))
    | "_inchar_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.tpExp(.tpExp(.tpFun("future",2),.nomnal("char")),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_inbyte" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_inbyte_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.tpExp(.tpExp(.tpFun("future",2),.nomnal("integer")),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_inbytes" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tpExp(.tpFun("star.vector*vect",1),.nomnal("integer"))),.nomnal("errorCode")))
    | "_inbytes_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tpExp(.tpExp(.tpFun("future",2),.tpExp(.tpFun("star.vector*vect",1),.nomnal("integer"))),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_inline" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.nomnal("string")),.nomnal("errorCode")))
    | "_inline_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.tpExp(.tpExp(.tpFun("future",2),.nomnal("string")),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_outchar" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("char")])),.tupleType([])),.nomnal("errorCode")))
    | "_outchar_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("char")])),.tpExp(.tpExp(.tpFun("future",2),.tupleType([])),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_outbyte" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tupleType([])),.nomnal("errorCode")))
    | "_outbyte_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tpExp(.tpExp(.tpFun("future",2),.tupleType([])),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_outbytes" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.tpExp(.tpFun("cons",1),.nomnal("integer"))])),.tupleType([])),.nomnal("errorCode")))
    | "_outtext" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_outtext_async" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("string")])),.tpExp(.tpExp(.tpFun("future",2),.tupleType([])),.nomnal("errorCode"))),.nomnal("errorCode")))
    | "_stdfile" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("ioHandle")))
    | "_fposition" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("ioHandle")])),.nomnal("integer")))
    | "_fseek" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tupleType([])),.nomnal("errorCode")))
    | "_flush" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.tupleType([])),.nomnal("errorCode")))
    | "_flushall" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.tupleType([])))
    | "_fname" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("ioHandle")])),.nomnal("string")))
    | "_waitIo" => .some(.allType(.kVar("e"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpFun("cons",1),.tupleType([.nomnal("ioHandle"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("boolean")),.kVar("e")])),.nomnal("integer")])),.nomnal("boolean"))))
    | "_setfileencoding" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("ioHandle"),.nomnal("integer")])),.tupleType([])))
    | "_get_file" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.nomnal("string")),.nomnal("errorCode")))
    | "_put_file" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_show" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tupleType([])))
    | "_logmsg" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tupleType([])))
    | "_display_depth" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("integer")))
    | "_connect" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer"),.nomnal("integer")])),.tupleType([.nomnal("ioHandle"),.nomnal("ioHandle")])),.nomnal("errorCode")))
    | "_listen" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer")])),.nomnal("ioHandle")),.nomnal("errorCode")))
    | "_accept" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("ioHandle")])),.tupleType([.nomnal("ioHandle"),.nomnal("ioHandle"),.nomnal("string"),.nomnal("integer"),.nomnal("string")])),.nomnal("errorCode")))
    | "_hosttoip" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("cons",1),.nomnal("string"))))
    | "_iptohost" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.nomnal("string")),.nomnal("errorCode")))
    | "_delay" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float")])),.tupleType([])),.nomnal("errorCode")))
    | "_sleep" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float")])),.tupleType([])),.nomnal("errorCode")))
    | "_now" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("float")))
    | "_today" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("float")))
    | "_ticks" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("integer")))
    | "_time2date" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.tupleType([.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("float"),.nomnal("integer")])))
    | "_time2utc" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float")])),.tupleType([.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("float"),.nomnal("integer")])))
    | "_date2time" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("float"),.nomnal("integer")])),.nomnal("float")))
    | "_utc2time" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("integer"),.nomnal("float"),.nomnal("integer")])),.nomnal("float")))
    | "_formattime" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float"),.nomnal("string")])),.nomnal("string")),.nomnal("errorCode")))
    | "_parsetime" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.tpExp(.tpFun("option",1),.nomnal("float"))))
    | "_uniCodeCategory" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("integer")))
    | "_isCcChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isCfChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isCnChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isCoChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isCsChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isLlChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isLmChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isLoChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isLtChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isLuChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isMcChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isMeChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isMnChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isNdChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isNlChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isNoChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPcChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPdChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPeChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPfChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPiChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPoChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isPsChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isScChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isSkChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isSmChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isSoChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isZlChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isZpChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isZsChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_isLetterChar" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("boolean")))
    | "_digitCode" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("char")])),.nomnal("integer")),.nomnal("errorCode")))
    | "_codePoint" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("integer")))
    | "_int2chr" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("char")))
    | "_int2str" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("integer")])),.nomnal("string")))
    | "_flt2str" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("float"),.nomnal("integer"),.nomnal("char"),.nomnal("boolean")])),.nomnal("string")))
    | "_int_format" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer"),.nomnal("string")])),.nomnal("string")),.nomnal("errorCode")))
    | "_flt_format" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("float"),.nomnal("string")])),.nomnal("string")),.nomnal("errorCode")))
    | "_str2flt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("option",1),.nomnal("float"))))
    | "_str2int" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("option",1),.nomnal("integer"))))
    | "_chr_eq" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char"),.nomnal("char")])),.nomnal("boolean")))
    | "_chr_lt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char"),.nomnal("char")])),.nomnal("boolean")))
    | "_chr_ge" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char"),.nomnal("char")])),.nomnal("boolean")))
    | "_chr_hash" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("integer")))
    | "_chr_quote" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("string")))
    | "_chr_format" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char"),.nomnal("string")])),.nomnal("string")))
    | "_str_eq" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("boolean")))
    | "_str_lt" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("boolean")))
    | "_str_ge" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("boolean")))
    | "_str_hash" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("integer")))
    | "_str_len" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("integer")))
    | "_str_gen" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("string")))
    | "_stringOf" => .some(.allType(.kVar("r"),.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.kVar("r"),.nomnal("integer")])),.nomnal("string"))))
    | "_explode" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("cons",1),.nomnal("char"))))
    | "_implode" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpFun("cons",1),.nomnal("char"))])),.nomnal("string")))
    | "_str_find" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string"),.nomnal("integer")])),.nomnal("integer")))
    | "_sub_str" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("integer"),.nomnal("integer")])),.nomnal("string")))
    | "_str_split" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("integer")])),.tupleType([.nomnal("string"),.nomnal("string")])))
    | "_str_concat" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("string")))
    | "_str_reverse" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("string")))
    | "_str_start" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("boolean")))
    | "_str_end" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("boolean")))
    | "_str_splice" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("integer"),.nomnal("integer"),.nomnal("string")])),.nomnal("string")))
    | "_str_multicat" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpFun("cons",1),.nomnal("string"))])),.nomnal("string")))
    | "_str_hdtl" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("option",1),.tupleType([.nomnal("char"),.nomnal("string")]))))
    | "_str_back" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string")])),.tupleType([.nomnal("string"),.nomnal("char")])),.nomnal("errorCode")))
    | "_str_cons" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char"),.nomnal("string")])),.nomnal("string")))
    | "_code2str" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("char")])),.nomnal("string")))
    | "_str_apnd" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("char")])),.nomnal("string")))
    | "_str_charat" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("integer")])),.tpExp(.tpFun("option",1),.nomnal("char"))))
    | "_str_set" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("integer"),.nomnal("char")])),.nomnal("string")))
    | "_str_drop" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("integer")])),.nomnal("string")))
    | "_str_quote" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.nomnal("string")))
    | "_str_format" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string"),.nomnal("string")])),.nomnal("string")))
    | "_getenv" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("string")])),.tpExp(.tpFun("option",1),.nomnal("string"))))
    | "_setenv" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("string")])),.tupleType([])),.nomnal("errorCode")))
    | "_envir" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.tpExp(.tpFun("cons",1),.tupleType([.nomnal("string"),.nomnal("string")]))))
    | "_fork" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.tupleType([]))])),.nomnal("star.thread*thread")))
    | "_thread" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("star.thread*thread")))
    | "_kill" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("star.thread*thread")])),.tupleType([])),.nomnal("errorCode")))
    | "_thread_state" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([.nomnal("star.thread*thread")])),.nomnal("star.thread*threadState")))
    | "_waitfor" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("star.thread*thread")])),.tupleType([])),.nomnal("errorCode")))
    | "_shell" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.tpExp(.tpFun("cons",1),.nomnal("string")),.tpExp(.tpFun("cons",1),.tupleType([.nomnal("string"),.nomnal("string")]))])),.nomnal("integer")),.nomnal("errorCode")))
    | "_stackTrace" => .some(.tpExp(.tpExp(.tpFun("=>",2),.tupleType([])),.nomnal("string")))
    | "_gc" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("integer")])),.tupleType([])),.nomnal("errorCode")))
    | "_jit_compile" => .some(.tpExp(.tpExp(.tpExp(.tpFun("=>",3),.tupleType([.nomnal("string"),.nomnal("integer")])),.tupleType([])),.nomnal("errorCode")))
    | _ default => .none
  }

  public escapeArity:(string) => option[integer].
  escapeArity(Es) => case Es in {
       | "_exit" => .some(1)
    | "_int_plus" => .some(2)
    | "_int_minus" => .some(2)
    | "_int_times" => .some(2)
    | "_int_div" => .some(2)
    | "_int_mod" => .some(2)
    | "_int_hash" => .some(1)
    | "_int_gcd" => .some(2)
    | "_int_lg2" => .some(1)
    | "_flt_plus" => .some(2)
    | "_flt_minus" => .some(2)
    | "_flt_times" => .some(2)
    | "_flt_div" => .some(2)
    | "_flt_mod" => .some(2)
    | "_int_abs" => .some(1)
    | "_flt_abs" => .some(1)
    | "_int_eq" => .some(2)
    | "_int_lt" => .some(2)
    | "_int_ge" => .some(2)
    | "_int_pow" => .some(2)
    | "_flt_eq" => .some(2)
    | "_flt_lt" => .some(2)
    | "_flt_ge" => .some(2)
    | "_int2flt" => .some(1)
    | "_flt2int" => .some(1)
    | "_bits_float" => .some(1)
    | "_float_bits" => .some(1)
    | "_flt_hash" => .some(1)
    | "_flt_pwr" => .some(2)
    | "_big_plus" => .some(2)
    | "_big_minus" => .some(2)
    | "_big_times" => .some(2)
    | "_big_div" => .some(2)
    | "_big_bitand" => .some(2)
    | "_big_bitor" => .some(2)
    | "_big_bitxor" => .some(2)
    | "_big_bitnot" => .some(1)
    | "_big_gcd" => .some(2)
    | "_big_hash" => .some(1)
    | "_big_eq" => .some(2)
    | "_big_lt" => .some(2)
    | "_big_ge" => .some(2)
    | "_int2big" => .some(1)
    | "_big2int" => .some(1)
    | "_ints2big" => .some(1)
    | "_big2ints" => .some(1)
    | "_str2big" => .some(1)
    | "_big2str" => .some(1)
    | "_big_format" => .some(2)
    | "_fiber_eq" => .some(2)
    | "_fiber" => .some(1)
    | "sqrt" => .some(1)
    | "exp" => .some(1)
    | "log" => .some(1)
    | "log10" => .some(1)
    | "pi" => .some(0)
    | "sin" => .some(1)
    | "cos" => .some(1)
    | "tan" => .some(1)
    | "asin" => .some(1)
    | "acos" => .some(1)
    | "atan" => .some(1)
    | "trunc" => .some(1)
    | "floor" => .some(1)
    | "ceil" => .some(1)
    | "integral" => .some(1)
    | "_irand" => .some(1)
    | "_random" => .some(0)
    | "_seed" => .some(1)
    | "_ldexp" => .some(2)
    | "_frexp" => .some(1)
    | "_modf" => .some(1)
    | "_band" => .some(2)
    | "_bor" => .some(2)
    | "_bxor" => .some(2)
    | "_blsl" => .some(2)
    | "_blsr" => .some(2)
    | "_basr" => .some(2)
    | "_bnot" => .some(1)
    | "_cell_future" => .some(1)
    | "_futureIsResolved" => .some(1)
    | "_futureIsAccepted" => .some(1)
    | "_futureIsRejected" => .some(1)
    | "_futureVal" => .some(1)
    | "_cwd" => .some(0)
    | "_cd" => .some(1)
    | "_rm" => .some(1)
    | "_mv" => .some(2)
    | "_mkdir" => .some(2)
    | "_rmdir" => .some(1)
    | "_isdir" => .some(1)
    | "_file_chmod" => .some(2)
    | "_ls" => .some(1)
    | "_repo" => .some(0)
    | "_file_mode" => .some(1)
    | "_file_present" => .some(1)
    | "_file_type" => .some(1)
    | "_file_size" => .some(1)
    | "_file_modified" => .some(1)
    | "_file_date" => .some(1)
    | "_openInFile" => .some(2)
    | "_openOutFile" => .some(2)
    | "_openAppendFile" => .some(2)
    | "_openAppendIOFile" => .some(2)
    | "_popen" => .some(3)
    | "_close" => .some(1)
    | "_end_of_file" => .some(1)
    | "_inchars" => .some(2)
    | "_inchars_async" => .some(2)
    | "_inchar" => .some(1)
    | "_inchar_async" => .some(1)
    | "_inbyte" => .some(1)
    | "_inbyte_async" => .some(1)
    | "_inbytes" => .some(2)
    | "_inbytes_async" => .some(2)
    | "_inline" => .some(1)
    | "_inline_async" => .some(1)
    | "_outchar" => .some(2)
    | "_outchar_async" => .some(2)
    | "_outbyte" => .some(2)
    | "_outbyte_async" => .some(2)
    | "_outbytes" => .some(2)
    | "_outtext" => .some(2)
    | "_outtext_async" => .some(2)
    | "_stdfile" => .some(1)
    | "_fposition" => .some(1)
    | "_fseek" => .some(2)
    | "_flush" => .some(1)
    | "_flushall" => .some(0)
    | "_fname" => .some(1)
    | "_waitIo" => .some(2)
    | "_setfileencoding" => .some(2)
    | "_get_file" => .some(1)
    | "_put_file" => .some(2)
    | "_show" => .some(1)
    | "_logmsg" => .some(1)
    | "_display_depth" => .some(0)
    | "_connect" => .some(3)
    | "_listen" => .some(1)
    | "_accept" => .some(1)
    | "_hosttoip" => .some(1)
    | "_iptohost" => .some(1)
    | "_delay" => .some(1)
    | "_sleep" => .some(1)
    | "_now" => .some(0)
    | "_today" => .some(0)
    | "_ticks" => .some(0)
    | "_time2date" => .some(1)
    | "_time2utc" => .some(1)
    | "_date2time" => .some(7)
    | "_utc2time" => .some(7)
    | "_formattime" => .some(2)
    | "_parsetime" => .some(2)
    | "_uniCodeCategory" => .some(1)
    | "_isCcChar" => .some(1)
    | "_isCfChar" => .some(1)
    | "_isCnChar" => .some(1)
    | "_isCoChar" => .some(1)
    | "_isCsChar" => .some(1)
    | "_isLlChar" => .some(1)
    | "_isLmChar" => .some(1)
    | "_isLoChar" => .some(1)
    | "_isLtChar" => .some(1)
    | "_isLuChar" => .some(1)
    | "_isMcChar" => .some(1)
    | "_isMeChar" => .some(1)
    | "_isMnChar" => .some(1)
    | "_isNdChar" => .some(1)
    | "_isNlChar" => .some(1)
    | "_isNoChar" => .some(1)
    | "_isPcChar" => .some(1)
    | "_isPdChar" => .some(1)
    | "_isPeChar" => .some(1)
    | "_isPfChar" => .some(1)
    | "_isPiChar" => .some(1)
    | "_isPoChar" => .some(1)
    | "_isPsChar" => .some(1)
    | "_isScChar" => .some(1)
    | "_isSkChar" => .some(1)
    | "_isSmChar" => .some(1)
    | "_isSoChar" => .some(1)
    | "_isZlChar" => .some(1)
    | "_isZpChar" => .some(1)
    | "_isZsChar" => .some(1)
    | "_isLetterChar" => .some(1)
    | "_digitCode" => .some(1)
    | "_codePoint" => .some(1)
    | "_int2chr" => .some(1)
    | "_int2str" => .some(1)
    | "_flt2str" => .some(4)
    | "_int_format" => .some(2)
    | "_flt_format" => .some(2)
    | "_str2flt" => .some(1)
    | "_str2int" => .some(1)
    | "_chr_eq" => .some(2)
    | "_chr_lt" => .some(2)
    | "_chr_ge" => .some(2)
    | "_chr_hash" => .some(1)
    | "_chr_quote" => .some(1)
    | "_chr_format" => .some(2)
    | "_str_eq" => .some(2)
    | "_str_lt" => .some(2)
    | "_str_ge" => .some(2)
    | "_str_hash" => .some(1)
    | "_str_len" => .some(1)
    | "_str_gen" => .some(1)
    | "_stringOf" => .some(2)
    | "_explode" => .some(1)
    | "_implode" => .some(1)
    | "_str_find" => .some(3)
    | "_sub_str" => .some(3)
    | "_str_split" => .some(2)
    | "_str_concat" => .some(2)
    | "_str_reverse" => .some(1)
    | "_str_start" => .some(2)
    | "_str_end" => .some(2)
    | "_str_splice" => .some(4)
    | "_str_multicat" => .some(1)
    | "_str_hdtl" => .some(1)
    | "_str_back" => .some(1)
    | "_str_cons" => .some(2)
    | "_code2str" => .some(1)
    | "_str_apnd" => .some(2)
    | "_str_charat" => .some(2)
    | "_str_set" => .some(3)
    | "_str_drop" => .some(2)
    | "_str_quote" => .some(1)
    | "_str_format" => .some(2)
    | "_getenv" => .some(1)
    | "_setenv" => .some(2)
    | "_envir" => .some(0)
    | "_fork" => .some(1)
    | "_thread" => .some(0)
    | "_kill" => .some(1)
    | "_thread_state" => .some(1)
    | "_waitfor" => .some(1)
    | "_shell" => .some(3)
    | "_stackTrace" => .some(0)
    | "_gc" => .some(1)
    | "_jit_compile" => .some(2)
    | _ default => .none
  }

  public isEscape:(string)=>boolean.
  isEscape(Es) => .some(_) .= escapeArity(Es).
}
