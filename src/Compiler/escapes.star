/* Automatically generated, do not edit */

star.compiler.escapes{
  import star.
  import star.compiler.types.

  public escapeType:(string)=>option[tipe].
  escapeType(Es) => case Es in {
    "_exit" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),tupleType([]))).
    "_abort" => .some(allType(nomnal("a"),tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("a"),nomnal("star.core*string")])),tupleType([])))).
    "_definedLbl" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),nomnal("star.core*boolean"))).
    "_callLbl" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer"),tpExp(tpFun("star.core*cons",1),tpExp(tpFun("star.core*cons",1),nomnal("star.core*string")))])),tupleType([]))).
    "_int_plus" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_int_minus" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_int_times" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_int_div" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_int_mod" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_int_hash" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_int_gcd" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_flt_plus" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_flt_minus" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_flt_times" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_flt_div" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_flt_mod" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_int_abs" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_flt_abs" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_int_eq" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*boolean"))).
    "_int_lt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*boolean"))).
    "_int_ge" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*boolean"))).
    "_flt_eq" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*boolean"))).
    "_flt_lt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*boolean"))).
    "_flt_ge" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*boolean"))).
    "_int2flt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*float"))).
    "_flt2int" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*integer"))).
    "_bits_float" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*float"))).
    "_float_bits" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*integer"))).
    "_flt_hash" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*integer"))).
    "_flt_pwr" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*float")])),nomnal("star.core*float"))).
    "_big_plus" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*bigint"))).
    "_big_minus" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*bigint"))).
    "_big_times" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*bigint"))).
    "_big_div" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")]))).
    "_big_gcd" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*bigint"))).
    "_big_hash" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint")])),nomnal("star.core*integer"))).
    "_big_eq" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*boolean"))).
    "_big_lt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*boolean"))).
    "_big_ge" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*bigint")])),nomnal("star.core*boolean"))).
    "_int2big" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*bigint"))).
    "_big2int" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint")])),tpExp(tpFun("star.core*option",1),nomnal("star.core*integer")))).
    "_ints2big" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpFun("star.core*cons",1),nomnal("star.core*integer"))])),nomnal("star.core*bigint"))).
    "_big2ints" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint")])),tpExp(tpFun("star.core*cons",1),nomnal("star.core*integer")))).
    "_str2big" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*option",1),nomnal("star.core*bigint")))).
    "_big2str" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint")])),nomnal("star.core*string"))).
    "_big_format" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*bigint"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_fiber_eq" => .some(allType(nomnal("s"),allType(nomnal("r"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r")),tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r"))])),nomnal("star.core*boolean"))))).
    "_new_fiber" => .some(allType(nomnal("s"),allType(nomnal("r"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r"))])),nomnal("s"))])),tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r")))))).
    "_suspend_fiber" => .some(allType(nomnal("s"),allType(nomnal("r"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r")),nomnal("s")])),nomnal("r"))))).
    "_retire_fiber" => .some(allType(nomnal("s"),allType(nomnal("r"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r")),nomnal("s")])),tupleType([]))))).
    "_resume_fiber" => .some(allType(nomnal("s"),allType(nomnal("r"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("star.core*fiber",2),nomnal("s")),nomnal("r")),nomnal("r")])),nomnal("s"))))).
    "sqrt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "exp" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "log" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "log10" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "pi" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*float"))).
    "sin" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "cos" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "tan" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "asin" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "acos" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "atan" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "trunc" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "floor" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "ceil" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*float"))).
    "integral" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),nomnal("star.core*boolean"))).
    "_irand" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_random" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*float"))).
    "_seed" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),tupleType([]))).
    "_ldexp" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*integer")])),nomnal("star.core*float"))).
    "_frexp" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),tupleType([nomnal("star.core*float"),nomnal("star.core*integer")]))).
    "_modf" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),tupleType([nomnal("star.core*float"),nomnal("star.core*integer")]))).
    "_band" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_bor" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_bxor" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_blsl" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_blsr" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_basr" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_bnot" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_cell" => .some(allType(nomnal("t"),tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("t")])),tpExp(tpFun("star.core*ref",1),nomnal("t"))))).
    "_get" => .some(allType(nomnal("t"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpFun("star.core*ref",1),nomnal("t"))])),nomnal("t")))).
    "_assign" => .some(allType(nomnal("t"),tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpFun("star.core*ref",1),nomnal("t")),nomnal("t")])),tupleType([])))).
    "_overwrite" => .some(allType(nomnal("t"),tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("t"),nomnal("t")])),nomnal("t")))).
    "_tuple_nth" => .some(allType(nomnal("t"),allType(nomnal("e"),tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("t"),nomnal("star.core*integer")])),nomnal("e"))))).
    "_tuple_set_nth" => .some(allType(nomnal("t"),allType(nomnal("e"),tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("t"),nomnal("star.core*integer"),nomnal("e")])),nomnal("t"))))).
    "_cwd" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*string"))).
    "_cd" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_rm" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_mv" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_mkdir" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_rmdir" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_isdir" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_file_chmod" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_ls" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*cons",1),nomnal("star.core*string")))).
    "_repo" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*string"))).
    "_file_mode" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*integer"))).
    "_file_present" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_file_type" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*integer"))).
    "_file_size" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*integer"))).
    "_file_modified" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*integer"))).
    "_file_date" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer")]))).
    "_openInFile" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),nomnal("star.file*fileHandle"))).
    "_openOutFile" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),nomnal("star.file*fileHandle"))).
    "_openAppendFile" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),nomnal("star.file*fileHandle"))).
    "_openAppendIOFile" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),nomnal("star.file*fileHandle"))).
    "_popen" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),tpExp(tpFun("star.core*cons",1),nomnal("star.core*string")),tpExp(tpFun("star.core*cons",1),tupleType([nomnal("star.core*string"),nomnal("star.core*string")]))])),tupleType([nomnal("star.file*fileHandle"),nomnal("star.file*fileHandle"),nomnal("star.file*fileHandle")]))).
    "_close" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_end_of_file" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*boolean"))).
    "_ready_to_read" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*boolean"))).
    "_ready_to_write" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*boolean"))).
    "_inchars" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*integer")])),nomnal("star.core*string"))).
    "_inchar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*integer"))).
    "_inbyte" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*integer"))).
    "_inline" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*string"))).
    "_inline_async" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),tpExp(tpFun("star.core*future",1),nomnal("star.core*string")))).
    "_intext" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_outchar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*integer")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_outbyte" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*integer")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_outbytes" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),tpExp(tpFun("star.core*cons",1),nomnal("star.core*integer"))])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_outtext" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*string")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_stdfile" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.file*fileHandle"))).
    "_fposition" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),nomnal("star.core*integer"))).
    "_fseek" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*integer")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_flush" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_flushall" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),tupleType([]))).
    "_setfileencoding" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle"),nomnal("star.core*integer")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_get_file" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_put_file" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),tupleType([]))).
    "_show" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tupleType([]))).
    "_install_pkg" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*cons",1),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])))).
    "_pkg_is_present" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_in_manifest" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_locate_in_manifest" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_logmsg" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tupleType([]))).
    "_connect" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer"),nomnal("star.core*integer")])),tupleType([nomnal("star.file*fileHandle"),nomnal("star.file*fileHandle")]))).
    "_listen" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.file*fileHandle"))).
    "_accept" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.file*fileHandle")])),tupleType([nomnal("star.file*fileHandle"),nomnal("star.file*fileHandle"),nomnal("star.core*string"),nomnal("star.core*integer"),nomnal("star.core*string")]))).
    "_hosttoip" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*cons",1),nomnal("star.core*string")))).
    "_iptohost" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_delay" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),tupleType([]))).
    "_sleep" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),tupleType([]))).
    "_now" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*float"))).
    "_today" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*float"))).
    "_ticks" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*integer"))).
    "_time2date" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*float"),nomnal("star.core*integer"),nomnal("star.core*integer")]))).
    "_time2utc" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float")])),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*float"),nomnal("star.core*integer"),nomnal("star.core*integer")]))).
    "_date2time" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*float"),nomnal("star.core*integer")])),nomnal("star.core*float"))).
    "_utc2time" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*float"),nomnal("star.core*integer")])),nomnal("star.core*float"))).
    "_uniCodeCategory" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*integer"))).
    "_isCcChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isCfChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isCnChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isCoChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isCsChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isLlChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isLmChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isLoChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isLtChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isLuChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isMcChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isMeChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isMnChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isNdChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isNlChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isNoChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPcChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPdChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPeChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPfChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPiChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPoChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isPsChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isScChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isSkChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isSmChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isSoChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isZlChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isZpChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isZsChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isLetterChar" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_digitCode" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*integer"))).
    "_codePoint" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*integer"))).
    "_char" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer")])),nomnal("star.core*char"))).
    "_isIDStart" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_isIDContinue" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_int2str" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*string"))).
    "_flt2str" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*boolean")])),nomnal("star.core*string"))).
    "_int_format" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*integer"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_flt_format" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*float"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_str2flt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*option",1),nomnal("star.core*float")))).
    "_str2int" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*option",1),nomnal("star.core*integer")))).
    "_chr_eq" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char"),nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_chr_lt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char"),nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_chr_ge" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char"),nomnal("star.core*char")])),nomnal("star.core*boolean"))).
    "_chr_hash" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*integer"))).
    "_chr_quote" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*string"))).
    "_chr_format" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_str_eq" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_str_lt" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_str_ge" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_str_hash" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*integer"))).
    "_str_len" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*integer"))).
    "_str_gen" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_stringOf" => .some(allType(nomnal("t"),tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("t"),nomnal("star.core*integer")])),nomnal("star.core*string")))).
    "_explode" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tpExp(tpFun("star.core*cons",1),nomnal("star.core*char")))).
    "_implode" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpFun("star.core*cons",1),nomnal("star.core*char"))])),nomnal("star.core*string"))).
    "_str_find" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string"),nomnal("star.core*integer")])),nomnal("star.core*integer"))).
    "_sub_str" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer"),nomnal("star.core*integer")])),nomnal("star.core*string"))).
    "_str_split" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer")])),tupleType([nomnal("star.core*string"),nomnal("star.core*string")]))).
    "_str_concat" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_str_reverse" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_str_start" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*boolean"))).
    "_str_splice" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*integer"),nomnal("star.core*integer"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_str_multicat" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpFun("star.core*cons",1),nomnal("star.core*string"))])),nomnal("star.core*string"))).
    "_str_hdtl" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tupleType([nomnal("star.core*char"),nomnal("star.core*string")]))).
    "_str_back" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),tupleType([nomnal("star.core*string"),nomnal("star.core*char")]))).
    "_str_cons" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_code2str" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*char")])),nomnal("star.core*string"))).
    "_str_apnd" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*char")])),nomnal("star.core*string"))).
    "_str_quote" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_str_format" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_getenv" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),nomnal("star.core*string"))).
    "_setenv" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])),tupleType([]))).
    "_envir" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),tpExp(tpFun("star.core*cons",1),tupleType([nomnal("star.core*string"),nomnal("star.core*string")])))).
    "_getlogin" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*string"))).
    "_fork" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([tpExp(tpExp(tpFun("=>",2),tupleType([])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string"))),tupleType([])])),nomnal("star.thread*thread"))).
    "_thread" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.thread*thread"))).
    "_kill" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.thread*thread")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_thread_state" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.thread*thread")])),nomnal("star.thread*threadState"))).
    "_waitfor" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.thread*thread")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_shell" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.core*string"),tpExp(tpFun("star.core*cons",1),nomnal("star.core*string")),tpExp(tpFun("star.core*cons",1),tupleType([nomnal("star.core*string"),nomnal("star.core*string")]))])),nomnal("star.core*integer"))).
    "_newLock" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.thread*lock"))).
    "_acquireLock" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.thread*lock"),nomnal("star.core*float")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_waitLock" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.thread*lock"),nomnal("star.core*float")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_releaseLock" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([nomnal("star.thread*lock")])),tpExp(tpFun("star.core*result",2),nomnal("star.core*string")))).
    "_ins_debug" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),tupleType([]))).
    "_stackTrace" => .some(tpExp(tpExp(tpFun("=>",2),tupleType([])),nomnal("star.core*string"))).
    _ default => .none.
  }

  public isEscape:(string)=>option[integer].
  isEscape(Es) => case Es in {
    "_exit" => some(0).
    "_abort" => some(1).
    "_definedLbl" => some(2).
    "_callLbl" => some(3).
    "_int_plus" => some(4).
    "_int_minus" => some(5).
    "_int_times" => some(6).
    "_int_div" => some(7).
    "_int_mod" => some(8).
    "_int_hash" => some(9).
    "_int_gcd" => some(10).
    "_flt_plus" => some(11).
    "_flt_minus" => some(12).
    "_flt_times" => some(13).
    "_flt_div" => some(14).
    "_flt_mod" => some(15).
    "_int_abs" => some(16).
    "_flt_abs" => some(17).
    "_int_eq" => some(18).
    "_int_lt" => some(19).
    "_int_ge" => some(20).
    "_flt_eq" => some(21).
    "_flt_lt" => some(22).
    "_flt_ge" => some(23).
    "_int2flt" => some(24).
    "_flt2int" => some(25).
    "_bits_float" => some(26).
    "_float_bits" => some(27).
    "_flt_hash" => some(28).
    "_flt_pwr" => some(29).
    "_big_plus" => some(30).
    "_big_minus" => some(31).
    "_big_times" => some(32).
    "_big_div" => some(33).
    "_big_gcd" => some(34).
    "_big_hash" => some(35).
    "_big_eq" => some(36).
    "_big_lt" => some(37).
    "_big_ge" => some(38).
    "_int2big" => some(39).
    "_big2int" => some(40).
    "_ints2big" => some(41).
    "_big2ints" => some(42).
    "_str2big" => some(43).
    "_big2str" => some(44).
    "_big_format" => some(45).
    "_fiber_eq" => some(46).
    "_new_fiber" => some(47).
    "_suspend_fiber" => some(48).
    "_retire_fiber" => some(49).
    "_resume_fiber" => some(50).
    "sqrt" => some(51).
    "exp" => some(52).
    "log" => some(53).
    "log10" => some(54).
    "pi" => some(55).
    "sin" => some(56).
    "cos" => some(57).
    "tan" => some(58).
    "asin" => some(59).
    "acos" => some(60).
    "atan" => some(61).
    "trunc" => some(62).
    "floor" => some(63).
    "ceil" => some(64).
    "integral" => some(65).
    "_irand" => some(66).
    "_random" => some(67).
    "_seed" => some(68).
    "_ldexp" => some(69).
    "_frexp" => some(70).
    "_modf" => some(71).
    "_band" => some(72).
    "_bor" => some(73).
    "_bxor" => some(74).
    "_blsl" => some(75).
    "_blsr" => some(76).
    "_basr" => some(77).
    "_bnot" => some(78).
    "_cell" => some(79).
    "_get" => some(80).
    "_assign" => some(81).
    "_overwrite" => some(82).
    "_tuple_nth" => some(83).
    "_tuple_set_nth" => some(84).
    "_cwd" => some(85).
    "_cd" => some(86).
    "_rm" => some(87).
    "_mv" => some(88).
    "_mkdir" => some(89).
    "_rmdir" => some(90).
    "_isdir" => some(91).
    "_file_chmod" => some(92).
    "_ls" => some(93).
    "_repo" => some(94).
    "_file_mode" => some(95).
    "_file_present" => some(96).
    "_file_type" => some(97).
    "_file_size" => some(98).
    "_file_modified" => some(99).
    "_file_date" => some(100).
    "_openInFile" => some(101).
    "_openOutFile" => some(102).
    "_openAppendFile" => some(103).
    "_openAppendIOFile" => some(104).
    "_popen" => some(105).
    "_close" => some(106).
    "_end_of_file" => some(107).
    "_ready_to_read" => some(108).
    "_ready_to_write" => some(109).
    "_inchars" => some(110).
    "_inchar" => some(111).
    "_inbyte" => some(112).
    "_inline" => some(113).
    "_inline_async" => some(114).
    "_intext" => some(115).
    "_outchar" => some(116).
    "_outbyte" => some(117).
    "_outbytes" => some(118).
    "_outtext" => some(119).
    "_stdfile" => some(120).
    "_fposition" => some(121).
    "_fseek" => some(122).
    "_flush" => some(123).
    "_flushall" => some(124).
    "_setfileencoding" => some(125).
    "_get_file" => some(126).
    "_put_file" => some(127).
    "_show" => some(128).
    "_install_pkg" => some(129).
    "_pkg_is_present" => some(130).
    "_in_manifest" => some(131).
    "_locate_in_manifest" => some(132).
    "_logmsg" => some(133).
    "_connect" => some(134).
    "_listen" => some(135).
    "_accept" => some(136).
    "_hosttoip" => some(137).
    "_iptohost" => some(138).
    "_delay" => some(139).
    "_sleep" => some(140).
    "_now" => some(141).
    "_today" => some(142).
    "_ticks" => some(143).
    "_time2date" => some(144).
    "_time2utc" => some(145).
    "_date2time" => some(146).
    "_utc2time" => some(147).
    "_uniCodeCategory" => some(148).
    "_isCcChar" => some(149).
    "_isCfChar" => some(150).
    "_isCnChar" => some(151).
    "_isCoChar" => some(152).
    "_isCsChar" => some(153).
    "_isLlChar" => some(154).
    "_isLmChar" => some(155).
    "_isLoChar" => some(156).
    "_isLtChar" => some(157).
    "_isLuChar" => some(158).
    "_isMcChar" => some(159).
    "_isMeChar" => some(160).
    "_isMnChar" => some(161).
    "_isNdChar" => some(162).
    "_isNlChar" => some(163).
    "_isNoChar" => some(164).
    "_isPcChar" => some(165).
    "_isPdChar" => some(166).
    "_isPeChar" => some(167).
    "_isPfChar" => some(168).
    "_isPiChar" => some(169).
    "_isPoChar" => some(170).
    "_isPsChar" => some(171).
    "_isScChar" => some(172).
    "_isSkChar" => some(173).
    "_isSmChar" => some(174).
    "_isSoChar" => some(175).
    "_isZlChar" => some(176).
    "_isZpChar" => some(177).
    "_isZsChar" => some(178).
    "_isLetterChar" => some(179).
    "_digitCode" => some(180).
    "_codePoint" => some(181).
    "_char" => some(182).
    "_isIDStart" => some(183).
    "_isIDContinue" => some(184).
    "_int2str" => some(185).
    "_flt2str" => some(186).
    "_int_format" => some(187).
    "_flt_format" => some(188).
    "_str2flt" => some(189).
    "_str2int" => some(190).
    "_chr_eq" => some(191).
    "_chr_lt" => some(192).
    "_chr_ge" => some(193).
    "_chr_hash" => some(194).
    "_chr_quote" => some(195).
    "_chr_format" => some(196).
    "_str_eq" => some(197).
    "_str_lt" => some(198).
    "_str_ge" => some(199).
    "_str_hash" => some(200).
    "_str_len" => some(201).
    "_str_gen" => some(202).
    "_stringOf" => some(203).
    "_explode" => some(204).
    "_implode" => some(205).
    "_str_find" => some(206).
    "_sub_str" => some(207).
    "_str_split" => some(208).
    "_str_concat" => some(209).
    "_str_reverse" => some(210).
    "_str_start" => some(211).
    "_str_splice" => some(212).
    "_str_multicat" => some(213).
    "_str_hdtl" => some(214).
    "_str_back" => some(215).
    "_str_cons" => some(216).
    "_code2str" => some(217).
    "_str_apnd" => some(218).
    "_str_quote" => some(219).
    "_str_format" => some(220).
    "_getenv" => some(221).
    "_setenv" => some(222).
    "_envir" => some(223).
    "_getlogin" => some(224).
    "_fork" => some(225).
    "_thread" => some(226).
    "_kill" => some(227).
    "_thread_state" => some(228).
    "_waitfor" => some(229).
    "_shell" => some(230).
    "_newLock" => some(231).
    "_acquireLock" => some(232).
    "_waitLock" => some(233).
    "_releaseLock" => some(234).
    "_ins_debug" => some(235).
    "_stackTrace" => some(236).
    _ default => .none.
  }
}.
