/* Automatically generated, do not edit */

star.compiler.operators{
  import star.

  operator ::= prefixOp(integer,integer)
             | infixOp(integer,integer,integer)
             | postfixOp(integer,integer).

  public bracket ::= bkt(string,string,string,integer).

  public isOperator:(string)=>boolean.
  isOperator(Nm) => size(oper(Nm))>0.

  public isInfixOp:(string) => option[(integer,integer,integer)].
  isInfixOp(Nm) => pickInfix(oper(Nm)).

  pickInfix:(cons[operator]) => option[(integer,integer,integer)].
  pickInfix([]) => .none.
  pickInfix([infixOp(Lf,Pr,Rg),.._]) => some((Lf,Pr,Rg)).
  pickInfix([_,..L]) => pickInfix(L).

  public isPrefixOp:(string) => option[(integer,integer)].
  isPrefixOp(Nm) => pickPrefix(oper(Nm)).

  pickPrefix:(cons[operator]) => option[(integer,integer)].
  pickPrefix([]) => .none.
  pickPrefix([prefixOp(Pr,Rg),.._]) => some((Pr,Rg)).
  pickPrefix([_,..L]) => pickPrefix(L).

  public isPostfixOp:(string) => option[(integer,integer)].
  isPostfixOp(Nm) => pickPostfix(oper(Nm)).

  pickPostfix:(cons[operator]) => option[(integer,integer)].
  pickPostfix([]) => .none.
  pickPostfix([postfixOp(Pr,Rg),.._]) => some((Pr,Rg)).
  pickPostfix([_,..L]) => pickPrefix(L).

  oper:(string)=>cons[operator].
#(Operators)  oper(_) default => [].

  public multiTok:(string)=>option[cons[string]].
#(Multi)  multiTok(_) default => .none.

  public isBracket:(string) => option[bracket].
#(Brackets)  isBracket(_) default => .none.

  public isLeftBracket:(string) => boolean.
  isLeftBracket(S) => bkt(S,_,_,_) ^= isBracket(S).

  public isRightBracket:(string) => boolean.
  isRightBracket(S) => bkt(_,_,S,_) ^= isBracket(S).

  public first:(integer) => option[string].
#(First)  first(_) default => .none.

  public follows:(string,integer) => option[string].
#(Follows)  follows(_,_) default => .none.

  public final:(string) => boolean.
#(Final)  final(_) default => .false.

  public keyword:(string) => boolean.
#(Keywords)  keyword(_) default => .false.
}
