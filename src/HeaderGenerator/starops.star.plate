/* Automatically generated at #(Date), do not edit */

star.compiler.operators{
  import star.

  operator ::= prefixOp(integer,integer)
             | infixOp(integer,integer,integer)
             | postfixOp(integer,integer).

  public isOperator:(string)=>boolean.
  isOperator(Nm) => size(oper(Nm))>0.

  public isInfixOp:(string) => option[(integer,integer,integer)].
  isInfixOp(Nm) => pickInfix(oper(Nm)).

  pickInfix:(list[operator]) => option[(integer,integer,integer)].
  pickInfix([]) => none.
  pickInfix([infixOp(Lf,Pr,Rg),.._]) => some((Lf,Pr,Rg)).
  pickInfix([_,..L]) => pickInfix(L).

  public isPrefixOp:(string) => option[(integer,integer)].
  isPrefixOp(Nm) => pickPrefix(oper(Nm)).

  pickPrefix:(list[operator]) => option[(integer,integer)].
  pickPrefix([]) => none.
  pickPrefix([prefixOp(Pr,Rg),.._]) => some((Pr,Rg)).
  pickPrefix([_,..L]) => pickPrefix(L).

  public isPostFixOp:(string) => option[(integer,integer)].
  isPostfixOp(Nm) => pickPostfix(oper(Nm)).

  pickPostfix:(list[operator]) => option[(integer,integer)].
  pickPostfix([]) => none.
  pickPostfix([postfixOp(Pr,Rg),.._]) => some((Pr,Rg)).
  pickPostfix([_,..L]) => pickPrefix(L).

  oper:(string)=>list[operator].
#(Operators)  oper(_) default => [].

  public follows:(string,integer) => option[string].
  #(Follows)  follows(_,_) default => none.

  public final:(string) => boolean.
#(Final)  final(_) default => false.
}
