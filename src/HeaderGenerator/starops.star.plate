star.compiler.operators{
  /* Automatically generated, do not edit */

  import star.

  operator ::= .prefixOp(integer,integer)
             | .infixOp(integer,integer,integer)
             | .postfixOp(integer,integer).

  public bracket ::= .bkt(string,string,string,string,integer).

  public isOperator:(string)=>boolean.
  isOperator(Nm) => size(oper(Nm))>0.

  public isInfixOp:(string) => option[(integer,integer,integer)].
  isInfixOp(Nm) => pickInfix(oper(Nm)).

  pickInfix:(cons[operator]) => option[(integer,integer,integer)].
  pickInfix([]) => .none.
  pickInfix([.infixOp(Lf,Pr,Rg),.._]) => .some((Lf,Pr,Rg)).
  pickInfix([_,..L]) => pickInfix(L).

  public isPrefixOp:(string) => option[(integer,integer)].
  isPrefixOp(Nm) => pickPrefix(oper(Nm)).

  pickPrefix:(cons[operator]) => option[(integer,integer)].
  pickPrefix([]) => .none.
  pickPrefix([.prefixOp(Pr,Rg),.._]) => .some((Pr,Rg)).
  pickPrefix([_,..L]) => pickPrefix(L).

  public isPostfixOp:(string) => option[(integer,integer)].
  isPostfixOp(Nm) => pickPostfix(oper(Nm)).

  pickPostfix:(cons[operator]) => option[(integer,integer)].
  pickPostfix([]) => .none.
  pickPostfix([.postfixOp(Pr,Rg),.._]) => .some((Pr,Rg)).
  pickPostfix([_,..L]) => pickPrefix(L).

  oper:(string)=>cons[operator].
  oper(Op) => case Op in {
#(Operators)    | _ default => []
  }

  public isBracket:(string) => option[bracket].
  isBracket(Str) => case Str in {
#(Brackets)    | _ default => .none
  }

  public isLeftBracket:(string) => boolean.
  isLeftBracket(S) => .bkt(S,_,_,_,_) ?= isBracket(S).

  public isRightBracket:(string) => boolean.
  isRightBracket(S) => .bkt(_,_,S,_,_) ?= isBracket(S).

  public first:(char) => option[string].
  first(Op) => case Op in {
#(First)    | _ default => .none
  }

  public follows:(string,char) => option[string].
#(Follows)  follows(_,_) default => .none.

  public final:(string) => boolean.
  final(Op) => case Op in {
#(Final)    | _ default => .false
  }

  public keyword:(string) => boolean.
  keyword(Op) => case Op in {
#(Keywords)    | _ default => .false
  }
}
