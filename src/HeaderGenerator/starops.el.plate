;;; starops.el -- Automatically generated -- Do not edit  -*- lexical-binding: t; -*-

(defconst star-ops
  '(#(Operators))
  "Table of standard star operators"
)

(defconst star-brackets
  '(#(Brackets))
  "Table of standard star brackets"
)

(defun star-is-a-word (s)
  (string-match "\\`\\w+\\'" s))

(defun star-genops-hash ()
  (let ((l star-ops)
        (b star-brackets)
        (m (make-hash-table :test 'equal))
	(bs ())
	(ops ())
	(ws ()))
    (while l
      (let* ((o (car l))
             (op (1st o))
             (specs (2nd o)))
        (puthash op specs m)
	(if (star-is-a-word op)
	    (setq ws (cons op ws))
	  (setq ops (cons op ops)))
        (setq l (cdr l))))
    (while b
      (let* ((o (car b))
             (left (2nd o))
             (right (3rd o))
             (inner (4th o)))
        (puthash left (list `(left ,right ,inner)) m)
        (puthash right (list `(right ,left ,inner)) m)
	(setq bs (cons left (cons right bs)))
        (setq b (cdr b))))
    (list m ops ws bs)
    )
  )

(defun star-init-operators ()
  (if (not (boundp 'star-opers))
    (let* ((ops (star-genops-hash))
           (syms (2nd ops))
           (words (3rd ops))
           (symregexp (star-one-of syms))
           (wsregexp (concat "\\<" (star-one-of words) "\\>")))
      (setq star-opers (1st ops))
      (setq star-op-regexp (star-compose-regexps (list symregexp wsregexp)))
      (setq star-bkt-regexp (star-one-of (4th ops))))
  ))

(defun star-is-oper (op table mode)
  (let ((specs (gethash op table)))
    (if specs
      (catch 'star-is-oper
        (while specs
          (let ((sp (car specs)))
            (if (eq (1st sp) mode)
              (throw 'star-is-oper (cdr sp))
              (setq specs (cdr specs)))))
            nil)
       nil)))

(defun star-is-prefixop (op)
  (star-is-oper op star-opers 'prefix))

(defun star-prefix-priority (op)
  (let ((spec (star-is-prefixop op)))
    (if spec
      (1st spec)
      nil)))

(defun star-prefix-arg-priority (op)
  (let ((spec (star-is-prefixop op)))
    (if spec
      (2nd spec)
      nil)))

(defun star-is-infixop (op)
  (star-is-oper op star-opers 'infix))

(defun star-is-postfixop (op)
  (star-is-oper op star-opers 'postfix))

(defun star-is-left (op)
  (star-is-oper op star-opers 'left))

(defun star-is-right (op)
  (star-is-oper op star-opers 'right))
