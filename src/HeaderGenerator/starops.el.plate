;;; starops.el -- Automatically generated -- Do not edit  -*- lexical-binding: t; -*-

(require 'star-util)

(defconst star-ops
  '(#(Operators))
  "Table of standard star operators"
)

(defconst star-brackets
  '(#(Brackets))
  "Table of standard star brackets"
)

(defconst star-keywords
  '(#(Keywords))
  "Table of standard keywords"
)

(defun star-is-a-word (s)
  (string-match "\\`\\w+\\'" s))

(defvar star-op-regexp nil
  "operator regular expression")

(defvar star-bkt-regexp nil
  "bracket regular expression")

(defconst star-opers
  (let ((l star-ops)
        (b star-brackets)
        (ops (make-hash-table :test 'equal))
        (bs ())
        (syms ())
        (words ()))
      (while l
        (let* ((o (car l))
               (op (1st o))
               (specs (2nd o)))
          (puthash op specs ops)
	      (if (star-is-a-word op)
	        (setq words (cons op words))
	       (setq syms (cons op syms)))
          (setq l (cdr l))))
      (while b
        (let* ((o (car b))
               (left (2nd o))
               (right (3rd o))
               (inner (4th o)))
          (puthash left (list `(left ,right ,inner)) ops)
          (puthash right (list `(right ,left ,inner)) ops)
	      (setq bs (cons left (cons right bs)))
          (setq b (cdr b))))
       (let* ((symregexp (star-one-of syms))
              (wsregexp (concat "\\<" (star-one-of words) "\\>")))
         (setq star-op-regexp (star-compose-regexps (list symregexp wsregexp)))
         (setq star-bkt-regexp (star-one-of bs))
         ops)
        )
   "internal table of star operators"
)

(defun star-is-oper (op table mode)
  (let ((specs (gethash op table)))
    (if specs
      (catch 'star-is-oper
        (while specs
          (let ((sp (car specs)))
            (if (eq (1st sp) mode)
              (throw 'star-is-oper (cdr sp))
              (setq specs (cdr specs)))))
            nil)
       nil)))

(defun star-is-prefixop (op)
  (star-is-oper op star-opers 'prefix))

(defun star-prefix-priority (op)
  (let ((spec (star-is-prefixop op)))
    (if spec
      (1st spec)
      nil)))

(defun star-prefix-arg-priority (op)
  (let ((spec (star-is-prefixop op)))
    (if spec
      (2nd spec)
      nil)))

(defun star-is-infixop (op)
  (star-is-oper op star-opers 'infix))

(defun star-is-postfixop (op)
  (star-is-oper op star-opers 'postfix))

(defun star-is-left (op)
  (star-is-oper op star-opers 'left))

(defun star-is-right (op)
  (star-is-oper op star-opers 'right))

(provide 'star-ops)
