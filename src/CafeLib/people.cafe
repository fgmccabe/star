-- Sort some people
import "cafe:stdCaf.cafe";
import "cafe:sort.cafe";
import "cafe:list.cafe";

type person is noone or someone(name:_string,age:_integer);

var list#spec(display:(list(%t))=>void,
  empty:(list(%t)=>logical,
  head:(list(%t))=>maybe(%t),
  tail:(list(%t))=>maybe(list(%t)),
  match:(list(%t))=>maybe($2(%t,list(%t))),
  cons:(%t,list(%t))=>list(%t)) is list$package();

var sort#spec(concat:(list(%t),list(%t))=>list(%t),
              sort:((list(%t),(%t,%t)=>boolean)=>list(%t))) is sort$package();

procedure display#person(io:#file,P:person){
  switch P in {
    noone -> __#outStr(io,"noone");
    someone(N:string,A:#int) -> {
      __#outStr(io,"someone(");
      __#outStr(io,N);
      __#outStr(io,":");
      __#outInt(io,A);
      __#outStr(io,")");
    }
  }
};

function less#person(P1:person,P2:person):boolean => 
  switch P1 in {
    noone -> true;
    someone(N1:_string,A1:_integer) -> switch P2 in {
      noone -> false;
      someone(N2:_string,A1:_integer) -> N1<N2
    }
  };

var LL:list(person) is valof{
  var ian:person is someone("ian",34);
  var alfred:person is someone("alfred",45);
  var john:person is someone("john",23);

  var l1:list(person) is cons(ian,nil);
  var l2:list(person) is cons(alfred,l1);
  valis cons(john,l2);
}
 
procedure main(){
  var SS:list(person) is sort(LL,less#person);
  display#list(__#logFile,LL,display#person)
}

