-- Implement hash tree

import stdCafe;

type hashTree(%k,%v) is hash#nil
                     or hashEntry(%k,%v)
                     or hashPair(hashTree(%k,%v),hashTree(%k,%v));

function hash#pkg():$3() => let{
  function search(Tr:hashTree(%k,%v),Ky:%k,
                 Hsh:(%k)=>#long,Eq:(%k,%k)=>logical):mayBe(%v) => let{
    function hash@srch(Tr:hashTree(%k,%v),H:_long,D:_integer) => 
      switch Tr in {
        hash#nil -> impossible;
        hashEntry(K:%k,V:%v) -> valof{
          if Eq(K,Ky) then
            valis just(V)
          else
            valis impossible
        };
        hashPair(Lt:hashTree(%k,%v),Rt:hashTree(%k,%v)) -> valof {
          var Toggle:#long is (H>>D).&.1;
          if Toggle=0 then
            valis hash@srch(Lt,H,D+1)
          else
            valis hash@srch(Rt,H,D+1)
        }
      };
  } in hash@srch(Tr,Hsh(Ky),0);

  insert(Tr:hashTree(%k,%v),Ky:%k,Vl:%v,Hsh:(%k)=>#long,Eq:(%k,%k)=>logical):hashTree(%k,%v) => let{
    hash#ins(Tr:hashTree(%k,%v),H:#long,D:_integer):hashTree(%k,%v) =>
      switch Tr in {
        hash#nil -> hashEntry(Ky,Vl);
        hashEntry(K:%k,V:%v) -> valof{
          if Eq(K,Ky) then
            valis hashEntry(Ky,Vl)
          else{
            Toggle:#long is (H>>D).&.1;
            ToggleX:#long is (Hsh(K)>>D).&.1;
            if Toggle=ToggleX then{
              sH:hashTree(%k,%v) is hash#ins(Tr,H,D+1); -- must be different on a different bit
              valis hashSingle(sH);
            } else if Toggle=0 then
              valis hashPair(hashEntry(Ky,Vl),Tr)
            else
              valis hashPair(Tr,hashEntry(Ky,Vl))
          }
        };
        hashSingle(sH:hashTree(%k,%v)) => 
      }
   } in hash#ins(Tr,Hsh(Ky),0);

   remove(Tr:hashTree(%k,%v),Ky:%k,Hsh:(%k)=>#long,Eq:(%k,%k)=>logical):hashTree(%k,%v) => let{
    hash#rem(Tr:hashTree(%k,%v),H:#long,D:_integer):hashTree(%k,%v) =>
      switch Tr in {
        hash#nil -> hash#nil;
        hashEntry(K:%k,V:%v) -> valof{
          if Eq(K,Ky) then
            valis hash#nil
          else{
            Toggle:#long is (H>>D).&.1;
            ToggleX:#long is (Hsh(K)>>D).&.1;
            if Toggle=ToggleX then{
              sH:hashTree(%k,%v) is hash#rem(Tr,H,D+1); -- must be different on a different bit
              valis hashSingle(sH);
            } else if Toggle=0 then
              valis hashPair(hashEntry(Ky,Vl),Tr)
            else
              valis hashPair(Tr,hashEntry(Ky,Vl))
          }
        }
      }
   } in hash#ins(Tr,Hsh(Ky),0);


        
    
} in ();