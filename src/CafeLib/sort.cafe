-- Definition of sort

import "cafe:stdCaf.cafe";

type sort#spec is sort#spec(
  concat:(list(%t),list(%t))=>list(%t),
  sort:((list(%t),(%t,%t)=>boolean)=>list(%t))
);

function sort$package() is let{
  function concat(L:list(%t),R:list(%t)):list(%t) =>
    switch L in {
      nil -> R;
      cons(H:%t, Tl:list(%t)) -> valof{
      var RR:list(%t) is concat(Tl,R);
      valis cons(H,RR)
    }
  };

  -- split splits a list into two halves
  -- it has 5 args: the list to split, the pivot, the left and right lists
  -- and a compare function
  function split(L:list(%t),P:%t,L1:list(%t),L2:list(%t),C:(%t,%t)=>boolean):
    $2(list(%t),list(%t)) =>
    switch L in {
      nil -> $2(L1,L2);
      cons(H%t, Tl:list(%t)) -> valof{
        var Test:boolean is C(H,P);
        if Test then {
          var L1n:list(%t) is cons(H, L1);
          valis split(Tl,P,L1n,L2,C)
        } else {
          var L2n:list(%t) is cons(H,L2);
          valis split(Tl,P,L1,L2n,C);
        }
      }
    };

  -- sort is a function from lists to lists
  function sort(L:list(%t), C:(%t,%t)=>boolean):list(%t) =>
    switch L in {
      nil -> nil;
      cons(H:%t, Tl:list(%t)) -> valof{
        var $2(L1:list(%t),L2:list(%t)) is split(Tl, H, nil, nil, C);
        var S1:list(%t) is sort(L1,C);
        var S2:list(%t) is sort(L2,C);
        var SS2:list(%t) is cons(H,S2);
        valis concat(S1,SS2);
      }
    };
} in sort#spec(concat,sort);