function K(E:%t):()=>%t => 
  let{
    function F():%t => E;
  } in F;

function thunk(F:()=>%t):()=>%t =>
  let{
    var E:()=>%t := eval;
    function eval():%t => valof{
      var R:%t is F();
      var EE:()=>%t is K(R);
      E := EE;
      valis R
    };
    function KK:()=>%t => E();
  } in KK;

function nfib(X:#int):#int =>
  valof {
    if X<=1 then 
      valis 1
    else{
      var X1:#int is nfib(X-1);
      var X2:#int is nfib(X-2);
      valis X1+X2+1;
    }
  };

function delayed(F:(%t)=>%t,I:%t):()=>%t =>
  let{
    function eval():%t => F(I);
  } in eval;

procedure main(X:#int){
  var trial:()=>#int is delayed(nfib,X);
  var th:()=>#int is thunk(trial);

  var Start:#long is __#nanos();
  var R:#int is th();
  var Stop:#long is __#nanos();

  __#outStr(__#logFile,"th(");
  __#outInt(__#logFile,X);
  __#outStr(__#logFile,") = ");
  __#outInt(__#logFile,R);
  __#outStr(__#logFile,"\n");

  var Tm:#float is (Stop-Start:#float);
  __#outFloat(__#logFile,Tm);
  __#outStr(__#logFile,"\n");

  var Start2:#long is __#nanos();
  var S:#int is th();
  var Stop2:#long is __#nanos();
 
  __#outStr(__#logFile,"th(");
  __#outInt(__#logFile,X);
  __#outStr(__#logFile,") = ");
  __#outInt(__#logFile,S);
  __#outStr(__#logFile,"\n");

  var Tm2:#float is (Stop-Start:#float);
  __#outFloat(__#logFile,Tm2);
  __#outStr(__#logFile,"\n");
}
