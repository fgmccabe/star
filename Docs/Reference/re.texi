
@node Overloaded Functions
@subsection Overloaded Functions
@anchored{overloadedFunctions}

The type of an overloaded function has a characteristic signature:
it's type is universally quantified but with a constraint on the bound
type variables.

For example, given the definition:
@example
dble:all t ~~ arith[t] |: (t)=>t
dble(X) => X+X
@end example

the generalized type of @code{dble} is:
@example
all t ~~ arith[t] |: (t)=>t
@end example

As noted in @refer{overloading}, the @code{dble} function is converted
to a function with an explicit dictionary argument that carries the
implementation of the @code{arithmetic} contract:

@example
dble:all t ~~ (arith[t])$=>(t)=>t
dble(A) => let{
  dble_:(t)=>t
  dble_(X) => (A.+)(X,X)
} in dble_
@end example

In effect, this means that the @code{dble} has _two_ types assigned to it: the constrained type above that is inferred through type inference and an overloaded type that results from its translation.
[listing]
all t ~~ (arith[t])$=>(t)=>t

[NOTE]
Overloaded types are function types, but we use a different types symbol -- @code{$\=>} -- to help distinguish the special role that overloaded types have.

[TIP]
The existence of an overloaded type associated with a variable is an important signal: it means that references to the variable must be resolved -- that appropriate @code{implementation}s of the required contracts are found.

When an overloaded function variable is referenced the normal type of the variable expression is identical to the normal rule for variable expressions: the type of the expression is the refreshed type of the constrained type associated with the variable.

However, the existence of the overloaded type associated with the variable acts as a signal that the overloading must be resolved.

For example, in the function:
[listing]
quad:all t ~~ arith[t] |: (t)=>t
quad(X) => dble(dble(X))

the type of each @code{dble} variable expression is determined to be:
[listing]
arith[t] |: (t)=>t

[NOTE]
They are the same type in this case because of the calling pattern for @code{dble}.

Since @code{dble} originally had a constrained type -- together with its associated overloaded type -- both references must be resolved by supplying an implementation of @code{arithmetic}. I.e., both @code{dble} expressions are interpreted as:
[listing]
dble[A](dble[A](X))

where we use @code{dble[A]} as a special form function call footnote:[We use this notation for exposition purposes only -- it is not normal `*Star* syntax'.] that denotes a use of the overloaded function.

The @code{quad} function is generic, and so its type is also a generalized constrained type:
[listing]
quad:all t ~~ arith[t] |: (t)=>t

and is also transformed into the overloaded definition:
[listing]
quad:all t ~~ (arith[t]) $=> (t)=>t
quad(A) => let{
  quad_:(t)=>t
  quad_(X) => dble[A](dble[A](X))
} in quad_

In effect, the resolved dictionary for @code{arithmetic} is `pulled out' to a larger scope.

In all cases, for overloaded functions to be invoked correctly, there must be some outermost point where an overloaded function is invoked with a concrete implementation value.

If an overloaded variable is not properly resolved, then the compiler will issue a syntax error.

In most cases, the outermost scope of a program is package-level. It is possible for a package to export an overloaded function -- in which case imports of the package must resolve the overloaded function.

@anchored{localAction}
@node Local Actions
@subsection Local Actions
@cindex Actions executed within a @refer{thetaEnvironment}

A local action is a sequence of actions -- enclosed in braces -- that are performed when the theta environment is first entered and before any dependent bound expressions are evaluated.

For example, in:
[listing]
traceF : (integer)=>integer
traceF(X) =>
  let{
    f:(integer)=>integer
    f(0) => 1
    f(XX) => XX*f(XX-1)
    {
      logMsg(info,"in theta environment");
    }
  } in f(X)

The action
[listing]
logMsg(info,"in theta environment")

is executed as part of establishing the @refer{thetaEnvironment} prior to the function @code{f} being evaluated.

Local actions are useful for situations where proper initialization of the entries in the theta environment are more extensive than binding a variable to a value.

[TIP]
There is no predetermined order of execution of @refer{LocalAction}s -- for example, if there is more than one in a given @refer{thetaEnvironment}. The compiler ensures that all the preconditions for the @refer{LocalAction} -- specifically definitions that are referenced by the @refer{LocalAction} -- are established prior to the execution of the action.


@node Satisfaction Semantics
@section Satisfaction Semantics
@anchored{querySemantics}
@cindex query,semantics of
@cindex variable,in queries

The semantics of conditions is based on @emph{satisfaction} -- for
example, the answer to a query is based on the different ways that the
condition part of the query may be satisfied.

The satisfiability of a condition is not identical to the normal
concept of evaluating @code{boolean}-valued expressions. In essence, a
@refer{Condition} is satisfied if there is a binding for the unbound
variables within the @refer{Condition} that makes the
@refer{Condition} true.

Variables that are bound as a result of satisfying a @refer{Condition}
are often used to produce a value from the @refer{Condition}. For
example, an @code{all} query has as value @emph{all} the tuples that
satisfy the @refer{Condition} and the @code{anyof} query has as value
any tuple that satisfies the @refer{Condition}.

A variable may occur in an outer context as well as within a
@refer{Condition}. Such a variable is in scope within the query but is
not defined by the query. As with repeated occurrences of variables,
such free variables become constraints on the satisfaction of the
query.

\begin{description}
A @refer{SearchCondition}:: of the form:
[listing][escapechar=|]
|@refer{Pattern}| in |@refer{Expression}|

is considered satisfiable for any value in the collection identified by @refer{Expression} that matches the @refer{Pattern}.
\end{description}


The result of a query is expressed as the value of an expression. Each element of the result is obtained by evaluating the @emph{bound} expression in the context of the bindings of the variables arrived at during the satisfaction of the query constraint.

In the case of an @code{all} query and the @code{view} definition, the computed result contains the result of evaluating the bound expression for every possible way of satisfying the query.  The @code{one} query looks for just one way of solving the query constraint and a numerically bounded query looks for that many ways. footnote:[Of course, if the query asks for 10 results (say), there may not be that many answers.]

\begin{aside}
@cindex conditions,relative order of terms
@cindex order of terms in conditions
It is important to note that, in the case of a conjunction or disjunction, the relative order of terms is not relevant. For example the conditions
[listing]
X in male and ("fred",X) in parent

and
[listing]
("fred",X) in parent and X in male

have the same solutions -- are satisfied for the same bindings of the variable @code{X}.
\end{aside}

==== Type Safety
@anchored{querytypesatty}
A relational query is type if the type of the pattern is consistent with the type of the elements of the tuple.
