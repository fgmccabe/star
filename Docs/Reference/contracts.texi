

==== Default Values @anchor{defaultValues} @cindex{type,record
constructor!default values} @cindex{default values,record constructor}

It is permitted to associate a @emph{default value} with a field of an
record constructor. A default value is simply an expression for an
attribute that is used should a particular record literal expression
(see @var{recordLiteral}) not contain a value for that field.

For example, for convenience, we might add @code{default} annotations
in the @code{twoThree} type defined above, resulting in the type
definition in @var{twoThreeDef}.

@anchor{twoThreeDef} .A @code{twoThree} tree type with defaults
@example
all s ~~ twoThree[s] ::= three{ left:twoThree[s]; left default =
  empty; label:s; right:twoThree[s]; right default = empty; } or two{
  left:twoThree[s]; left default = empty; right:twoThree[s]; right
  default = empty; } or empty;


@quotation NOTE
@cindex{expressions,default} @cindex{variable,scope} A default value
expression for an attribute is evaluated in the scope that is valid
for the type definition itself. The default value expression may
reference variables that are in scope at the point of type
definition. The default value expression may also reference
@emph{other} fields of the record constructor -- as though they were
variables -- provided that they themselves do not have @code{default}s
associated with them.

For example, in this definition of @code{Person}:
@example
Person ::= someone{ name:string; dob:date; age:()=>float; age()
  default => now()-dob; }

there is a @code{default} definition of the @code{age} field that is
used if a given @code{someone} record literal does not mention a value
for @code{age}. This @code{default} definition makes use of the
@code{dob} field as though it were a free variable of the @code{age}
function.


==== Defaults of @code{var} Fields @cindex{expressions,default!assignable
field} @cindex{var field@@code{var} field,default value}

To declare a @code{default} value for a @code{var} field, the form:
**** @var{Identifier} default := @var{Expression} ****

should be used. For example, in the type:
@example
account ::= account{ balance:var integer; balance default := 0 }

the @code{balance} field is a @code{var} field, and its default value
is @code{0}.

==== Type Variables and Safe Algebraic Type Definitions @cindex{type
variables in an algebraic type definition} @cindex{constructor type
variables}

For an @var{AlgebraicType} definition to be safe requires a constraint
on type variables within the definition. In particular, it is not
permitted to @emph{introduce} a type variable in any of the
constructors in the definition.

@quotation NOTE
Specifically, any unbound type variables mentioned in a type
definition must also occur within the @var{TypeSpec} or be bound by an
enclosing type quantifier.


For example, the type definition:
@example
opaque ::= op(t)

is not valid because the type variable @code{t} mentioned in the
@code{op} constructor is not mentioned in the @var{TypeSpec} -- unless
@code{t} is actually bound by a quantifier in an enclosing form.

@quotation NOTE
The reason for this is that type safety cannot be guaranteed for such
constructors. For example, consider the invalid function:
@example
badOp(op(23)) is false;

The type signature for @code{badOp} is
@example
badOp:(opaque)=>boolean

and, according to type inference rules, an expression such as:
@example
badOp(op("alpha"))

would be type safe. However, this expression will lead to a run-time
failure when the integer 23 is compared against the string
@code{"alpha"}.

@quotation NOTE
Note that the converse case, where a type variable is mentioned in the
@var{TypeSpec} is not mentioned in a constructor defined within the
type definition is perfectly valid.

It @emph{is} possible to have type variables mentioned in a
constructor that are not defined in the @var{TypeSpec}. The constraint
is that such type variables must be closed by quantification.

For example, the type definition:
@example
univ ::= univ(all t ~~ t)

is a legally valid @var{AlgebraicType} definition; albeit one that is
quite restricted. Locally quantified types are usually associated with
function types:
@example
uniFun ::= uniFun(all t ~~ (t,t)=>t)

which describes a term constructor @code{uniFun} that expects a
generic function as an argument.

=== Automatic Synthesis of Contract Implementations @cindex{automatically
synthesizing implementations} @cindex{implementing
contracts@@code{implementing} contracts}

In some cases, the @emph{regular} implementation of a contract by be
predicted by examining the algebraic type definition itself. The
@Star{} compiler automatically generates implementations of the
@code{equality} and the @code{pPrint} contracts, for example, by
inspecting the type definition itself.

A programmer may extend this system of atomically implementing
contracts by implementing a special macro whose name is of the form
@code{implement\_\q{name}}. A type definition that is marked:
@example
person ::= some{ name:string; } | noOne implementing Spec

will result in the macro @code{implement_Spec} being invoked on the
type definition.

This is used, for example, to allow coercion between types and the
standard @code{quoted} type to be synthesized, instead of being
constructed manually.

=== Algebraic Interface Record @anchor{algebraicInterface} An
@var{AlgebraicType} definition induces an interface that is composed
of all the fields in any of the @var{RecordConstructor}s that are
defined within the definition.

This interface -- which takes the form of a @var{RecordType} --
contains a @var{Annotation} for every @var{Annotation} that is present
in a @var{RecordConstructor}.

For example, the interface for the @code{account} type above consists
of:
@example
{ balance:var integer; }

This interface is used when determining the type soundness of a
@var{RecordAccess} expression.

@quotation NOTE
The condition noted above that two fields of the same name in two
@var{RecordConstructor}s of the same @var{AlgebraicType} must have the
same type can be formalized by declaring that the interface of an
@var{Algebraic} type must be well formed (which is only possible if
there is only a single @var{Annotation} for a given field).

=== Type Witness Definition @anchor{countsAs}

A @var{TypeWitness} definition declares that a given type exists. It
is used to assert that a given existential type exists.


@anchor{typeCountsAsFig} .Type Witness Statement ****
@anchor{TypeWitness}TypeWitness ::= @code{type} @var{Identifier} @code{=}
@var{Type} ****

For example, in the expression:
@example
group{ type elem = integer; inv(X) => -X; op(X,Y) => X+Y; zero = 0; }

the statement:
@example
type elem = integer;

asserts that the type @code{integer} is a witness for the
existentially quantified type @code{elem}.
@quotation NOTE
@var{TypeWitness} statements are inherently internal statements: the
witness type itself is not exposed by the record that contains the
@var{TypeWitness} statement.

== Contracts @anchor{contracts} @cindex{type,contracts}

A contract is a specification of a set of functions and action
procedures that form a coherent collection of
functionality. Associated with a @var{Contract} are one or more
@var{Type}s -- the contract is said to be @emph{over} those types.





=== Resolving Overloaded Definitions @anchor{overloading}
@cindex{type,contracts!resolving} @cindex{overloading} @cindex{resolving
overloaded definitions}

When a program varers to a contract-defined function -- i.e., a
variable that is declared within a @code{contract} -- then that
reference must be @emph{resolved} to an actual program before the
program can be said to be executable.

For example, consider the expression:
@example
A+3

The @code{(+)} function is part of the @code{arithmetic} contract (see
@var{arithmeticContract}) which means that we need to resolve the call
to @code{(+)} to an actual implemented function.

The type signature for @code{(+)} is:
@example
all t ~~ arithmetic[t] |: (t,t)=>t

where the constraint
@example
arithmetic[t]

is satisfied for any @code{t} for which there is an
@code{implementation} of @code{arithmetic}.

In this case we know, because @code{3} is an @code{integer} that the
type of @code{A} must also be @code{integer} -- as is the type of the
whole expression. So, the actual constraint after taking type
inference into account is:
@example
arithmetic[integer]

which @emph{is} satisfied because there is a standard implementation
of @code{arithmetic} for @code{integer}.

Implementations can be viewed as functions whose value is a record of
all the elements of the defined contract. For example, the
implementation function of @code{arithmetic} over @code{integer} has a
definition that is similar to:
@example
arithmetic#integer() is arithmetic{ X+Y => _integer_plus(X,Y) ...  }

Resolving the expression @code{A+3} is achieved by replacing the
abstract function @code{(+)} with an actual function:
@example
arithmetic#integer().+(A,3)

In some cases, there is not sufficient information about the types of
variables to fully resolve the appropriate definition to use. In this
case, it must be true that the type(s) involved must be variable and
that they @emph{surface} to a point where the type variable(s) are
generalized.

Consider the lambda:
@example
(X,Y) => X+Y*Y

The type of @code{X} and @code{Y} may not be completely known, and are
denoted by the same type variable (@code{t}) say; @code{t} is,
however, a constrained type that is bound by the scope of the function
itself.

Ultimately, in some larger scope, either the @code{t} type becomes
grounded into some specific type, or it is bound by an explicit
quantifier. The quantifier must varlect the contract constraint --
otherwise the compiler will report an error. For example, it might be
that we defined a variable in a @code{let} @var{ThetaEnvironment}:
@example
addSq : all t arithmetic[t] |: (t,t)=>t addSq = ((X,Y)=>X+X*Y)

The @code{arithmetic} contract constraint is surfaced to the same
level where the type variable @code{t} is bound.

In general, where an overloaded name is used, there are two permitted
possibilities: the type constraints implied by the overloaded name are
subsumed by an explicit type equality or the type variable is bound in
some @var{thetaEnvironment}.

@quotation NOTE
The third possibility -- where the constrained type is a type variable
but is not bound by a @var{thetaEnvironment} is an error -- an
unresolved overloaded identifier error.

In the case of the @code{addSq} definition, there is not enough
information here to @emph{fix} an actual implementation to use; and so
we resolve this by rewriting the @code{addSq} function to take an
additional argument -- the @code{arithmetic} dictionary represented by
the variable @code{D}:
@example
addSq#(D) => let{ addSq'(X,Y) => D.+(X,D.*(Y,Y)); } in addSq'

In addition (sic), we will have to also resolve all @emph{calls} to
@code{addSq} as well. A call to @code{addSq} such as:
@example
addSq(A,3)

will be rewritten to:
@example
addSq#(arithmetic#integer())(A,3)

because we know from the presence of the literal integer that
@code{addSq} is being used with @code{integer} arguments.

Resolving for contract implementations @emph{pushes out} from
expressions such as @code{A+3} outward until all references to
contracts have been resolved by explicit implementations.

@quotation NOTE
It is an error for the top-level of a program -- i.e., package-level
-- to contain unresolved references to contracts.

The formal rules for satisfying (and hence resolving) contract
constraints are shown in @var{overloading}.


=== Standard Contracts @anchor{standardContracts}
@cindex{type,contracts!standard} @cindex{standard,contracts}

The language defines a few contracts as standard. These cover, for
example, the concepts of @code{equality}, @code{comparable}, and
@code{sizeable} entities and the @code{arithmetic} operations. These
contracts are integral to the semantics of the language.

@anchor{standardContractTable} .Standard Contracts [cols="1,5,2"] |===
|Contract | Description | Reference

|@code{equality[t]} |Definition of equality | @var{equalityPredicate}

|@code{comparable[t]} |Definition of comparability|
 @var{comparisonPredicates}

|@code{arithmetic[t]}|Basic arithmetic| @var{arithmeticContract}

|@code{math[t]} | Misc math functions | @var{mathContract}

|@code{trig[t]} | Trigonometry functions| @var{trigContract}

|@code{bitstring[t]} | Bitwise functions| @var{bitString}

|@code{sizeable[t]} | Definition of @code{size} and @code{empty}|
|@var{sizeableContract} @code{sequence[t]} | Sequences of values|
|@var{sequenceContract} @code{indexable[t]} | Random access|
|@var{indexableContract} @code{iterable[t]} | Iteration over
|collections| @var{iterableContract} @code{coercion[s,t]} | Coerce
|between types| @var{typeCoercionContract} @code{speech[a]} | Actor
|speech actions| @var{speechContract} @code{pPrint[t]} | Pretty Print
|Display| @var{pPrintContract} @code{computation[c]} | Computation
|Expressions| @var{computationContractProg} @code{execution[c]} |
|Computation Expressions| @var{executionContractProg} ===

@anchor{typeSystem} == Type System @cindex{type,system}

The type system consists of a language of type expressions and a set
of rules for showing consistency between types and programs.

The foundation of these rules are the rules that relate one type to
another; and the primary relationship involved here is subsumption.

In addition there are rules for determining when various constraints
are satisfied and there are rules that relate specific expressions to
types.


%=== Satisfying Constraints ==== Satisfying Contract Constraints
%@anchor{satisfyingContracts} @cindex{contract constraint,satisfiability}
%@cindex{satisfiability,contract constraint} @cindex{resolving contract
%constraints} A @var{ContractConstraint} of the form:
%@example[mathescape=true] _Contract_ over
%(_Type@sub{1}_\sequence{,}_Type@sub{n}_) ...  or @example _Contract_
%over (_Type@sub{1}_\sequence{,}_Type@sub{n}_) determines
%(_Type\sub{n+1_}\sequence{,}_Type\sub{n+m_}) ...
%@cindex{determines@}determines@code{} is satisfiable if all of
%_Type@sub{1}_ through _Type@sub{n}_ are @var{TypeExpression}s and
%there is an }implementation@code{ for the types denoted. I.e., the
%constraint is satisfiable if there is a statement of the
%form: @example implementation @emph{Contract} over
%(@emph{T@sub{1}}\sequence{,}@emph{T@sub{n}}) ...  or @example
%implementation @emph{Contract} over
%(@emph{T@sub{1}}\sequence{,}@emph{T@sub{n}}) determines
%(@emph{T\sub{n+1}}\sequence{,}@emph{T\sub{n+m}}) ...  respectively;
%where @emph{Type\subi} unifies with @emph{T\subi} for each $i$.
%\begin{aside} The determined types
%(@emph{T\sub{n+1}}\sequence{,}@emph{T\sub{n+m}}) take part in the
%satisfiability of a contract; but they do not determine the
%applicability of a contract implementation. I.e. only the types
%mentioned before the }determines@code{ clause actually affect the
%selection of the implementation.  The intuition is that there is a
%dependency between the determined types and the main types: they are
%not independent.  \end{aside} A }default@code{ implementation of the
%form: @example implementation @emph{Contract} over
%(@emph{V@sub{1}}\sequence{,}@emph{V@sub{n}}) default is ...  or, for
%contracts with functional dependencies, if it takes the
%form: @example implementation _Contract_ over
%(_V@sub{1}_\sequence{,}_V@sub{n}_) determines
%(_V\sub{n+1_}\sequence{,}_V\sub{n+m_}) default is ...  where all of
%}_V\subi_@code{ are @var{TypeVariable}s satisfies the
%@var{ContractConstraint} for }_Contract_@code{ if _Type\subi_ unify
%with _V\subi_.  \begin{aside} A @var{ContractConstraint} that has a
%}determines@code{ clause can only be satisfied by an
%}implementation@code{ that also has a matching }determines@code{
%clause. Conversely, a @var{ContractConstraint} that does not have a
%}determines@code{ clause can only be satisfied by implementations
%that also do not have a }determines@code{ clause.  \end{aside}
%\begin{aside} This unification may induce other constraints,
%including constraints that require resolution of contracts.
%\end{aside} It is an error if there are more than one
%non-}default@code{ candidates for satisfying a contract
%constraint. It is also an error if there are no candidates to satisfy
%the constraint.  \begin{aside} One of the less obvious requirements
%in satisfying contract constraints is that the contract constraint
%must already be partially determined. In particular, the 'top-level'
%of the types in the constraint must be known -- unless the
%}default@code{ implementation is used.  \end{aside} ==== Consistency
%of Contract Constraints A @var{TypeVariable} may not be constrained
%by inconsistent type constraints.  Two @var{ContractConstraint}s are
%consistent if either they are about different contracts, or if they
%are about the same contract the corresponding contract types are
%unifiable. In the latter case, the determined types (if present) must
%also unify.  ==== Satisfying Attribute Constraints An
%@var{FieldConstraint} takes the form: @example @var{Type} implements
%\{ @var{Identifier}@sub{1} has type
%@var{Type}@sub{1}\sequence{;}@var{Identifier}@sub{n} has type
%@var{Type}@sub{n} \} An @var{FieldConstraint} is satisfiable if the
%left-hand @var{Type} is an @var{AlgebraicType} whose definition is
%such that for each @var{Identifier}\subi{} has a @var{LabeledRecord}
%that includes a @var{TypeAnnotation} for the @var{Identifier} and
%whose corresponding type also unifies with @var{Type}\subi.  ====
%Consistency of Attribute Constraints Two @var{FieldConstraint}s are
%consistent if either they are about different fields, or if they are
%about the same fields then corresponding field types must be
%unifiable.  A @var{TypeVariable} can be constrained by any number of
%@var{FieldConstraint}s -- provided that they are consistent with each
%other. Similarly, a @var{TypeVariable} can be constrained by
%combinations of @var{ContractConstraint}s and @var{FieldConstraint}s.

%=== Type Inference @anchor{typeConstraints} @cindex{type,constraints} A type
%inference constraint is a predicate relating elements of the program
%and any type expressions; the general form of which is:
%\begin{prooftree} \AxiomC{\mbox{_Condition_}}
%\UnaryInfC{\typeprd{E}{X}{T}} \end{prooftree} This should be read as
%\begin{quote} If _Condition_ is satisfied, then we can infer from the
%context _E_ that _X_ has type _T_ \end{quote} where the symbol
%\tinfers{} can be read as }type implication'. In general, the type of
%an expression depends on the context that it is found. The context of
%a type expression can be defined as a set of _bindings_ of names to
%values. Mostly these values are types -- the types of the names
%involved. But the environment also contains type definitions -- where
%the binding is from a name to a type.  For example, the rule that
%determines if a function application is type-safe, and what resulting
%type of the expression is, is: \begin{prooftree}
%\AxiomC{\typeprd{E}{F}{@code{(}t@sub{1},...,t@sub{n}@code{)}=>@code{}_R_}
%\AxiomC{\typeprd{E}{}(@code{a@sub{1},...,a@sub{n}})@code{}{}(@code{t@sub{1},...,t@sub{n}})@code{}}
%\BinaryInfC{\typeprd{E}{F}(@code{a@sub{1},...,a@sub{n}})@code{}{R}}
%\end{prooftree} This type rule implicitly calls for the unification
%of the type associated with the function and the types associated
%with the arguments to the function.  The type rule for a variable
%bears some explanation: \begin{prooftree} \AxiomC{$X:T\in{}E$}
%\UnaryInfC{\typeprd{E}{X}{\rm{varresh}(T)}} \end{prooftree} This can
%be read as \begin{quote} if the variable _X_ has type _T_ in the
%environment _E_, then the type of an _occurrence_ of the variable is
%varresh(T).  \end{quote} @cindex{varreshing type variables}
%@cindex{type,variable!varreshing} @cindex{renaming type variables}
%@cindex{variable,type of} varresh(T) is the result of rewriting a
%universally quantified types with a new type with new type
%variables. For example, the type @example cons of \pcent{}t is better
%understood as being @example for all \pcent{}t such that cons of
%\pcent{}t footnote:[See Section \vvar{universalType}.]  and
%varreshing this type means stripping the quantifier and replacing all
%occurrences of }\pcent{@code{t} with a new variable: @example
%_varresh_(for all \pcent{}t such that cons of \pcent{}t) = cons of
%\pcent{}t2341 where }\pcent{@code{t2341} is a }new' type variable
%that does not occur anywhere else.  \begin{aside} This procedure of
%varreshing a universally quantified type is equivalent to the logical
%operation of _variable renaming_. In this process, type variables are
%replaced with new type variables that do not occur elsewhere. In
%addition, the universal quantifiers within a logical formula are
%moved to the outermost left-hand side of the formula.  \end{aside}

%\end{aside}

== Type Annotations @anchor{typeAnnotation} An @var{Annotation} is a
statement that declares a variable to have a certain @var{Type} or a
@var{Type} to have a certain @var{Kind}.

For example,
@example
alpha:all t ~~~ (t)=>string

is a @var{TypeAnnotation}, whereas
@example
el :: type
@end example

is a @var{KindAnnotation}.

@anchor{typeAnnotationFig} .Type Annotations **** @anchor{Annotation}Annotation
::= @var{TypeAnnotation} | @var{KindAnnotation}

@anchor{TypeAnnotation}TypeAnnotation ::= @var{Identifier} @code{:}
@var{Type}

@anchor{KindAnnotation}KindAnnotation ::= @var{Identifier} @code{::}
@var{Kind} &nbsp;&nbsp; | @var{Identifier} @code{::}
@var{TypeConstraint} @code{|:} @var{Kind}

@anchor{Kind}Kind::=@code{type} | @code{type/}@var{Decimal} |
@code{type[type,..,type]} ****

