@node Coroutines
@chapter Coroutines
@cindex coroutines
@cindex execution,coroutines

A coroutine is a suspendable computation. Analogous to function calls,
except that a coroutine can be suspended -- allowing another
computation to continue -- and then later resumed. Not to be confused
with multi-threading, coroutines do give some of the same
responsiveness that multiple threads offer; except that coroutines all
operate on a single thread.

There are two main syntactic structures that use coroutines at their
foundation: tasks and generators. A @code{task} is an expression that
computes a value, in the context of a @code{nursery}. The nursery's
role is to @emph{schedule} one or more @code{task} expressions until a
resolution is made.

A generator is an expression that determines the sequence of values in
a @code{for} loop iteration.

@node Tasks
@section Tasks

A @code{task} is an expression that inhabits a coroutine. Tasks can
suspend themselves -- initiating another coroutine as they do so --
they can communicate with each other -- via channels and futures --
and are scheduled -- by an associated @code{nursery}.

@node Task Expressions
@subsection Task Expressions

A @code{task} expression consists of a @code{task}-labeled @refer{BlockAction}.

@float BNF,taskExpressionFig
@caption{Fiber Expression}
@display
@var{ActionExpression} ::+ @refer{TaskExpression}
@anchored{TaskExpression} ::= @code{task} @refer{BlockAction}
@end display
@end float

@refer{TaskExpression}s denote computations that are expected to be
performed asynchronously or in parallel.@footnote{Merely using a
@code{task} expression is not sufficient to make a computation
parallel. For that, use the @code{background} operator.}

A @code{task} is 'created' with the @code{task} notation:
@example
T = task@{ logMsg(info,"This is a task action") @}
@end example

@refer{TaskExpression}s may have values; and may be composed and constructed like other expressions. For example, the function:
@example
tt(X) => task@{
  Y = 2;
  valis X+Y
@}
@end example

represents a rather elaborate way of adding 2 to a number. As with
@code{T} above, the expression:
@example
I = tt(3)
@end example

is not an @code{integer} but an @code{integer}-valued
@refer{TaskExpression}. The value returned may be extracted using
@code{valof}:
@example
Five = valof I
@end example

As with all @refer{Expression}s, if there is a possibility
that the @refer{TaskExpression} will fail, then it shoud be
encapsulated in a @code{try}-@code{catch} block:

@example
ive = valof @{
  try I catch @{
    logMsg(info,"Was not expecting this");
    valis 0
  @}
@}
@end example

@node The @code{task} type
@subsection The @code{task} type
The @code{task} type is a standard type that is used to represent
@refer{TaskExpression}s. 

@example
task[e] <~ @{@}
@end example

@quotation Note
Although the `task' type is implemented as a normal type, it's
definition is hidden as its internals are not relevant to the
programmer.
@end quotation







@quotation Note
@Star{}'s coroutining features are based on the more primitive
concepts around fibers.
@end quotation

@node Task Nursery
@section Task Nursery

A nursery is a group of tasks that are scheduled together.

A @code{task} is a @refer{Expression} that denotes a computation that
may be performed in parallel with other computations.


@node Task-related Functions
@section Task-related Functions
@cindex task functions

@node Background Task
@subsection Background Task
The @code{background} function takes a @code{task} and performs it in
the background (i.e., in parallel with the invoking call). The value
of the @code{background} task is the same as the value of the
backgrounded task.
@example
background : all t ~~ (task[t])=>task[t]
@end example

@quotation Note
@code{background} is a standard prefix operator -- with priority 950 -- 
hence a call to @code{background} may be written without parentheses.
@end quotation

@node Channels and Messages
@section Channels and Messages
[[channels]]

A channel is a typed communications channel between @code{task}s. In
order for a @code{task} to 'send a message' to another @code{task},
they would share the channel object itself and then the receiver would
use @code{recvRv} to wait for the message and the sender would use
@code{sendRv} to send the message.

@node The @code{channel} Type
@subsection The @code{channel} Type

@example
channel[t]
@end example


Like the @code{task} type, the @code{channel} type is _opaque_.

@node The @code{channel} Function
@subsection The @code{channel} Function

The @code{channel} function is used to create channels.
@example
channel: all t ~~ ()=>channel[t]
@end example

Each created channel may be used for sending and receiving multiple
messages. However, the channel is typed; i.e., only messages of that
type may be communicated.

Channels are multi-writer multi-reader channels: any number of tasks
may be reading and writing to a channel. However, any given
communication is between two tasks: one sender and one receiver.

If more than one @code{task} is trying to send a message then it is
non-deterministic which message is sent. If more than one @code{task}
is trying to receive a message then only one will get the message.

Message receives and sends may take place in either order. However,
message communication is _synchronous_. I.e., both sender and receiver
are blocked until a communication occurs.

An immediate implication of synchronous communication is that there is
no buffer of messages associated with @code{channel}s.

@section Fibers
@node Fibers

A fiber is a computation whose execution can be managed. Fibers can be
created, suspended and resumed. Fibers also have identity which allows
data structures to be created that contain fiber references.

@quotation Note
Fibers represent the @emph{foundational} concept denoting coroutining
computations in @Star{} -- they play a similar role as other
comparable concepts siuch as shift/reset, prompt/control and effects:
they are the basis of higher level features that programmers will more
typically use.

Some of these features include:
@itemize @bullet
@item
@code{task} expressions -- which denote computations that can be scheduled
independently of other actions,

@item
@code{generator} expressions which are used to define so-called yield-style generators,

@item
futures and async functions,

@item
message channels, and

@item
streams.
@end itemize
@end quotation

@subsection Fiber Type
@cindex type, fiber
@cindex fiber type

The @code{fiber} type is used to characterize the type of fiber
expressions. It takes the form:
@float BNF,fiberTypeFig
@caption{Fiber Type Syntax}
@display
@refer{Type}::+=@refer{FiberType}

@anchored{FiberType} ::= @code{fiber} @code{[} @refer{Type} @code{,} @refer{Type} @code{]}
@end display
@end float

The first type refers to values that can be sent to the fiber --
typically when it is resumed --; and the second type argument refers
to values that the fiber may suspend with (see below) -- i.e., may
return to the external computation.

@subsection Creating Fibers

A @code{fiber} is created using the escape function:
@code{_fiber}. Its main argument is a @emph{fiber function}.

@subsubsection Fiber functions

A fiber function is a function that denotes the computation that a fiber performs.
The general form of the type of a fiber function is:

@example
all r,s ~~ (fiber[r,s],r) => s
@end example

The @code{r} type indicates the type of the value given to the fiber
whenever it is resumed, and the @code{s} type indicates the type that
the fiber will return and what it will yield should it suspend.

Note the second occurrance of @code{r}: when a fiber is resumed for
the first time, the value given during the corresponding
@code{_resume} operation is modeled as the second argument to the
fiber function.

The @code{_fiber} function takes a fiber function and returns a new
fiber that will execute that function.

The type of @code{_fiber} is:

@example
_fiber: all r,s ~~ ((fiber[r,s],r)=>s)=>fiber[r,s]
@end example

I.e., it returns a new fiber.

@subsection Suspend using @code{_suspend}

The @code{_suspend} function is used when a fiber wishes to suspend
itself. There are two arguments to @code{_suspend}: the
identity of the fiber to be suspended and the value that determines the
@emph{suspension event}:

@example
_suspend: all r,s ~~ (fiber[r,s],s) => r
@end example

The returned value from a call to @code{_suspend} is the value used
when the fiber is resumed using @code{_resume}.

@subsection Resume using @code{_resume}

The @code{_resume} function is used when one wishes to resume another fiber.
There are two arguments to the @code{_resume}: the
identity of the fiber to be resumed, and a value that determines the
@emph{resumption event}:

@example
_resume: all r,s ~~ (fiber[r,s],r) => s
@end example

The second argument -- of type @code{r} -- is passed to the fiber
being resumed. Since that fiber must be in a suspended state, the
@code{_resume} function suspends the current fiber and resumes the
identified fiber.

The @code{_resume} function returns when either the fiber function of
the resumed fiber returns, or the resumed fiber suspends itself. In
both cases the value returned by @code{_resume} is the value returned
by the fiber function -- or the value passed in a call to
@code{_suspend}.

@subsection Retiring a fiber with @code{_retire}

The @code{_retire} function can be used by a fiber when it wished to
cease execution. This is an alternative method of exiting a fiber; the
normal way is simply return from the fiber function.

@example
_retire: all r,s ~~ (fiber[r,s],s) => ()
@end example

The @code{_retire} function does not actually return. When called, the
fiber it is running will be terminated and the corresponding
@code{_resume} call will receive the second argument from the
@code{_retire} call.

