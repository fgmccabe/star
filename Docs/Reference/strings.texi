@node Strings
@chapter Strings
@cindex strings
A string is a sequence of Unicode characters that denotes a fragment
of text. This chapter focuses on the built-in functions that are based
on the @code{string} type. 

@node The Structured String @code{ss} Type
@section The Structured String @code{ss} Type

@cindex ss type
The @code{ss} type -- as defined in @ref{ppTypeProg} -- denotes a
@emph{structured} string value where the structure may be used to
represent lines, sub sequences and so on.

@quotation
A primary purpose of the @code{ss} type is to permit simple formatting
policies to be applied after the generation of the displayed form of a
value.
@end quotation

@float Program,ppTypeProg
@caption{The Structured String @code{ss} type}
@example
ss ::=
     ss(string)
   | sc(integer)
   | ssSeq(list[ss])
@end example
@end float

The @code{ss} type is a useful way of representing complex string
values without requiring extraneous string concatenation. It is
especially useful when constructing strings that display, for example,
complex results.

@quotation Note
Normally, a @code{ss} value is flattened immediately prior to actual display or output. The @code{coercion} contract is implemented so that this flattening is simply a coercion to @code{string}:
@example
ssSeq([ss("my"),ssSeq([" "]),ss("string"),sc(0c\n)]) :: string
@end example
is equal to:
@example
"my string\n"
@end example
@end quotation

The intended semantics of the constructors are:
@table @code
@item ss
A literal string. For example, if the display of a value calls for an
opening parenthesis, then the term:
@example
ss("(")
@end example
may be used to denote that.
@item sc
A unicode code point.
@item ssSeq
The @code{ssSeq} constructor signals a subsequence in the display. Its
argument is a @code{list} of @code{ss} terms.
@end table

@node Implemented Contracts
@section Implemented Contracts
@cindex contract, implemented for string
@cindex string contracts

@node Sizeable for String
@subsection Sizeable for String

See @refer{sizeableContractProg} for a specification of the
@code{sizeable} contract.

The @code{isEmpty} function returns true if its argument is the empty
string. It's definition is equivalent to:
@example
isEmpty(X) => X=="";
@end example

The @code{size} function returns the number of Unicode characters in
the @code{string}.

@quotation Note
this is not generally the same as the number of bytes in the string.
@end quotation

@node Display for String
@subsection Display for String

@node Format for String
@subsection Format for String

The format specification for @code{string} values is given in the
regular expression:
@example
[LCR][0-9]+
@end example

where each control code is defined:
@table @code
@item L
The value is shown left-aligned in the text.

The decimal value immediately after the @code{L} character is the size
of the field.

If the displayed length of the number or string is less than that
permitted; then the value is shown left-aligned. If the length of the
value is greater than the size of the field then the text is truncated
-- i.e., the first N characters of the value are used.

@item R
The value is shown right-aligned in the text -- if the length of the
value is less than the size of the field.

If the length of the value is greater than the size of the field then
the text is truncated.

@item C
The value is shown centered in the field.
@end table

@node Equality for String
@subsection Equality for String

@node Comp for String
@subsection Comp for string

String comparison is based on a lexicographic comparison: one
@code{string} is less than another if its first character is less than
the first character of the second -- irrespective of the actual
lengths of the strings. Thus
@example
Abbbbbbb < B
@end example

because @code{A} is less than @code{B}. Characters are compared based
on their _code point_ within the Unicode encoding.


@c @node Stream for String
@c @subsection Stream for String


@c @node Index for String
@c @subsection Index for String

@node Concat for String
@subsection Concat for String

The implementation of @code{++} for strings is realized as string
concatenation.

@node Reversible for String
@subsection Reversible for String
The @code{reverse} function -- which is part of the @code{reversible} contract
-- is implemented in terms of the code points in the string.

@node Index for String
@subsection Index for String

The @code{_index} function returns a CodePoint from a @code{string}
value at a particular position.

One can use the the normal indexing notation to access CodePoints from
a @code{string} -- as with other kinds of indexable types:
@example
S[ix]
@end example
instead of
@example
_index(S,ix)
@end example

@node Slice for String
@subsection Slice for String

The @code{_slice} function extracts a substring from its first
argument. The first character of the extracted substring is identified
by the second argument; and the end point of the substring is
identified by the third argument. An expression of the form:
@example
_slice("this is a string",5,7)
@end example
returns the substring @code{"is"} -- corresponding to the two
characters located at positions 5 and 6 in the source string.

There is a special notation for this functionality: the slice notation
(see @refer{sliceFunction}. For example, if the variable @code{S} is
bound to the string @code{"this is a string"}, then the above
expression may be written:
@example
S[5:7]
@end example

@node Splice for String
@subsection Splice for String
the @code{_splice} function replaces a substring within its first
argument. For example, the expression:
@example
_splice("this is a string",5,7,"was")
@end example
has, as its value:
@example
"this was a string"
@end example

Like the slice notation, there is special syntax for this function --
when used as an action. The action:
@example
S[ix:tx] := U
@end example
is equivalent to the assignment:
@example
S := _splice(S,ix,cx,U)
@end example

@node Standard String Functions
@section Standard String Functions

In addition to certain specific string functions -- such as string
concatenation -- the @code{string} type implements the
@code{comp}arable contract which enables string values to be
compared. The @code{indexable} contract -- see
Program~@ref{indexedContract} -- is also implemented for strings,
which means that the normal @code{[]} notation may be used to access
the characters of a string.


@node @code{findstring} -- string search
@subsection @code{findstring} -- string search
[[findStringFunction]] @code{findstring} is used to determine the
(next) location of a search token within a @code{string}.
@example
findstring : (string,string,integer)=>integer;
@end example

@cindex string,search within
@cindex finding substrings
The @code{findstring} function searches a string for an occurrence of
another string. The first argument is the string to search, the second
is the search token, and the third is the integer offset where to
start the search.

For example, the result of the expression:
@example
findstring("the lazy dog jumped over the quick brown fox","the",5)
@end example
is @code{25}.

If the search token is not present then @code{findstring} returns -1;

@node @code{gensym} -- Generate Unique String
@subsection @code{gensym} -- Generate Unique String
@findex @code{gensym} function
@example
gensym : (string)=>string
@end example

The @code{gensym} function is used to generate unique strings that
have an arbitrarily high probability of being unique.

The generated string has a prefix consisting of the single argument, a
middle which is a unique string generated based on a globally unique
identifier identifying the current process and a counter.

The result is a string that has a high probability of being unique. It
is guaranteed to be unique within the current processor.

@node @code{spaces} -- Generate a string of spaces
@subsection @code{spaces} -- Generate a string of spaces
@cindex @code{spaces} standard function
@example
spaces : (integer)=>string
@end example

The @code{spaces} function generates a @code{string} containing only the space character. For example, the value of
@example
spaces(3)
@end example
is the string
@example
"   "
@end example

