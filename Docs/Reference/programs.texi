@node Programs
@chapter Programs

This chapter focuses on the organization of programs using functions,
types and other computational forms. Apart from program values
themselves, a key concept is the @refer{ThetaEnvironment}. This is
where many programs, types etc. are defined. @refer{ThetaEnvironment}s
are also first-class values -- showing up as @refer{AnonymousRecord}s.

@node Package Structure
@section Package Structure

A @refer{Package} consists of the identification of the package and a
set of @refer{Definition}s enclosed in braces. For example, the text:
@example
hello@{
  hello() => "hello".
@}
@end example

defines a @code{package} -- called @code{hello} -- that contains a
single function -- also called @code{hello}.

The body of a @refer{Package} may contain @refer{Definition}s which
may also include @refer{ImportStatement}s.

A @refer{Package} consists of all the elements that are defined in a package source:
@itemize
@item
The types defined with the source unit
@item
The functions and other variables defined
@end itemize

@float BNF,packageFig
@caption{Package Structure}
@display
@anchored{Package} ::= @refer{PackageName} @refer{ThetaEnvironment}

@anchored{PackageName} ::= @refer{Identifier} @refer{Terminator} @dots{} @code{'.'} @refer{Identifier}
@end display
@end float

@node Managing Exposed Elements of a Package
@subsection Managing Exposed Elements of a Package
By default, all the elements that are defined in a package are
@emph{not} exported as part of the package. Only those elements that
are marked @code{public} will be exported.@footnote{An element in a
package may be marked @code{private} -- which will also ensure that it
is not visible outside the package.}

@node Theta Environment
@section Theta Environment
@cindex theta environment
@cindex program declaration

A @refer{ThetaEnvironment} consists of a set of definitions of types,
programs and variables.

@float BNF,statementFig
@caption{Definition}
@display
@anchored{ThetaEnvironment} ::= @code{'@{'} @refer{Definition} @refer{Terminator} ... @refer{Terminator} @refer{Definition} @code{'@}'}

@anchored{Definition} ::= @refer{TypeDefinition}
  | @refer{Annotation}
  | @refer{TypeAnnotation}
  | @refer{VariableDefinition}
  | @refer{FunctionDefinition}
  | @refer{ContractDefinition}
  | @refer{ContractImplementation}
  | @refer{OpenStatement}
  | @refer{ImportStatement}
@end display
@end float

Many of the definitions in a @refer{ThetaEnvironment} define entities
that may be recursive and mutually recursive.

@node Type Annotations
@section Type Annotations
@cindex type annotation
In most cases it is not necessary to explicitly declare the type of a
variable -- or any expression. However, it is good practice to declare
explicitly the types of programs; especially within
@var{ThetaEnvironment}s, and it is required if the type of the
variable is intended to be generic.

@float BNF,typeAnnotationFig
@caption{Type Annotation}
@display
@anchored{TypeAnnotation} ::= @refer{Variable} @code{':'} @refer{Type}
@end display
@end float

For example, a generic function @code{consLength} that takes a
@code{cons} list and returns an integer would have the declaration:
@example
consLength:all t ~~ (cons[t])=>integer
@end example

@node Type Definitions
@section Type Definitions
@cindex type definition

There are several ways that a type may be defined in a scope --
i.e., a @refer{ThetaEnvironment}.

@float BNF,typeDefinitionFig
@caption{Type Definition}
@display
@anchored{TypeDefinition} ::= @refer{AlgebraicTypeDefinition}
  | @refer{TypeExistsStmt}
  | @refer{TypeAliasStmt}
@end display
@end float

@node Algebraic Type Definition
@subsection Algebraic Type Definition

An algebraic type definition is a statement that defines a type in
terms of different constructors for the type.

@float BNF,algebraicTypeDefFig
@caption{Algebraic Type Definition}
@display
@anchored{AlgebraicTypeDefinition} ::= @refer{Type} @code{'::='} @refer{AlgebraicConstructor} @code{'|'} @dots{}  @code{'|'} @refer{AlgebraicConstructor}

@anchored{AlgebraicConstructor} ::= @refer{EnumeratedSymbol}
  | @refer{PositionalConstructor}
  | @refer{RecordConstructor}

@anchored{PositionalConstructor} ::= @refer{Identifier} @code{'('} @refer{Type} @code{','}  @dots{}  @code{','} @refer{Type} @code{')'}

@anchored{RecordConstructor} ::= @refer{Identifier} @code{'@{'} @refer{Annotation} @refer{Terminator} @dots{}  @refer{Terminator} @refer{Annotation} @code{'@}'}
@end display
@end float

An algebraic type definition is a statement that introduces a new
type; it also defines the possible values associated with the type.

As illustrated in @refer{algebraicTypeDefFig}, an algebraic type
definition introduces the new type and defines one or more
@refer{AlgebraicConstructor}s -- separated by the @code{'|'} operator.

An @var{AlgebraicConstructor} is a specification of a value of a type;
i.e., constructors @emph{paint a picture} of the shape of potential
values of the type.

There are three kinds of Constructor: enumerated symbols, term
constructor constructors and labeled record constructors.

As elaborated below, each @emph{arm} of an algebraic type definition
defines a value or set of values that belong to the type. There is a
slightly more formal way of expressing this: an algebraic type
definition induces a set of free functions.

@cindex constructor,bijection
Free functions are technically bijections -- they are one-to-one --
i.e., they have inverses. In programming languages, free functions are
used as data structuring tools; but mathematically they are functions.

For example, the type definition:
@example
person ::= noone | someone(string,integer)
@end example
induces the constructor function for @code{someone}:
@example
someone : (string,integer) <=> person;
@end example
The enumerated symbol has a simpler type:
@example
noone : person;
@end example

The complete set of constructor functions introduced within an
algebraic type definition is complete: i.e., they define all the
possible values of the type.

@quotation NOTE
A given label, whether it is used as an @refer{EnumeratedSymbol}, the
label of a @refer{PositionalConstructor} or a
@refer{RecordConstructor} can be defined only once. I.e., it is not
permitted to @emph{share} constructor labels across different
types. Nor may such a label be used as the name of a variable in the
same scope.
@end quotation

@quotation NOTE
An @refer{AlgebraicTypeDefinition} statement for a generic type (i.e.,
a type with type parameters) may omit the explicit quantifiers. I.e., instead of

@example
all e ~~ cons[e] ::= nil | cons(e,cons[e])
@end example
it is permissable to write:
@example
cons[e] ::= nil | cons(e,cons[e])
@end example

The reason is that the quantifiers in such a definition may be
reliably inferred without being explicitly identified.
@end quotation

@node Type Exists Statement
@subsection Type Exists Statement

@float BNF,typeExistsFig
@caption{Type Exists Statement}
@display
@anchored{TypeExistsStmt} ::= [@refer{UniversalQuantifier}] @refer{Type} @code{'<~'} @refer{RecordType}
@end display
@end float

@quotation Note
The explicit use of @refer{TypeExistsStmt}s is rare. However, they are
automatically constructed in some situations.
@end quotation

The @refer{TypeExistsStmt} declares the existence of a type --
together with its associated algebraic interface (see
@refer{algebraicInterface}). It does so without specifying any constructors
for the type.

@node Type Alias Statement
@subsection Type Alias Statement

A type alias is a statement that introduces a new type name by mapping
it to an existing type expression.

@float BNF,typeAliasFig
@caption{Type Alias Statement}
@display
@anchored{TypeAliasStmt} ::= [@refer{UniversalQuantifier}] @refer{Type} @code{'~>'} @refer{Type}
@end display
@end float

Type aliases may be parameterized -- in the sense that the type
being defined may be parameterized and that the definiens may also be
parameterized.

Note that the any type variables on the right hand side of a
@refer{TypeAliasStmt} must also have been mentioned on the left hand
side.

For example, the statement:
@example
time ~> integer
@end example

declares a new type that is an alias for @code{time} -- i.e., that it
is actually equivalent to the @code{integer} type.

@quotation TIP
Type aliases allow the programmer to signal that a particular type is
being used in a special way. In addition, during program development,
type aliases are useful to provide markers for types that will be
elaborated further with a regular algebraic definition.
@end quotation

Type aliases have no run-time presence. In fact, they may be viewed as
a simple form of type macro -- type expressions that match the left
hand side are replaced by the type expression on the right hand
side. However, type aliases have some definite constraints: a type
alias may not be, directly or indirectly, recursive.

@quotation Note
A second role for @refer{TypeAliasStmt}s is to signal the fulfillment
of an @refer{ExistentialType} requirement.
@end quotation

@node Variable Definition
@section Variable Definition
@cindex variable definition
@cindex declaration, variable

A @refer{VariableDefinition} is a @refer{Definition} or an
@refer{Action} that explicitly denotes the declaration of a
variable. @refer{VariableDefinition}s may appear in
@refer{ThetaEnvironment}s and @refer{Action}s.

@float BNF,variableDeclararionFig
@caption{Variable Definition}
@display
@anchored{VariableDefinition}::=@refer{Variable} @code{'='} @refer{Expression}
 | @refer{Variable} @code{':='} @refer{Expression}
@end display
@end float

@c The left-hand side of a single assignment declaration may be a
@c @refer{Pattern}. This permits multiple variables to be declared in a
@c single statement. This, in turn, facilitates the handling of functions
@c that return more than one value.

@c For example, assuming that @code{split} partitions a @code{list} into a front half and a back half, returning both in a 2-tuple, the declaration:
@c @example
@c (L,R) = split(Lst)
@c @end example
@c will bind the variables @code{L} and @code{R} to the front and back
@c halves respectively.

A re-assignable variable is declared using the form:
@example
@refer{Variable} := @refer{Expression}
@end example

@quotation Note
Unlike single assignment variable declarations, the re-assignable
variable declaration is restricted to defining individual variables.
@end quotation

@quotation Note
It is not possible to declare a variable without also giving it a
value.
@end quotation

@node Variable Scope
@subsection Variable Scope
@cindex variable, scope
@cindex scope of variable
@anchor{scopeExtension}

In general, the scope of a variable extends to include the entire
context in which it is declared. In the case of a variable declaration
in a @refer{ThetaEnvironment}, the scope includes the entire
@refer{ThetaEnvironment} and any associated bound element. In the case
of an @refer{BlockAction} the scope extends from the action following
the declaration through to the end of the enclosing
@refer{BlockAction}.

The precise rules for the scope of a variable are slightly complex but
result in a natural interpretation for the scopes of variables:

@itemize
@item
Variables that are defined in patterns are limited to the element that
is naturally associated with that pattern:
@itemize
@item
Variables declared in the head pattern of an equation or other rule
are scoped to that equation or rule.
@item
If a pattern governs a conditional expression or statement, variables
declared in the pattern extend to the then part of the conditional but
not to any else part.
@item
No variables declared in a negated condition escape that condition
@item
If a pattern governs a @code{for} loop, or a @code{while} loop, then
variables declared in the pattern extend to the body of the loop. (See
@refer{ForAction} and @refer{WhileAction}).
@end itemize

@item
Variables that are defined in a @refer{Condition} are bound by the
scope of the @refer{Condition}.

@item
Variables that are declared in a @refer{ThetaEnvironment} extend to
all the definitions in the @refer{ThetaEnvironment} and to any bound
expression or action.
@quotation Note
In particular, variables defined within a @refer{ThetaEnvironment} may
be mutually recursive.
@quotation Note
Note that it is @emph{not} permissible for a non-program variable to
be involved in a mutually recursive group of variables. I.e., if a
group of mutually recursive of variables occurs in a
@refer{ThetaEnvironment} then all the variables must be bound to
functions or other program elements.
@end quotation
@end quotation
@item
Variables that are imported into a package body from another package
extend to the entire body of the importing package.
@item
Variables that are declared in an @refer{BlockAction} extend from the
end of their @refer{VariableDefinition} to the end of the block that they
are defined in. The scope of a variable does not include its
@refer{VariableDefinition}.

It is not permitted for a variable to be declared more than once in a
given action block.
@end itemize

@node Scope Hiding
@subsubsection Scope Hiding
@cindex scope, hiding
@cindex variable, hiding

It is not permitted to define a variable with the same name as another
variable that is already in scope. This applies to variables declared
in patterns as well as variables declared in
@refer{ThetaEnvironment}s.

For example, in the function:
@example
hider(X) => let@{
  X = 1
@} in X
@end example
the inner declaration of @code{X} effectively amounts to an equality
test that the the @code{X} that occurs in the head of the function is
equal to @code{1}.

@node Re-assignable Variables
@subsection Re-assignable Variables
@cindex variable, re-assignable

Re-assignable variables serve two primary roles within programs: to
hold and represent state and to facilitate several classes of
algorithms that rely on the manipulation of temporary state in order
to compute a result.

In order to facilitate program combinations -- including procedural
abstraction involving re-assignable variables -- there are additional
differences between re-assignable variables and single-assignment
variables.

@findex @code{ref} type
In particular, re-assignable variables have a distinguished type
compared to single-valued variables -- they must be of @refer{ReferenceType}.

In addition to the different type, there are two operators that are
associated with re-assignable variables: @code{ref} and @code{!}
(pronounced @emph{shriek}). The former is used in situations where a
variable's name is intended to mean the variable itself -- rather than
its value. The latter is the converse: where an expression denotes a
reference value that must be `dereferenced'.

@node Functions and Equations
@section Functions and Equations
@cindex function

A function is a program for computing values; organized as a set of equations.

@float BNF,functionFig
@caption{Functions}
@display
@anchored{FunctionDefinition} ::= @refer{Equation} ... @refer{Equation}

@anchored{Equation} ::= @refer{RuleHead} [@refer{GuardCondition}]] @code{'=>'} @refer{Expression}
  | @refer{DefltEquation}

@anchored{DefltEquation} ::= @refer{RuleHead} @code{'default'} @code{'=>'} @refer{Expression}

@anchored{RuleHead} ::= @refer{Identifier}@code{'('}@refer{Pattern}@code{','}...@code{','}@refer{Pattern}@code{')'}

@anchored{GuardCondition} ::= @code{'where'} @refer{Condition}
@end display
@end float


@quotation Note
Functions and other program values are first class values; as a result
they may be passed as arguments to other functions as well as being
assigned as attributes of records.
@end quotation

Functions can be defined in a @refer{ThetaEnvironment} -- which case
they must be associated with an explicit or implicit
@refer{TypeAnnotation} -- or they may be @emph{anonymous} -- i.e.,
appear as a function literal in an expression.

@node Equations
@subsection Equations
An equation is a rule for deciding how to rewrite an expression into a
simpler expression. Each equation consists of a @refer{TuplePattern}
that is used to match the call to the function and a replacement
expression. The left hand side of the function may also have a guard
associated with it, this guard may use variables introduced in the
pattern.

@quotation Note
An equation is said to apply iff the patterns in the left hand side of
the equation (including any @code{where} clauses) all match the
corresponding actual arguments to the function application.
@end quotation

@cindex theta environment
Functions are defined in the context of a @refer{ThetaEnvironment} --
for example, in the body of a @code{let} expression (see
@refer{LetExpression}), or at the top-level of a @code{package}.

It is not necessary for the equations that define a function to be
contiguous within a @refer{ThetaEnvironment}. However, all the
equations for a function must be present in the @emph{same}
@refer{ThetaEnvironment}.

@subsubsection Type of Functions
The type safety of a function is addressed in stages. In the first
place, we give the rules for individual equations:

@display
@emph{E} |= @code{A}:@code{AT} /\ @emph{E'} |= @code{R}:@code{RT} => @emph{E} |= @code{A=>R} : @code{AT=>RT}
@end display

This states that the type of an equation is a function type: from the
type of the argument pattern to the type of the result expression.

If the equation has a @refer{GuardCondition}, that that condition must
be type satisfiable:

@display
@emph{E} |= @emph{A}:@emph{AT} /\ @emph{E'} |= sat(C) /\ @emph{E''} |= @emph{R}:@emph{RT} => @emph{E} |= @code{A=>R} : @code{AT=>RT}
@end display

where @emph{E'} is the original environment @emph{E} extended with the
variable definitions found in the pattern @code{A} and @emph{E''} is
@emph{E'} extended with the variables found in the condition @code{C}.

In fact this rule slightly understates the type safety
requirement. For any statement in a theta environment we also have:

@node Evaluation Order of Equations
@subsection Evaluation Order of Equations
@cindex equations,evaluation order

Using multiple equations to define a function permits a case-base
approach to function design -- each equation relates to a single case
in the function. When such a function is @emph{applied} to actual
arguments then only one of the equations in the definition may apply.

Equations are applied in the order that they are written -- apart from
any equation that is marked @code{default}. If two equations overlap
in their patterns then the first equation to apply is the one used.

@node Default Equations
@subsection Default Equations
@cindex default equation@code{default} equation
@cindex functions,default@code{default} equation

It is permitted to assign one of the equations in a function
definition to be the @code{default} equation. An equation marked as
@code{default} is guaranteed @emph{not} to be used if any of the
non-default equations apply. Thus, a @code{default} equation may be
used to capture any remaining cases not covered by other equations.

@cindex patterns,variable pattern
A @code{default} equation may not have a @code{where} clause associated with
it, and furthermore, the patterns in the left hand-side should be
generally be variable patterns (see @refer{patternVariables}).

@quotation Note
In particular, it @emph{should} be guaranteed that a @code{default}
equation cannot fail to apply.
@end quotation

@node Evaluation Order of Arguments
@subsection Evaluation Order of Arguments
@cindex function application,evaluation order

There is @emph{no} guarantee as to the order of evaluation of
arguments to a function application. In fact, there is no guarantee
that a given expression will, in fact, be evaluated.

@quotation Note
The programmer should also @emph{not} assume that argument expressions
will @emph{not} be evaluated!
@end quotation

In general, the programmer should make the fewest possible assumptions
about order of evaluation.

@node Pattern Coverage
@subsection Pattern Coverage
@anchored{patternCoverage}
@cindex patterns,coverage of

Any given equation in a function definition need not completely cover
the possible arguments to the function. For example, in
@example
F : (integer)=>integer.
F(0) => 1.
F(X) => X*F(X-1).
@end example

the first equation only applies if the actual argument is the number
@code{0}; which is certainly not all the @code{integer}s.

The set of equations that define a function also define a coverage of
the potential values of the actual arguments. In general, the coverage
of a set of equations is smaller than the possible values as
determined by the type of the function.

If a function is @emph{partial} -- i.e., if the coverage implied by
the patterns of the function's equations is not complete with respect
to the types -- then the compiler @emph{may} issue an incomplete
coverage warning. Furthermore, if a function fails to apply at
run-time then this is a @emph{fatal error} and evaluation of the
program will halt.

@quotation Note
The programmer is advised to make functions @emph{total} by supplying
an appropriate @code{default} equation. In the case of the
@code{F}actorial function above, we can make the @code{default} case
explicit as is shown in @refer{factorialFunProg}.
@end quotation

@float Program, factorialFunProg
@caption{Factorial Function}
@example
fact : (integer)=>integer.
fact(X) where X>0 => X*fact(X-1).
fact(X) default => 1
@end example
@end float

@node Anonymous Function
@subsection Anonymous Function
@cindex anonymous function
@cindex expressions,function

Anonymous functions -- or lambda expressions -- are expressions of the form:
@example
(X) => X+Y
@end example
Lambda expressions may appear anywhere a function value is permitted.

@float BNF,anonymousFunctionFig
@caption{Anonymous Function}
@display
@anchored{LambdaExpression} ::= @refer{TuplePattern} @code{'=>'} @refer{Expression}
@end display
@end float

@quotation Note
If it desired to have a single-argument anonymous function that takes
a tuple pattern then use double parentheses:
@example
((X,Y)) => X+Y
@end example
@end quotation

For example, a lambda expression to add 1 to its single argument would
be:
@example
(X) => X+1
@end example

Lambda expressions are often used in function-valued functions. For example in:
@example
addX:(integer)=>((integer)=>integer).
addX(X) => ((Y) => X+Y)
@end example

the value returned by @code{addX} is another function -- a single
argument function that adds a fixed number to its argument.

@quotation Note
Note the extra set of parentheses around both the embedded function type and around the returned function value.
@end quotation

@quotation Note
Lambda expressions functions may reference free variables.
@end quotation


@node Contract Definition
@section Contract Definition
@cindex type,contracts

A contract definition is a statement that defines the functions and
action procedures associated with a contract. As can be seen in
@var{contractFig}, a contract statement associates a contract name --
together with a set of type variables -- with a set of
@var{TypeAnnotation}s that define the elements of the contract. Within
the @var{Contract} statement, a @var{TypeAnnotation} may varer to the
type(s) in the contract head.

@float BNF,contractFig
@caption{Contract Definition}
@display
@anchored{ContractDefinition} ::= @code{'contract'} @var{ContractSpec} @code{'::='} @var{RecordType}

@anchored{ContractSpec} ::= [ @refer{UniversalQuantifier} ] @refer{Identifier} @code{'['} @refer{TypeArgSpec} [@code{'->>'} @refer{TypeArgSpec}] @code{']'}

@anchored{TypeArgSpec} ::= @refer{TypeVariable} @code{','} @dots{} @code{','} @refer{TypeVariable}
@end display
@end float

For example, the contract that underlies @refer{TypeCoercion} expressions is:
@example
contract all s,t ~~ coercion[s,t] <~ @{ coerce:(s)=>t @}
@end example

@cindex default values,contract
A contract statement may also include @emph{defaults} for the names
defined in the contract. If a given contract implementation does not
give an implementation for a name that has a default associated for
it, then the default is used.

@quotation NOTE
Default specifications may use variables that are in scope at the
point of the contract specification.@footnote{This is generally not
the same scope as where a contract implementation is given.}
@end quotation

@quotation TIP
The @refer{UniversalQuantifier} may be omitted from
@refer{ContractDefinition}s -- @emph{except} for the case that a
higher-kinded type is being quantified.
@end quotation

@quotation TIP
An important usage pattern for contracts is to represent
@emph{abstract types}. An abstract type is one defined by its contract
rather than one defined by an explicit type definition.

For example, the @code{arith} contract in
@refer{arithContractProg} defines a set of arithmetic
functions. However, it can also be interpreted as a definition of an
abstract type of arithmetic values -- the values that implement the
@code{arith} contract.
@end quotation

@quotation Under the covers
If the contract statement looks like a type definition, that is
because it @emph{is} a kind of type definition. Specifically, it
defines a dictionary of sorts -- of the elements defined within the
contract.
@end quotation

@node Functional Dependencies
@subsection Functional Dependencies
@anchor{ContractFunctionalDependency}
@cindex type,contracts!functional dependencies
@cindex functional dependencies in contracts

For certain forms of contract, it may be that the type parameters may
not all be independent of each other. For example, consider the
standard @code{stream} contract (defined in
@refer{streamContractProg}) which reads:
@example
public contract all S,E ~~ stream[S ->> E] ::= @{
  _eof:(S) => boolean.
  _hdtl:(S) => option[(E,S)].
  _back:(S) => option[(S,E)].
@}
@end example

The intention of the @code{stream} contract is to support processing
collections of elements in a sequential manner. The type parameter
@code{S} identifies the collection to be iterated over; and the
type parameter @code{E} identifies the type of each element.

However, the collection's type uniquely determines the type of each
element: the element type is not independent of the collection. For
example, to iterate over a @code{cons[t]}, each element will be of
type @code{t}; and to iterate over a @code{string} each element will
be a @code{integer} even though the @code{string} type does not
mention @code{integer}.

@quotation NOTE
Each @code{integer} represents a unicode code point in the
@code{string}.
@end quotation

Using a @code{->>} clause in a @code{contract} -- and in
corresponding contract @code{implementation} statements -- allows the
contract designer to signal this relationship.

@node Contract Implementation
@section Contract Implementation
@cindex type,contracts!implementation

A contract implementation is a specification of how a contract is to be
implemented for a specific type combination.

@float BNF,contractImplementationFig
@caption{Contract Implementation Statement}
@display
@anchored{ContractImplementation} ::= @code{'implementation'}
@refer{ContractSpec} @code{'=>'} @refer{Expression}
@end display
@end float

The @refer{Type}s mentioned in @refer{ContractSpec} must be 
@refer{NominalType}s.

@quotation NOTE
In particular, it is not permitted to define an
@code{implementation} of a contract for @var{FunctionType}s.

It is permissible, however, to implement @var{Contract}s for
@var{TupleType}s.
@end quotation

The body of a contract @code{implementation} must be an expression
that gives a definition for each of the elements of the
@code{contract} specification.

@quotation NOTE
A @code{contract} implementation often takes the form of a regular
@var{AnonymousRecord} or an anonymous @var{ThetaRecord}.
@end quotation

Usually, the implementation of a @code{contract} is fairly
straightforward. Program~@ref{consSizeProg}, for example, gives the
implementation of the standard @code{sizeable} contract for the
@code{cons} type.

@float Program,consSizeProg
@caption{Implementation of @code{sizeable} for @code{cons} values}
@example
implementation all e ~~ sizeable[cons[e]] => @{
  size(nil) => 0
  size(cons(_,T)) => size(T)+1

  isEmpty(nil) => true.
  isEmpty(_) default  => false
@}
@end example
@end float

@node Implementing Contracts with Functional Dependencies
@subsection Implementing Contracts with Functional Dependencies
@anchor{implContractFunctionalDependency}
@cindex type,contracts!functional dependencies

Implementing a contract which has a functional dependency is exactly
analogous to implementing a regular contract. The dependent type(s)
must be identified in the @code{implementation} statement. For
example, the initial part of the implementation of the @code{stream}
contract over @code{cons} lists:
@example
implementation all e ~~ stream[cons[e]->>e] => @{
@end example

Note that this @code{implementation} implies that a @code{stream}
over a @code{cons} list connects the element type of the @code{cons[t]} type to the elements of the @code{stream} contract.


@node Recursive Contract Implementations
@subsection Recursive Contract Implementations

More complex contract implementations may require the use of auxiliary
function definitions; and hence may involve the use of @code{let}
expressions. This is particularly the case when implementing a
contract that itself depends on other contracts being implemented.

For example, this is an implementation of the @code{comp}
contract for @code{cons} values:

@float Program,consCompProg
@caption{Implementation of @code{comp} for @code{cons}}
@example
public implementation all x ~~ comp[x],equality[x] |: comp[cons[x]] => let@{
  consLess(nil,_) => true.
  consLess(cons(H1,T1),cons(H2,T2)) where H1<H2 => true.
  consLess(cons(H1,T1),cons(H2,T2)) where H1==H2 => consLess(T1,T2).
  consLess(_,_) default => false.

  consGe(L1,L2) => ! consLess(L2,L1).
@} in @{. (<) = consLess. (>=) = consGe .@}
@end example
@end float

@quotation NOTE
The implementation of @code{comp} for @code{cons} types is based
on a requirement that the individual elements of lists must also be
compared. Hence the clause

@example
comp[x],equality[x] |: comp[cons[x]]
@end example

in the head of the contract @code{implementation} statement. The
primary job of the @code{consLess} function is to show how @code{cons}
values may be compared. However, it depends on @code{<} being defined
for the element of the @code{cons} list.
@end quotation

Our definition of
inequality for @code{cons} values assumes that:
@itemize
@item
@code{nil} lists are less than any non-empty list;
@item
one non-empty list is less than another if the first element is less
than the first element of the second; and finally
@item
if the first elements of the two lists are identical then we consider
the tails of each list.
@end itemize

@quotation TIP
The curious reader may wonder why we introduce a new name
@code{consLess} in order to define @code{<} (and, by extension
@code{consGe} for @code{>=}). The reason for this has to do with
limitations on type inference in the context of recursive programs:
within the equations that define a function, any @emph{use} of the
function symbol must represent a recursive use.
@end quotation

For example, in the equation:
@example
consLess(cons(H1,T1),cons(H2,T2)) where H1<H2 => true.
@end example
we are relying on a definition of inequality for the elements of the @code{cons} list -- whilst we are defining inequality for @code{cons} lists themselves.

If we had tried to define @code{<} directly, using, for example:
@example
cons(H1,T1)<cons(H2,T2) where H1<H2 => true.
@end example
then we would have two occurrences of @code{<} which really
represent different functions.

Normally, outside of the definition of the function, it is permitted
to allow a given function to be used in different uses -- always
assuming that the types are consistent. However, within the definition
of a function, all occurrences of the function symbol must varer to
the same function.

In the case of the @code{<} equation above, the type inference system
would not be able to distinguish a recursive call from a call to a
different overloaded function of the same name; and would assume that
both uses of @code{<} are intended to be part of the same
definition. This, in turn, would result in a type error being
generated.

In summary, when defining an overloaded function like @code{<}, we
often have to introduce an auxiliary function to @emph{carry} the
recursion.

By using the @code{let} expression and the auxilliary @code{consLess}
function we are able to separately define inequality for @code{cons}
lists while depending on the implementation of @code{<} for their
elements.

@node Importing Packages
@section Importing Packages
@cindex import package
@cindex package,import

The @refer{ImportStatement} is used to signal that this package
depends on other packages.@footnote{The @code{import} statement is
only permitted at the top-level of a package.}

A package may use another package by importing it. The
@refer{ImportStatement} denotes a requirement that the types, programs
and other elements of the imported package are made available to the
importing package.

The @refer{ImportStatement} is used to denote that the exported
elements of another package should be made available within this package. There
are two variants of the @refer{ImportStatement}: the open import and
the named import.

@float BNF,importStatementFig
@caption{Import Package Statement}
@display
@anchored{ImportStatement} ::= @refer{OpenImportStatement}
  | @refer{NamedImportStatement}

@anchored{OpenImportStatement} ::= [@code{'public'}] @code{'import'} @refer{PackageName}

@anchored{NamedImportStatement} ::= @refer{Variable} @code{'import'} @refer{PackageName}
@end display
@end float

@node The open @code{import} Statement
@subsection The open import statement
@anchor{openImportStatement}
@cindex import,open
@cindex open import
@findex @code{import}

An @refer{ImportStatement} of the form:
@example
import @var{Pkg}
@end example
imports all the definitions that are located with the @var{Pkg} and
declares them as being at the @emph{same} scope level as other
@refer{Definition}s within the package.

This has two primary implications: all the exported definitions may be
used without qualification as though they had been defined
locally. However, if a given name is declared twice -- even if in two
separate packages -- then the compiler will show an error.

In addition to the regular functions and types defined in the imported
package, any contracts, and contract implementations that are defined
in the imported package are also in scope.

If the @refer{OpenImportStatement} is prefixed by a @code{public} keyword then, in addition to importing the definitions, they are also implicitly @emph{re-exported} by thhis package.

@quotation Note
By using @code{public} package imports it is possible to construct the
equivalent of a library -- consisting of multiple packages internally
but viewed as a single package externally.
@end quotation

@node Named Import
@subsection Named Import
@anchor{namedImport}
@cindex import,named

An @refer{ImportStatement} of the form:
@example
P import Pkg
@end example

is a @emph{named import} -- so-called because it establishes a
@refer{Variable} whose value is the contents of the imported package
and whose name is used to access the imported package.

Definitions that are imported as a named import are not immediately
defined to be in scope. Instead, they must be accessed via the package
variable -- using @refer{RecordAccess} expressions.

For example, if @code{Pkg} exports a type @code{person} and a function
@code{someone}, then to use the type and function they are referenced from
the @code{P} variable -- much like accessing @refer{Record} fields:
@example
Joe : P.person.
Joe = P.someone("Joe")
@end example

Using named imports in this way is a convenient way to establish
different name spaces. Since all the definitions within the package
must be accessed via the @refer{RecordAccess} operator, the name used
to import the package effectively becomes a local name space for that
package and will not clash with neither other imported packages nor
locally defined functions and types.

@node Open Statement
@section Open Statement
@anchor{openStatement}
@cindex open statement
@cindex opening a record
@cindex record,opening

The @refer{OpenStatement} takes a @refer{Record}-valued expression and
opens its contents in a @refer{ThetaEnvironment}. It is analogous to
an @code{import} of the record.

@float BNF,openStatementFig
@caption{Open Statement}
@display
@anchored{OpenStatement} ::= @code{'open'} @refer{Expression}
@end display
@end float

Any fields and types that are declared within the @refer{Expression}'s
type become defined within the enclosing @refer{ThetaEnvironment}.

@quotation Note
The existing scope rules continue to apply; in particular, if there is
a name that is duplicated already in scope then a duplicate definition
error will be signaled.
@end quotation

Normal type inference is not able to infer anything about the type of
the @code{open}ed @refer{Expression}. Hence, this statement requires
that the type of the expression is already known.

For example, given the definition:
@example
R : @{ type elem. op:(elem,elem)=>elem. zero:elem @}
R = @{
  integer ~> elem.
  op(X,Y) => X+Y.
  zero = 0.
@}
@end example

then we can @code{open} @code{R} in a @refer{LetExpression}:
@example
let@{
  open R.
  Z : elem.
  Z = zero.
@} in Z
@end example

@quotation Note
Although the @code{open} statement makes available the types and
fields embedded in a record; existential abstraction still applies. In
particular, in this case the fact that the @code{elem} type is
manifest as @code{integer} within the record expression @code{R} is
hidden.

The @code{elem} type (and the @code{zero} and @code{op} fields) are
available within the @code{let}; but no information about what
@code{elem} actually is is available.
@end quotation



