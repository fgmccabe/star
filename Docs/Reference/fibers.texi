@chapter Fibers
@node Fibers

A fiber is a computation whose execution can be managed. Fibers can be
created, suspended and resumed. Fibers also have identity which allows
correlation of fibers when managing sets of fibers.

@quotation Note
Fibers represent the @emph{foundational} concept denoting concurrent
computations in @Star{} -- they play a similar role as other
comparable concepts siuch as shift/reset, prompt/control and effects:
they are the basis of higher level concurrency features that
programmers will more typically use.

Some of these features include:
@itemize @bullet
@item
@code{task} expressions -- which denote computations that can be scheduled
independently of other actions,

@item
@code{generator} expressions which are used to define so-called yield-style generators,

@item
futures and async functions,

@item
message channels, and

@item
streams.
@end itemize
@end quotation

@section Fiber Type
@cindex type, fiber
@cindex fiber type

The @code{fiber} type is used to characterize the type of fiber expressions. It takes the form:
@float BNF,fiberTypeFig
@caption{Fiber Type Syntax}
@display
@refer{Type}::+=@refer{FiberType}

@anchored{FiberType} ::= @code{fiber} @code{[} @refer{Type} @code{,} @refer{Type} @code{]}
@end display
@end float

The second type argument refers to values that the fiber may suspend
with (see below) and the first type argument refers to values that the
fiber may be resumed with.

@section Creating Fibers

A @code{fiber} is created using one of two escape functions:
@code{_new_fiber} or @code{_spawn}. They both take a so-called
@emph{fiber function} as argument.

@subsection Fiber functions

A fiber function is a function that is executed in a separate
fiber. The type of a fiber function has a strong effect on the fiber:
it specifies the legal ways that the fiber can be suspended, resumed
and what values it may return. In addition, a fiber function takes a
@code{_fiber} argument -- the identity of the fiber that the fiber
function is running on.

The general form of the type of a fiber function is:

@example
all r,s ~~ (fiber[r,s]) => s
@end example

The @code{r} type indicates the type of the value given to the fiber
whenever it is resumed, and the @code{s} type indicates the type that
the fiber will return and what it will yield should it suspend.

@subsection Using @code{_spawn}

The @code{_spawn} function takes a fiber function and enters that
function on a new fiber.

The type of @code{_spawn} is:

@example
_spawn: all r,s ~~ ((fiber[r,s])=>s)=>s
@end example

I.e., it returns whatever its fiber function returns.

@subsection Suspend using @code{_suspend}

The @code{_suspend} function is used when a fiber wishes to suspend
itself. There are two arguments to @code{_suspend}: the
identity of the fiber to be suspended and the value that determines the
@emph{suspension event}:

@example
_suspend: all r,s ~~ (fiber[r,s],s) => r
@end example

The returned value from a call to @code{_suspend} is the value used
when the fiber is resumed using @code{_resume}.

@subsection Resume using @code{_resume}

The @code{_resume} function is used when one wishes to resume another fiber.
There are two arguments to the @code{_resume}: the
identity of the fiber to be resumed, and a value that determines the
@emph{resumption event}:

@example
_resume: all r,s ~~ (fiber[r,s],r) => s
@end example

The second argument -- of type @code{r} -- is passed to the fiber
being resumed. Since that fiber must be in a suspended state, the
@code{_resume} function suspends the current fiber and resumes the
identified fiber.

The @code{_resume} function returns when either the fiber function of
the resumed fiber returns, or the resumed fiber suspends itself. In
both cases the value returned by @code{_resume} is the value returned
by the fiber function -- or the value passed in a call to
@code{_suspend}.

@subsection Retiring a fiber with @code{_retire}

The @code{_retire} function can be used by a fiber when it wished to
cease execution. This is an alternative method of exiting a fiber; the
normal way is simply return from the fiber function.

@example
_retire: all r,s ~~ (fiber[r,s],s) => ()
@end example

The @code{_retire} function does not actually return. When called, the
fiber it is running will be terminated and the corresponding
@code{_resume} call will receive the second argument from the
@code{_retire} call.

