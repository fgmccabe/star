@node Introduction
@chapter Introduction to Star

@menu
* About this reference::
@end menu

@noindent
@Star{} is a high-level symbolic programming language oriented to
general purpose programming.

@Star{} is a @emph{functional-first} language -- in that functions and
other programs are first class values. While there is support for
updatable variables and structures; the emphasis is on functional
programming concepts and in order to get the best value from
programming in @Star{}, such side-effecting features should be used
sparingly.

@Star{} is strongly, statically, typed. What this means is that
all programs and all values have a single type that is determined by a
combination of type inference and explicit type annotations.

While this can increase the initial burden of the programmer;
we believe that correctness of programs is a long-term productivity
gain -- especially for large programs developed by teams of
programmers.

The type language is very rich; including polymorphic types, type
constraints and higher-rank and higher kinded types. Furthermore,
except in cases where higher-ranked types are required, type inference
is used extensively to reduce the burden of type bureaucracy on
programmers.

@node About this reference
@section About this Reference

@menu
* Metagrammar::
* Typographical Conventions::
@end menu

@noindent
This reference is the language definition of the @Star{}
language. It is intended to be thorough and as precise as possible in
the features discussed. However, where appropriate, we give simple
examples as illustrative background to the specification itself.

@node Metagrammar
@subsection Metagrammar

@noindent
Throughout this document we introduce many syntactic features of the
language. We use @Star{}'s own grammar notation to do this; as
described in @ref{Grammar Rules}.

@node Typographical Conventions
@subsection Typographical Conventions
@cindex typographical conventions

@noindent
Any text on a programming language often has a significant number of
examples of programs and program fragments. In this reference, we show
these using a `typewriter`-like font, often broken out in a display
form:

@example
...
P : integer
...
@end example

We use the @code{...} ellipsis to explicitly indicate a fragment of a
program that is embedded in a context.
@cindex ellipsis
@cindex ...

Occasionally, we have to show a somewhat generic fragment of a program
where you, the programmer, are expected to put your own text in. We
highlight such areas using @code{@var{this}} font:

@example
(@var{Args}) => @var{Expr}
@end example

This kind of notation is intended to suggest that @code{@var{Args}} and
@code{@var{Expr}} are a kind of @emph{meta-variable} which are intended to be
replaced by specific text.

@quotation TIP
Some parts of the text require more careful reading, or represent
comments about potential implications of the main text. These notes
are highlighted the way this note is. @footnote{Notes which are not
really part of the main exposition, but still represent nuggets of
wisdom are relegated to footnotes.}
@end quotation

@quotation WARNING
Occasionally, there are areas where the programmer may
accidentally `trip over' some feature of the language.
@end quotation
