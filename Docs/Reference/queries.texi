@node Queries
@chapter Queries

@cindex queries
A @refer{QueryExpression} is an expression that denotes a value implicitly -- by
operations and constraints on other identified values. Typically, the
result of a query is an @code{list} but it may be of any @refer{Type} --
provided that it implements the @code{sequence} contract.

There are several flavors of query: comprehensions (see
@refer{Comprehensions}) which compute collections of values,
collections; iota expressions (see @refer{IotaQuery} which
compute a single value and test queries (see
@refer{TestQuery}) which check for the existence of a solution.

@float BNF,queryExpression
@caption{Query Expressions}
@display
@anchored{QueryExpression} ::= @refer{Comprehension}
 | @refer{IotaQuery}
 | @refer{TestQuery}
 | @refer{ReductionQuery}
@end display
@end float

@node Query Condition
@section Query Condition

All query expressions depend on the notion of a @emph{query
condition}. A query condition is a predicate that may be
@emph{satisfied} in zero or more ways.

A predicate is satisfied if there is a binding for variables in the
expression that make the expression evaluate to @code{.true}. This is
a little different to normal evaluation because of the existence of
these variables.

There are many different kinds of query condition, including normal
conditions, but the foundational query condition is the search condition
(see @refer{Search Condition}).

@node Search Condition
@subsection Search Condition
@cindex search
@cindex query, search

A search condition takes the form:

@float BNF,searchConditionFig
@caption{Search Condition}
@display
@anchored{SearchCondition} ::= @refer{Pattern} @code{in} @refer{Expression}
@end display
@end float

where @emph{Pattern} may have new variables that have not been defined
in an outer scope and @emph{Collection} is a collection of the
appropriate type -- in particular, the type of the pattern must
correspond to the type of an element of the collection.

A search condition is said to be @emph{satisfied} when there is an
element of the collection that matches the pattern. In many queries
this results in the binding of variables which are referenced in other
parts of the query condition and/or in the bound expression of the
query expression.

For example, the search condition:
@example
(X,"john") in parent
@end example
is satisfied (potentially multiple times) if there is a pair of the form:
@example
(@emph{Value},"john")
@end example
in the collection identified as @code{parent}. If @code{parent} were
defined as the list:
@example
[ ("alpha","john"), ("beta","peter"), ("gamma","john") ]
@end example
then the search condition has two solutions: one corresponding to
@code{"alpha"} and the other to @code{"gamma"}.

A search condition is type safe if the type of the pattern corresponds
to an element of the type of the collection; and if the contract
@code{iter} has been implemented for the collection:

@example
public contract all s,t ~~ iter[s->>t] ::= @{
  _iter:all x ~~ (s,x,(t,x)=>x) => x
@}
@end example
This implies that one can search any type of data structure so long as
there is an implementation of the @code{iter} contract available for
it.

Beyond the implementations for standard types such as @code{cons} and
@code{map}, it is definitely feasible for user-defined types to have
an implementation of @code{iter} defined.

@node Query Expressions
@section Query Expressions

@node Comprehensions
@subsection Comprehension Expressions
@cindex comprehension
@cindex query,comprehension

A @refer{Comprehension} computes a collection of answers -- all of
which satisfy a condition.

The general form of a comprehension is shown in
@refer{comprehensionFig}: it consists of a @emph{condition} and a
@emph{generator} expression; all enclosed in braces.

@float BNF,comprehensionFig
@caption{Comprehension Expressions}
@display
@anchored{Comprehension} ::= @code{@{} @refer{Expression} @code{|} @refer{Condition} @code{@}}
@end display
@end float

For example, given a list bound to the variable @code{Tble}:
@example
Tble = [
  ("john",23),
  ("sam",19),
  ("peter",21)
]
@end example
then, the query
@example
@{ Who | (Who,A) in Tble && A>20 @}
@end example
is a @refer{Comprehension} over the @code{Tble} list with value the list:
@example
[
  "john",
  "peter"
]
@end example
@code{"john"} and @code{"peter"} are in the result because both
@code{("john",23)} and @code{("peter",21)} are in @code{Tble} and
satisfy the condition that @code{A} is greater than 20.

@quotation Note
The type of the comprehension above is @emph{not} necessarily a
@code{cons} list. The overall type of a comprehension is governed by
the @code{sequence} contract. Thus the actual type will depend on the
context of the comprehension expression.

In order to force the result to be a @code{cons} list, use a type annotation:
@example
@{ Who | (Who,A) in Tble && A>20 @}:cons[integer]
@end example
@end quotation

@node Iota Query
@subsection Iota Query
@cindex query,iota

An iota query is similar in form to a comprehension, it consists of a
bound expression and a condition. The difference is that an iota
expression returns a single instance of the bound expression: i.e.,
the first time the query condition is satisfied the iota query will
return the bound expression -- wrapped as an optional value.

@float BNF,iotaQueryFig
@caption{Iota Query}
@display
@anchored{IotaQuery} ::= @code{@{!} @refer{Expression} @code{|} @refer{Condition} @code{!@}}
@end display
@end float

If the condition has no answers then the iota expression returns @code{.none}.

For example, to find a child of @code{P} one could use the expression:
@example
@{! X | (P,X) in children !@}
@end example

Assuming that the type of @code{children} is
@code{cons[(string,string)]}, then the type of this iota query is
@code{option[string]}.

@node Test Query
@subsection Test Query
@cindex query,test

A test query is a form that allows a query to act as a normal
condition. This is most useful when a condition requires some form of
search in order to be satisfied.

Test queries have a truth value -- allowing them to be used as normal
conditions.

@float BNF,testQueryFig
@caption{Test Query}
@display
@anchored{TestQuery} ::= @code{@{?} @refer{Condition} @code{?@}}
@end display
@end float

If the condition has no answers then the test query is @code{.false}.

@node Reduction Query
@subsection Reduction Query

@cindex accumulating over a query
@cindex applying a function to the results of a query

A @refer{ReductionQuery} differs from other forms of query in that the
results of satisfying the @refer{Condition} are fed to a function
rather than being returned as some form of collection.

@float BNF,reductionQueryFig
@caption{Reduction Query}
@display
@anchored{ReductionQuery} ::= @code{@{} @refer{Reducer} @code{<*} @refer{Expression} @code{<*} @refer{Expression} | @refer{Condition} @code{@}}
@anchored{Reducer} ::= @refer{Expression}
@end display
@end float

The three expressions to the left of the guard are the reduction function, element
expression and the zero expression respectively. The reduction function is applied to
successive elements corresponding to each solution of the query condition. The zero
expression is the initial seed of the computation.

The reduction function should have the type:
@example
(t@sub{E},t@sub{Z})=>t@sub{Z}
@end example

were @code{t@sub{E}} is the type of the bound expression in the @refer{ReductionQuery}
and @code{t@sub{Z}} is the type of the zero expression -- and also the type of the
overall query.

For example, to add up all the salaries in a department, one could use
a query of the form:

@example
@{ (+) <* E.salary <* zero | E in employees @}
@end example



