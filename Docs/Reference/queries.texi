@node Queries
@chapter Queries

@cindex queries
A @refer{Query} is an expression that denotes a value implicitly -- by
operations and constraints on other identified values. Typically, the
result of a query is an @code{list} but it may be of any @refer{Type} --
provided that it implements the @code{sequence} contract.

There are several flavors of query: the all-solutions query (shown in
@refer{allSolutionsFig}) projects a subset over one or more base
collections; the @emph{N} @code{of} query extracts a list containing
at most @emph{N} tuples from a collection; and the @code{any} query
extracts a tuple that satisfies the query.

The results of a query may be sorted and may be filtered for uniqueness.

@float BNF,queryExpression
@caption{Query Expressions}
@display
@anchored{QueryExpression} ::= @refer{SequenceQuery} | @refer{ReductionQuery} | @refer{SatisfactionQuery}
@end display
@end float

@node Sequence Queries
@section Sequence Queries

A @refer{SequenceQuery} returns a collection of answers -- either all
of them or some subset of them.

@float BNF,sequenceQueryExpression
@caption{Sequence Query Expressions}
@display
@anchored{SequenceQuery} ::= @code{@{} @refer{Expression} @code{|} @refer{Condition} @code{@}}
  | @code{[} @refer{Expression} @code{|} @refer{Condition} @code{]}
@end display
@end float

There are two variants of the @refer{SequenceQuery} -- @refer{AllSolutionsQuery} which returns a collection of all the answers to a question and @refer{BoundedCardinalityQuery} which returns some bounded subset of the query answers.

@node All Solutions Queries
@subsection All Solutions Queries
[[allSolutions]]
@cindex query,all solutions
The all solutions query expressions return results corresponding to all the different ways that a condition may be satisfied. There are variants corresponding to finding distinct solutions and having the result sets ordered.

\begin{figure}[htbp]
\begin{eqnarray*}
[[AllSolutionsQuery]AllSolutionsQuery::=[@code{all}|@code{unique}]\ @refer{Expression}\ @code{where}\ @refer{Condition}\ [@refer{Modifier}]]\\
[[Modifier]Modifier::=@code{order}\ [@code{descending}]\ @code{by}\ @refer{Expression}\ [@code{using}\ @refer{Expression}]]
\end{eqnarray*}
.All Solutions Query[[allSolutionsFig]]
\end{figure}

For example, given a @code{list} bound to the variable @code{Tble}:
[listing]
def Tble is list of [
  ("john",23),
  ("sam",19),
  ("peter",21)
]

the query
[listing]
list of { all Who where (Who,A) in Tble and A>20 }

is a @refer{SequenceQuery} over the @code{Tble} list defined above. Its value is the @code{list}:
[listing]
list of [
  "john",
  "peter"
]

@code{"john"} and @code{"peter"} are in the result because both @code{("john",23)} and @code{("peter",21)} are in @code{Tble} and satisfy the condition that @code{A} is greater than 20.

@cindex queries,bound expression
In principle, any expression may follow the @code{all} clause in a query. The `bound expression' may mention variables that are `bound' within the query constraint.

==== Ordered Result Sets
The @code{order by} modifier is associated with a @emph{path expression} -- like the bound expression it is evaluated in the context of a successful solution to the condition. The results of an @code{order}ed query expression are sorted according to the values of this path expression. The type of this expression must be one that admits to being compared -- i.e., the type must implement the @code{comparable} contract.

For example, to return an ordered @code{cons} list footnote:[The type of the resulting collection is depends on whether the @refer{Query} is governed by an enclosing @refer{SequenceType} if available, or of type @code{array} by default.] of people over the age of 20 we can use the query expression:
[listing]
cons of { all Who where (Who,A) in Tble and A>20
                        order by A}

which would give the result:
[listing]
cons of [
  "peter",
  "john"
]


The @code{using} modifier may be used in conjunction with the @code{order by} modifier to override the default concept of less than. If given, the @code{using} keyword should be followed by a @code{boolean}-valued function defined over the same type as the @code{order by} expression.

For example, to override the use of @code{<} in the @code{order by} query above, with say @code{>}, we can use:
[listing]
cons of { all Who where (Who,A) in Tble and A>20
                        order by A using (>)}

which would give the result
[listing]
cons of [
  "john",
  "peter"
]


==== Duplicate Elimination
[[duplicateElim]]
@cindex eliminating duplicates in queries
@cindex query,eliminating duplicates
@cindex unique@@code{unique} queries

The @code{unique} keyword is used, instead of the @code{all} keyword, to signal a query where duplicate elements are eliminated from the answer set.

For example, the query:
[listing]
list of { unique Sib where (P,Who) in parent and
                           (P,Sib) in parent and Who!=Sib }

would have the effect of eliminating duplication caused by the fact that most people have two recorded parents.

The @code{unique} query requires that the type of the `bound expression' implements the @code{comparable} contract -- i.e., that @code{<} is defined for the type.

\begin{aside}
The @code{unique} query is potentially more expensive than the @code{all} query -- since it involves post-processing the results as the @code{all} query to perform the duplicate elimination.
\end{aside}

@node Bounded Cardinality Queries
@subsection Bounded Cardinality Queries
The @emph{N} @code{of} quantifier delivers @emph{at most} N solutions to the query. For example, the query:
[listing]
list of { 5 of X where (P,X) in children }

returns an @code{list} of the first 5 children of @code{P}.

\begin{figure}[htbp]
\begin{eqnarray*}
[[BoundedCardinalityQuery]BoundedCardinalityQuery::=@refer{QueryQuantifier}\ @code{where}\ @refer{Condition}\ [@refer{Modifier}]]\\
[[QueryQuantifier]QueryQuantifier::=[@code{unique}]]\ @refer{Expression}\ @code{of}\ @refer{Expression}
\end{eqnarray*}
.Bounded Cardinality Query[[boundedCardinalityFig]]
\end{figure}

==== Duplicate Elimination
If the @code{unique} keyword is used with the bounded cardinality then duplication elimination is performed @emph{before} counting the results. I.e., a query of the form:
[listing]
list of { unique 5 of X where (P,X) in children }

is guaranteed to find 5 unique answers -- assuming that there are at least 5 unique ways of solving the @code{(P,X) in children} condition.

==== Ordered Result Sets
If the @code{ordered by} modifier is @emph{not} present, there is no defined ordering for the answers in the result. In particular, if _N_ answers are requested, they could be any _N_ answers that satisfy the condition.

If an @code{order by} clause is specified then the result consists of the `smallest' results. I.e., if there are 5 answers to the query:
[listing]
list of { all X where (P,X) in children }

then the query
[listing]
list of { 3 of X where (P,X) in children order by X }

results in an @code{array} of 3 elements that are guaranteed to be smaller or equal to any remaining answers.

If the @code{order descending} modifier is used then the `largest' results will be the ones returned.
\begin{aside}
Of course, in order to compute this smallest set, all the answers must first be computed. The result set sorted and only then the first elements picked.
\end{aside}

@node Satisfaction Queries
@section Satisfaction Queries
A @refer{Satisfaction} is used to find an individual that satisfies the condition. It returns a  @emph{single} result corresponding to a solution of the query -- as an @code{option}al value.

\begin{figure}[htbp]
\begin{eqnarray*}
[[SatisfactionQuery]SatisfactionQuery::=@code{any of}\ @refer{Expression}\ @code{where}\ @refer{Condition}\ [@refer{Modifier}]]
\end{eqnarray*}
.Satisfaction Query[[satisfactionQueryFig]]
\end{figure}

For example, to find a child of @code{P} one could use the expression:
[listing]
any of X where (P,X) in children


The @code{default} clause is used in the case that the @refer{Condition} is @emph{not} satisfiable. For example, assuming that we did not have a record of @code{"fred"}'s parents, then the query
[listing]
any of P where (P,"fred") in children default "not known"

would result in the answer @code{"not known"}.

==== A Sorted Satisfaction Query
The @code{order by} clause can be used to select the `smallest' solution to the query: the result of an @code{any of} query that is governed by an @code{order by} clause is effectively the @emph{least} solution to the query. If the @code{order descending} modifier is used then the result is the largest solution to the query.

For example, to find the youngest child of @code{"john"} we can use the query:
[listing]
any of X where ("john",X) in children and (X,A) in ages order by A


@node Reduction Query
@section Reduction Query
[[reductionQuery]]
@cindex accumulating over a query
@cindex applying a function to the results of a query

A @refer{ReductionQuery} differs from other forms of query in that the results of satisfying the @refer{Condition} are `fed' to a function rather than being returned as some form of collection.

\begin{figure}[htbp]
\begin{eqnarray*}
[[ReductionQuery]]ReductionQuery::=@code{reduction}\ @refer{Expression}\ @code{of}\ @refer{QueryExpression}
\end{eqnarray*}
.Reduction Query[[reductionQueryFig]]
\end{figure}

The reduction function should have the type:
[listing]
(t\sub{E},t\sub{E})=>t\sub{E}

were @code{t\sub{E}} is the type of the bound expression in the @refer{QueryExpression}.

For example, to add up all the salaries in a department, one could use a query of the form:
[listing]
reduction (+) of { all E.salary where E in employees }


\begin{aside}
The reducing function is only applied if there is more than one solution to the query. In this sense, it is closer in semantics to @code{leftFold1} than to @code{leftFold} -- see @refer{foldableContract}.
\end{aside}

\begin{aside}
The @refer{ReductionQuery} may be used with all the normal variants of @refer{QueryExpression}.
\end{aside}
