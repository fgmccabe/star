@node Actions
@chapter Actions

An action is the specification of an operation -- one that may be
@emph{performed}.  Actions in @Star{} are realized using the
@code{execution} contract.

@quotation Note
We separate the @emph{specification} of an operation from its
@emph{performance}. There are specific operators that can take an
@refer{Action} and perform it to extract its value.
@end quotation

@float BNF,actionFig
@caption{Types of Action}
@display
@anchored{ActionExpression} ::= @refer{DoAction}
  | @refer{ActionAction}
  | @refer{TaskAction}

@anchored{DoAction} ::= @code{'do'} @refer{BlockAction}

@anchored{ActionAction} ::= @code{'action'} @refer{BlockAction}

@anchored{TaskAction} ::= @code{'task'} @refer{BlockAction}
@end display
@end float

@node The @code{execution} Contract
@section The @code{execution} Contract

Action Expressions are expressions that denote an action -- the action
is performed when the action expression is performed in some way. This
is mediated by means of the @code{execution} contract.@footnote{The
@code{execution} contract is strongly related to the @code{monad}
contract; except that it is somewhat more elaborate.}

@float BNF,executionFig
@caption{Execution Contract}
@example
public contract all m/1,e ~~ execution[m->>e] ::= @{
  _valis:all a ~~ (a)=>m[a].
  _perform:all a ~~ (m[a])=>a.
  _sequence:all a,b ~~ (m[a],(a)=>m[b]) => m[b].
  _handle:all a ~~ (m[a],(e)=>m[a]) => m[a].
  _raise: all a ~~ (e) => m[a].
@}
@end example
@end float

The @code{execution} contract is over a type function (@code{m/1}) and
has a dependent type that corresponds to the type of any exception or
error that may be raised during the computation.

@quotation Note
There are many potential ways of implementing the @code{execution}
contract; representing different computation characteristics. The two
standard implementations are modeled by the @code{action} type and the
@code{task} type; these also have special syntax associated with them.

In addition to these, there are `non-standard' implementations
of the contract -- such as for the @code{option} type.
@end quotation

@quotation Note
Although computation expressions are based on the functions in this
contract, most programmers will not use these directly. Instead, there
is an action notation (see @ref{Do Notation}) that has a more familiar
style for representing actions.
@end quotation

@node @code{_valis} a value as a computation
@subsection @code{_valis} a value as a computation
@cindex Lift a value into computation

The @code{_valis} function takes an expression and makes it a computation.

@node @code{_perform} a computation
@subsection @code{_perform} a computation
@cindex Perform a computation

The @code{_perform} function takes a computation and performs it. It
is assumed that the computation does not return any form of error or exception.

@quotation Note
Use the @code{_handle} function to enable the handling of exceptions.
@end quotation

@node @code{_sequence} computations
@subsection @code{_sequence} computations
@cindex Combine computations

The @code{_sequence} function is a way of combining computations into
a sequential order. The type signature for @code{_sequence} is:
@example
_sequence:all a,b,m/1,e ~~ execution[m->>e] |: (m[a],(a)=>m[b]) => m[b].
@end example
Abstractly, the @code{_sequence} function takes two computations and
creates a new one that is the sequence composition of the two
computations.

In order to facilitate the flow of information between computations,
the second computation is modeled as a function from the value of the
first computation to a new computation.

If an exception arises in the first computation, then the second
computation is not performed and the exception becomes the value of
the whole computation.

@node @code{_handle} exceptional computations
@subsection @code{_handle} exceptional computations
@cindex Combine exceptional computations

The @code{_handle} function takes a computation that may result in an
exception and converts it into a potentially exception-free
computation. It does so by handling any exception that arises.

The type signature for @code{_handle} is:
@example
_handle:all a,m/1,e ~~ execution[m->>e] |: (m[a],(e)=>m[a]) => m[a].
@end example

The second argument to @code{_handle} is the exception handler. It is
expected to return a computation of the same type as the first
argument.

The expected semantics of @code{_handle} are that if the first
computation does not arise in an exception then that is the effective
computation of the result; otherwise, if the first computation does
result in an exception then the second argument is expected to take
that exception and return a new computation.@footnote{That is
presumably not exceptional.}

@node @code{_raise} an exception
@subsection @code{_raise} an exception
@cindex Raise an exception

The @code{_raise} function takes an expression and makes it an
exceptional computation. One of the effects of this is that the
exception is propagated through any subsequent computations -- unless
and until the exception is handled.

@node Expected invariants of computation
@subsection Expected invariants of computation
@cindex computation invariants
The different functions in the @code{execution} contract are expected
to work together in a coherent way. This is codified in a set of
invariants that any implementation of the contract is expected to
obey,

@enumerate
@item
@code{_perform} is a left identity of @code{_valis}.

I.e., for all @emph{E},
@example
_perform(_valis(@emph{E})) = @emph{E}
@end example
@item
@code{_valis} is a left identity of @code{_perform}.

I.e., for all non-exceptional @emph{C}:
@example
_valis(_perform(@emph{C})) = @emph{C}
@end example
This equality is not defined for computations @emph{C} that are the
result of @code{_raise}.

@item
Left identity @code{_valis} and @code{_sequence}

I.e., an expression of the form:
@example
_sequence(_valis @var{E},F)
@end example
is equivalent to
@example
F(@var{E})
@end example

@item
@code{_sequence} is associative.

I.e., a composition of the form:
@example
_sequence(_sequence(@var{C},@var{F}),@var{G})
@end example
is equivalent to
@example
_sequence(@var{C},(X)=>_sequence(F(X),G))
@end example
Notice that the form of the associativity is not the same as that for
arithmetic. This is because the @code{_sequence} function is
inherently assymetric.
@end enumerate

@node Do Notation
@section Do Notation
@cindex Do notation
@cindex action expressions

The @code{do} notation is a way of writing computation expressions in
a style that is likely to be familiar to programmers of other
programming languages.

@float BNF,doFig
@caption{Do Notation}
@display
@anchored{Action}::=@refer{NullAction}
  | @refer{BlockAction}
  | @refer{InvokeAction}
@c  | @refer{IgnoreAction}
  | @refer{ValisAction}
  | @refer{BindAction}
  | @refer{DefnAction}
  | @refer{AssignmentAction}
  | @refer{IfThenElseAction}
  | @refer{WhileAction}
  | @refer{ForAction}
  | @refer{TryCatchAction}
  | @refer{ThrowAction}
@end display
@end float

@node Nothing
@subsection @code{nothing}
@cindex no operation
@findex nothing
The @code{nothing} action does nothing; and does not return a value;
or, more accurately, return the empty tuple:

@float BNF,nothingFig
@caption{No Operation}
@display
@anchored{NullAction} ::= @code{'nothing'}
@end display
@end float

The @code{nothing} action is equivalent to
@example
_valis(())
@end example

@node Block Action
@subsection Block Action
@cindex block action

An action block consists of a sequence of actions, enclosed in braces
(@code{@{@}}) and separated by semi-colons.

@float BNF,blockActionFig
@caption{Block Action}
@display
@anchored{BlockAction} ::= @code{'@{'} @refer{Action} @code{';'} @dots{} @code{';'} @refer{Action} @code{'@}'}
@end display
@end float

The empty action block -- @code{@{@}} -- is equivalent to the
@refer{NullAction}.

Action blocks denote composition of actions using the @code{_sequence}
function: for example, the actions @var{A}, @var{B} and @var{C} in:
@example
@{
  A; B; C
@}
@end example

are equivalent to the expression:
@example
_sequence(A,(_)=>_sequence(B,(_)=>C))
@end example
assuming that neither of @var{A} or @var{B} are @emph{binding} actions.

@quotation Note
The last action in an action block is not permitted to be a binding action.
@end quotation

@node Invoke Action
@subsection Invoke Action
@cindex invoke action

The @refer{InvokeAction} denotes the invokation of a
sub-computation. Typically, an @refer{InvokeAction} takes the form of a
call to an action returning function:
@float BNF,invokeActionFig
@caption{Invoke Action}
@display
@anchored{InvokeAction} ::= @refer{Expression} @refer{TupleLiteral}
@end display
@end float

The type of this expression should be one that is consistent with the
enclosing computation expression. Specifically, if the enclosing
computation is an @code{action}, then the invoked expression should
also return an @code{action}.

@node Valis Action
@subsection Valis Action
@cindex valis action
@findex valis

The @refer{ValisAction} creates a computation from an expression.

@float BNF,valisActionFig
@caption{Valis Action}
@display
@anchored{ValisAction} ::= @code{'valis'} @refer{Expression}
@end display
@end float

When a @code{valis} action is performed, its expression is evaluated
and that value is used as the value of the computation.

@node Return Action
@subsection Return Action
@cindex return action
@findex return

The @refer{ReturnAction} creates a computation from an expression.

@float BNF,returnActionFig
@caption{Return Action}
@display
@anchored{ReturnAction} ::= @code{'return'} @refer{Expression}
@end display
@end float

@quotation Note
The @code{return} action, within an action expression, is a synonym of
a @code{valis} expression.
@end quotation

@node Bind Action
@subsection Bind Action
@cindex bind action

The @refer{BindAction} is used to extract the value of a computation and
pass it along as the value of this computation. The two computations
need not be of the same type -- although the exception types should be.

@float BNF,bindActionFig
@caption{Bind Action}
@display
@anchored{BindAction} ::= @refer{Pattern} @code{'<-'} @refer{Expression}
@end display
@end float

@quotation Note
A @refer{BindAction} may not be the last action in an @refer{BlockAction}.
@end quotation


@node Bind Expression
@subsection Bind Expression
@cindex bind expression

The @refer{BindExpression} has a similar role to teh
@refer{BindAction} except that it is used in the context of an
expression rather than an action.

@float BNF,bindExpressionFig
@caption{Bind Expression}
@display
@anchored{BindExpression} ::= @code{'^'} @refer{Expression}
@end display
@end float

@quotation Note
The @refer{BindExpression} has the effect of moving a computation
inside an expression to the outside.
@end quotation

For example, in the fragment:
@example
do@{
  A <- foo(^bar());
  valis A
@}
@end example
the function @code{foo} should be a suitably typed (i.e., have an
@code{_execution} contract implemented for it), as should @code{bar}. This code is equivalent to:
@example
bar() >>= (XX)=>foo(XX) >>= (A) => _valis(A)
@end example
where @code{XX} is a new variable not appearing elsewhere in the program.

@quotation Note
The above example could have been written
@example
do@{
  XX <- bar();
  A <- foo(XX);
  valis A
@}
@end example
except that the @refer{BindExpression} makes it more compact -- and it
is applicable in non @code{do} expressions also.
@end quotation

@node Definition Action
@subsection Definition Action
@cindex definition action

The @refer{DefnAction} is used to bind a variable to a value -- that is
available to subsequent actions.

@float BNF,defnActionFig
@caption{Definition Action}
@display
@anchored{DefnAction} ::= @refer{Pattern} @code{'='} @refer{Expression}
@end display
@end float

A @refer{DefnAction} differs from a @refer{BindAction} primarily in the
fact that the latter is used to unwrap a computation whereas the
@refer{DefnAction} computes any value and does not otherwise touch the
value.

The scope of a local variable declaration is from the local
declaration itself to the end of the containing @emph{BlockAction}.

@quotation Note
It is an error for a variable to be referenced within its own
definition. Recursive definitions are not permitted.
@end quotation

left hand side of a definition is a @refer{Pattern}, not simply an
@refer{Identifier}.

One primary use for this form is to allow the unpacking of function
results.

For example, the function @code{ddivide} below returns a pair of values: the
quotient and the remainder result of dividing the first argument by
the second:

@example
ddivide:(integer,integer)=>(integer,integer).
ddivide(X,Y) => (X/Y,X%Y).
@end example

We can unpack the results of a call to @code{ddivide} using a
@refer{TuplePattern} on the left hand side of the declaration:

@example
(Q,R) = ddivide(34,3)
@end example

which would have the effect of binding @code{Q} to @code{11}, and @code{R} to @code{1}.

@quotation Note
Like the @refer{BindAction}, it does not make sense for a
@refer{DefnAction} to be the last action in an @refer{BlockAction}.
@end quotation

@node Assignment Action
@subsection Assignment Action
@cindex assignment action
@findex :=

The @refer{AssignmentAction} is used to modify the contents of a
re-assignable variable.

It does not return a useful value (actually returns the empty tuple),
and so it is not normally part of a bind operation.

There is a special case of the @refer{AssignmentAction}: where the
variable being assigned to is new (i.e., not otherwise in scope). Such
an assignment is actually interpreted as establishing a local
re-assignable variable; just like the @refer{DefnAction}. In this case,
the scope of the defined variable extends from the beginning of the
next action to the end of the enclosing @refer{BlockAction}.


@float BNF,assignctionFig
@caption{Assignment Action}
@display
@anchored{AssignmentAction} ::= @refer{Variable} @code{':='} @refer{Expression}
@end display
@end float

@node Conditional Action
@subsection Conditional Action
@cindex conditional action

The @refer{IfThenElseAction} is used to denote a conditional computation.

@float BNF,condActionFig
@caption{If Then Else Action}
@display
@anchored{IfThenElseAction} ::= @code{'if'} @refer{Condition} @code{'then'} @refer{Action} @code{'else'} @refer{Action}
  | @code{'if'} @refer{Condition} @code{'then'} @refer{Action}
@end display
@end float

The action expressions of the @code{then} and @code{else} branches
must be of the same type. I.e., they must be the same computations of
the same type of value.

The second form of @refer{IfThenElseAction} -- which omits the
@code{else} branch -- is equivalent to one in which the else branch is
replaced by the @refer{NullAction}:

@example
if @var{Test} then
  @var{A}
else
  nothing
@end example

Because of this, and because of the constraint that both arms of an
@refer{IfThenElseAction} return the same type, the type returned by such
an action is always the empty tuple -- @code{()}.

@node While Action
@subsection While Action
@cindex while action
@findex while

The @refer{WhileAction} is used to denote an iterative computation that
repeats so long as some condition is satisfied.

@float BNF,whileActionFig
@caption{While Action}
@display
@anchored{WhileAction} ::= @code{'while'} @refer{Condition} @code{'do'} @refer{Action}
@end display
@end float

The enclosed action will be repeated zero or more times, for so long
as the test condition is satisfied.

The value returned by a @refer{WhileAction} is always the empty
tuple. Because of this, @refer{WhileAction}s nearly always achieve their
result by means of side-effects -- such as by assigning to
reassignable variables.

@node For Action
@subsection For Action
@cindex for action
@findex for

The @refer{ForAction} is used to denote an iterative computation that is governed by alternate solutions to a @refer{Condition}.

@float BNF,forActionFig
@caption{For Action}
@display
@anchored{ForAction} ::= @code{'for'} @refer{Condition} @code{'do'} @refer{Action}
@end display
@end float

The enclosed action will be repeated zero or more times, for so long
as the test condition is satisfied. Each such solution to the
@refer{Condition} may result in different bindings for variables --
those variables are in scope within the enclosed action.

For example, the action:
@example
for (X,Y) in parent && (Y,Z) in parent do @{
  gps := [(X,Z),..gps!]
@}
@end example
collects grandparents into the re-assignable variable @code{gps}.

Like @refer{WhileAction}s, the value returned by a @refer{ForAction} is
always the empty tuple.

@node Try Catch Action
@subsection Try Catch Action
@cindex try catch action
@findex try
@findex catch

The @refer{TryCatchAction} is used to denote a computation which may
need to respond to exception situations. 

@float BNF,tryCatchActionFig
@caption{Try Catch Action}
@display
@anchored{TryCatchAction} ::= @code{'try'} @refer{Action} @code{'catch'} @refer{Handler}
@anchored{Handler} ::= @refer{BlockAction}
                | @refer{Expression}
@end display
@end float

There are two forms of @refer{TryCatchAction}s: one where the handler is
very simple -- to the point of ignoring the exception itself -- and
the second where the handler should be a function from the error type
of the computation to a valid computation.

@node Throw Action
@subsection Throw Action
@cindex throw action
@findex throw

The @refer{ThrowAction} is used to denote a failed computation. The
@refer{ThrowAction} takes an error value which becomes the error value
of computation as a whole.

@float BNF,throwctionFig
@caption{Throw Action}
@display
@anchored{ThrowAction} ::= @code{'throw'} @refer{Expression}
@end display
@end float

@quotation Note
If a computation throws an error value, and that error exception is
not caught by a @refer{TryCatchAction}, then the execution of the entire
program is terminated.
@end quotation

@node Performing Actions
@section Performing Actions

All actions have a value associated with them -- this is the value
that is returned by the action after it is performed.

There are several situations where actions are performed
automatically; however, the @refer{ValofExpression} is a principal way
in which an action can be performed and its value returned.

@node Valof Expression
@subsection Valof Expressions

@float BNF,valofExpressionFig
@caption{Valof Expression}
@display
@anchored{ValofExpression} ::= @code{'valof'} @refer{Expression}
@end display
@end float

The @refer{ValofExpression} is applied to an @refer{Action}. The
effect of this is to perform the action and return its value as the
value of the @refer{ValofExpression}.

@quotation WARNING
It is a fatal error for the performed action to return exceptionally
-- the performed action should return a value and not exit by means of
a @refer{ThrowAction}.
@end quotation

