@node Grammar Rules
@chapter Grammar Rules
@cindex grammar rules

There are many occasions when it is necessary to parse text. For
example, the @Star{} run-time has parses for URIs, json files as well
as for some internal formats.

The grammar rule notation is intended to make it straightforward to
develop parsers using a high level notation.

@node Grammar rule notation
@section Grammar rule notation

A grammar rule denotes a way of parsing a stream of elements. For example, the grammar rule:

@example
sumExp >> .sum(L,R) --> prodExp >> L, [`+`], sumExp >> R.
@end example

is a classic fragment from an expression parser. It states that a
@code{sumExp} can be formed by a @code{prodExp}, a @code{+} character
and a @code{sumExp}.

The expressions following the chevrons denote output: the output of the rule as a whole is the expression

@example
.sum(L,R)
@end example

assuming that the @code{prodExp} returns the value @code{L} and the
right hand side @code{sumExp} returns @code{R.}

The language is quite expressive, including support for many common
patterns -- such as repeated sequences and interleaved sequences.

@float BNF,grammarRuleFig
@caption{Grammar Rule Notation}
@display
@anchored{Grammar Rule} ::= @refer{GrammarRuleHead} @code{-->} @refer{RuleBody}

@anchored{GrammarRuleHead} ::= @refer{NonTerminal} @code{>>} @refer{Expression}

@anchored{RuleBody} ::= @refer{NonTerminal} |
  @refer{Terminal} |
  @refer{RuleBody} @code{,} @refer{RuleBody} |
  @refer{RuleBody} @code{|} @refer{RuleBody} |
  @refer{RuleBody} @code{*} |
  @refer{RuleBody} @code{*} @refer{RuleBody} |
  @code{~} @refer{RuleBody} |
  @refer{RuleBody} @code{>>} @refer{Pattern} |
  @code{@{} @refer{Condition} @code{@}} |
  @code{fail} |
  @code{end}
@end display
@end float

@node Grammar Rule Type
@subsection Grammar Rule Type

The type of a grammar non-terminal is a function type:

@example
stream[s->>t] |: (s) => option[(r,s)]
@end example

where @code{s} is the type of the stream of tokens (@code{t}) being
parsed. The result of a successful parse is a pair: a value (@code{r})
and the remaining part of the stream (@code{s}).

Where a grammar symbol has arguments, they follow the stream type.

@node Terminal Symbols
@subsection Terminal Symbols

Terminal symbols are denoted by patterns, enclosed in square brackets,
that are used to match successive tokens from the input stream.

@float BNF,terminalSymbolFig
@caption{Terminal Symbols}
@display
@anchored{Terminal} ::= @code{[} @refer{Pattern} @code{,} @dots{} @code{,} @refer{Pattern} @code{]}
     |  @refer{StringLiteral}
@end display
@end float

The @refer{Pattern} is used to match against a single token in the input.

Sequences of terminals can be written enclosed within a common set of
square brackets.

In addition, a literal string -- without any interpolation -- may be
used. A string literal is equivalent to an expanded sequence of
character terminal symbols.

For example, in the rule:

@example
isMine --> "mine".
@end example

is equivalent to the rule:

@example
isMine --> [`m`,`i`,`n`,`e`].
@end example

@quotation Note
The literal string form of terminal is useful when parsing text one
character at a time. However, the grammar notation is actually neutral
to parsing text: it can equally be used for parsing any finite
sequence of items.
@end quotation


@node Non Terminal Symbols
@subsection Non Terminal Symbols

Non terminal symbols refer to the application of a grammar rule. Non
terminals are denoted by either by an identifier -- the name of the
grammar being referred to -- or by an applicative expression.

The latter are a useful means of introducing context sensitivity to a
grammar. For example, in the rule:

@example
termLeft(Pr) >> (.app(Op,[A]),OPr) --> [O],
  @{(OPr,RP,Op)?=prefix(O) && OPr=<Pr @}, term(RP)>>(A,_).
@end example

The argument @code{Pr} to the @code{termLeft} non-terminal is used to
indicate the desired operator priority in a prefix operator
combination.

Non-terminals can produce values, as can be seen here, and within a
rule, the value returned by a non-terminal can be matched against.
  
@float BNF,nonTerminalSymbolFig
@caption{Non Terminal Symbols}
@display
@anchored{NonTerminal} ::= @refer{Identifier} | @refer{ApplicativeExpression}
@end display
@end float

@node Grammar Sequence
@subsection Grammar Sequence

A sequence of grammar terms is written using a @code{,} comma. A
sequence @code{L,R} is satisfied if @code{L} followed by @code{R} is
satsified.

Note that if a @code{>>} is applied to a sequence, it is interpreted
as having been applied to the last entry in the sequence. I.e.,

@example
A, (L,R)>>P, B
@end example

is interpreted as being the equivalent of:

@example
A, L, R>>P, B
@end example

@node Grammar Disjunction
@subsection Grammar Disjunction

A disjunction of grammar terms is written using the @code{||}
operator. A disjunctive grammar is satisfied if either arms are
satisfied.

@quotation Note
A disjunction is equivalent to introducing a new non-terminal with two
(or more) rules -- each corresponding to an arm of the disjunction.

I.e.,

@example
A, (L | R), B
@end example

is equivalent to:

@example
A, N, B
@end example
where @code{N} is defined:

@example
N --> L.
N --> R.
@end example
@end quotation

If a disjunction has an output @code{>>} applied, then it is applied
to each of the arms:

@example
A, (L | R)>>P, B
@end example

is equivalent to:

@example
A, (L>>P | R>>P), B
@end example

which, in turn, is equivalent to:

@example
A, N >> P, B
@end example

with:

@example
N >> P --> L >> P.
N >> P --> R >> P.
@end example

@node Kleene Star
@subsection Kleene Star

A starred grammar represents a repeated sequence of expressions.

For example,

@example
A, B*, C
@end example

denotes zero or more occurrences of @code{B}, sandwhiched between
@code{A} and @code{C}.

If the starred term has an output -- designated by @code{>>} -- then
the output is a @code{cons} list. Specifically, if @code{B} produced a
value of type @code{t}, then @code{B} produces @code{cons[t]}.

For example, the following rule corresponds to a traditional
definition of an identifier:

@example
ident >> [F,..S]::string --> letter >> F, alphaNum * >> S.
@end example

where @code{letter} and @code{alphaNum} have their expected definitions.

Note that the value returned by @code{ident} above takes the
@code{cons} list of @code{char}acters and creates a @code{string} from
it using coercion.

@quotation Note
The term @emph{Kleene Star} is a reference to regular expression
grammars. However, the grammar notation is strictly more powerful than
regular expressions.
@end quotation


@node Interleaved Grammar
@subsection Interleaved Grammar

An interleaved grammar is a variation of the Kleene star, where the
intention is to parse a repeated sequence; but with a fragment
separating each item.

For example, the rule:

@example
args >> Args --> exp * [`,`] >> Args
@end example

is intended to capture the common case of a sequence of expression
separated by commas.

As with Kleene star, the produced value is a @code{cons} list;
however, only the left hand side is used. For example, in the rule
above, @code{Args} is a @code{cons} list of the values returned by
@code{exp}.

@node Negated Grammar
@subsection Negated Grammar

A negated grammar is satisfied if the negated grammar is not. In
addition, a negated grammar does not consume any of the input --
although it does look ahead.

For example, the grammar body:

@example
A, ~B, C
@end example

is satisfied if @code{A} is satisfied, with @code{C} being satisfied
immediately after @code{A}. In addition, @code{B} must not be
satisfiable following @code{A}.

For example,

@example
integral --> digit*, ~ [`.`]
@end example

is a rule for parsing an integral number as a sequence of digits,
providing that they are not followed by a period.

@node Extract Value
@subsection Extract Value

Non terminals can @emph{produce} a value that can be used within a
rule to help produce an overall value of the rule itself. This is
marked using the chevron form:

@example
@emph{NT} >> @emph{Ptn}
@end example

The pattern @emph{Ptn} is matched against the value produced by the
non terminal @emph{NT}.

@node Grammar Condition
@subsection Grammar Condition

Occasionally, it is useful, in a grammar, to include @emph{semantic}
guards. This can be done in a grammar rule by enclosing a
@refer{Condition} within braces.

A grammar condition does not consume any input: it is used to verify a
condition based on the input consumed so far.

@node Grammar Reject
@subsection Grammar Reject

The @code{fail} grammar symbol is used to signal a non-parse. It will
cause the current rule to fail to parse.

This symbol is most often used implicitly: every rule set that does
not have a @code{default} rule has a rule of the form:

@example
NT --> fail
@end example

added automatically.

@node Grammar End
@subsection Grammar End

The @code{end} grammar symbol only matches the end of the input. It is
useful for cases where a grammar must parse the entire input.

