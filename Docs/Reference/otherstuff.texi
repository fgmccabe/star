

@quotation Under the covers
If the contract statement looks like a type definition, that is
because it @emph{is} a kind of type definition. Specifically, it
defines a dictionary of sorts -- of the elements defined within the
contract.
@end quotation


=== Instance Constraint @anchor{instanceConstraint}
@cindex{type,constraints!instance}

An @var{InstanceConstraint} is a requirement on a variable that any
instantiation of the variable is an @emph{instance of} a type --
typically that is a universally quantified type.


@anchor{instanceConstraintFig} .Instance Type Constraint ****
@anchor{InstanceConstraint}InstanceConstraint ::= @var{TypeVar}
@code{instance of} @var{Type} ****

For example, in
@example
r instance of (all t ~~ (t)=>t)

we establish a constraint on @code{r} that any binding of @code{r}
must be some specialization of the function type:
@example
all t ~~ (t)=>t

Note that this would permit, for example, @code{r} to be bound to the
@code{integer} function type:
@example
(integer)=>integer

because this type is an instance of the @var{UniversalType}.


=== Has Kind Constraint @anchor{hasKindConstraint} @cindex{type,constraints!has
kind}

An @var{HasKindConstraint} is a requirement on a variable that any
instantiation of the variable @emph{has the right kind}.

The kind of a type varers to whether the type is a regular type or a
type constructor. It also encodes the expected number of type
arguments -- in the case that the variable should be bound to a type
constructor.

@anchor{hasKindConstraintFig} .Has Kind Type Constraint ****
@anchor{HasKindConstraint}HasKindConstraint::=@var{TypeVar}\ @code{::}
@var{Kind} ****

For example, in
@example
c :: type

we establish a constraint on @code{c} that any binding of @code{c}
must be a @var{Type} (in particular, it may not be bound to a type
constructor.

The constraint:
@example
d :: type[type,type]

establishes the constraint that @code{d} must be bound to a type
constructor (@emph{not} a @var{Type}) of arity two. Given this
constraint, it would not be legal to bind @code{d} to the standard
type constructor @code{cons} (say) -- because @code{cons} is a type
constructor of one argument.


== Type Definitions @anchor{typeDefinitions} @cindex{type,definition}

A type definition is a statement that introduces a new type into the
current scope. There are two forms of type definition statement: the
@var{TypeAlias} definition and the @var{AlgebraicType} definition. In
addition, the @var{TypeWitness} is used to @emph{declare} a type.

.Type Definition Statements @anchor{typeDefinitionFig} ****
@anchor{TypeDefinition}TypeDefinition ::= @var{TypeAlias} |
@var{AlgebraicType} | @var{TypeWitness} ****

=== Type Alias @anchor{typeAlias} @cindex{type,alias} A type alias is a
statement that introduces a new type name by mapping it to an existing
type expression.

.Type Alias Definition Statement @anchor{typeAliasDefinitionFig} ****
@anchor{TypeAlias}TypeAlias::=@code{type} @var{TypeSpec} @code{\=>}
@var{Type} ****

@quotation NOTE
==== Type aliases may be parameterized -- in the sense that the type
being defined may be parameterized and that the definiens may also be
parameterized.

Note that the any type variables on the right hand side of a
@var{TypeAlias} statement must also have been mentioned on the left
hand side.  ====

For example, the statement:
@example
type time => integer

declares a new type that is an alias for @code{time} -- i.e., that it
is actually equivalent to the @code{integer} type.

@quotation TIP
Type aliases allow the programmer to signal that a particular type is
being used in a special way. In addition, during program development,
type aliases are useful to provide markers for types that will be
elaborated further with a regular algebraic definition.

Type aliases have no run-time presence. In fact, they may be viewed as
a simple form of type macro -- type expressions that match the left
hand side are replaced by the type expression on the right hand
side. However, type aliases have some definite constraints: a type
alias may not be, directly or indirectly, recursive.

=== Algebraic Type Definitions @anchor{algebraicTypeDefinitions} An
algebraic type definition is a statement that introduces a new type;
it also defines the possible values associated with the type.

As illustrated in @var{algebraicDefinitionFig}, an algebraic type
definition introduces the new type and defines one or more
@var{Constructor}s -- separated by the @code{|} operator.

A @var{Constructor} is a specification of a value of a type; i.e.,
constructors @emph{paint a picture} of the shape of potential values
of the type.

There are three kinds of @var{Constructor}: enumerated symbols, term
constructor constructors and labeled record constructors.

@anchor{algebraicDefinitionFig} .Algebraic Type Definition Statement ****
@anchor{AlgebraicType}AlgebraicType::= @var{TypeQuantifier} [@code{|:}
@var{TypeConstraint}] @var{TypeSpec} @code{::=} @var{Constructor} |
... | @var{Constructor}

@anchor{TypeSpec}TypeSpec ::= @var{Identifier} &nbsp;&nbsp; |
@var{Identifier} @code{[}@var{TypeVariable}
,...,@var{TypeVariable}@code{]}

@anchor{Constructor}Constructor::=@var{EnumeratedSymbol} &nbsp;&nbsp;|
@var{TermConstructor} &nbsp;&nbsp;| @var{RecordConstructor} ****

@quotation NOTE
Most standard built-in types have type-specific constructors. For
example, lists have a list notation, @code{dictionary}s have a
dictionary notation and so on. Such constructors may not be defined
using the algebraic type definition notation -- for example, the
constructors for the @code{integer} type are denoted by the normal
decimal notation for integers.

As elaborated below, each @emph{arm} of an algebraic type definition
defines a value or set of values that belong to the type. There is a
slightly more formal way of expressing this: an algebraic type
definition induces a set of free functions.

@cindex{constructor,bijection} Free functions are technically bijections
-- they are one-to-one -- i.e., they have inverses. In programming
languages, free functions are used as data structuring tools; but
mathematically they are functions.

For example, the type definition:
@example
person ::= noone | someone(string,integer)

induces the constructor function for @code{someone}:
@example
someone : (string,integer) <=> person;

The enumerated symbol has a simpler type:
@example
noone : person;

The complete set of constructor functions introduced within an
algebraic type definition is complete: i.e., they define all the
possible values of the type.


@quotation NOTE
A given label, whether it is used as an @var{EnumeratedSymbol}, the
label of a @var{LabeledType} or a @var{LabeledRecord} can be defined
only once. I.e., it is not permitted to @emph{share} constructor
labels across different types.

==== Enumerated Symbol @anchor{enumSymbol} @cindex{constructor,enumerated
symbol} @cindex{enumerated symbol} @cindex{type,enumerated}

An enumerated symbol is written as an identifier. The fact that an
identifier has been mentioned in a type definition is sufficient to
@emph{mark} it as a value -- and not as a variable for example.

@anchor{enumSymbolFig} .Enumerated Symbols ****
@anchor{EnumeratedSymbol}EnumeratedSymbol::=@var{Identifier} ****

The standard type @code{boolean} is defined in terms of two enumerated
symbols: @code{true} and @code{false}:
@example
boolean ::= true | false


@quotation NOTE
An enumerated symbol must be unique across all types within the scope
of the type definition.

==== Type Safety An enumerated symbol occurring within a type
definition has the defined type.

@quotation NOTE
A particular consideration should be made for the case where an
enumerated symbol is part of a universally quantified type.

==== Term Constructor @anchor{conFun} @cindex{constructor,positional
constructor} @cindex{positional constructor} @cindex{type,positional
constructor}

A term constructor expression or pattern is written in the style of a
function call. The specification of the term constructor uses
@emph{types} in argument positions to denote the type of the
corresponding argument.

@anchor{positionalConFig} .Term Specifier ****
@anchor{TermConstructor}TermConstructor ::= @var{Identifier} @code{(}
@var{Type} ,.., @var{Type} @code{)} ****

For example, a type definition for wrapping return values with an
error code could have a definition:
@example
all t ~~ returnType[t] ::= error(string) | ok(t)

A function returning a value of type @code{returnType} would either
return @code{ok(@emph{value})} or @code{error("@emph{message}")},
where the message explained the error.

term constructors are well suited to situations where the number of
arguments is limited and fairly obvious.

@quotation NOTE
Any type variables that are referred to within a @var{TermConstructor}
constructor must either be bound by explicit quantifiers or must
appear in the head of the @var{AlgebraicType} definition itself.


==== Record Constructor @anchor{aggCon} @cindex{constructor,record
constructor} @cindex{record constructor} @cindex{type,record constructor}

Labeled records denote constructors whose elements are addressed by
name rather than by argument position. A labeled record specification
consists of a collection type annotations (see
@var{typeAnnotationFig}), separated by semicolons. In addition, the
record specification may include @emph{default} values for some (or
all) of the attributes of the record.


@anchor{aggregateConFig} .Labeled Record Constructor ****
@anchor{RecordConstructor}RecordConstructor ::= @var{Identifier} @code{{}
@var{ElementType} ;..; @var{ElementType} @code{}}

@anchor{ElementType}ElementType ::= @var{Annotation} &nbsp;&nbsp;|
@var{Identifier} @code{default} @code{=} @var{Expression}
&nbsp;&nbsp;| @var{Identifier} @code{default} @code{:=}
@var{Expression} &nbsp;&nbsp;| @var{DefltEquation} &nbsp;&nbsp;|
@code{assert} @var{Condition} ****

If there is more than one record constructor for a type then any
attributes that they have in common must have the same type associated
with them. For example, the type definition for a two-three tree
structure is illustrated in @var{twoThree}.

@anchor{twoThree} .A @code{twoThree} tree type
@example
all s ~~ twoThree[s] ::= three{left:twoThree[s]; label:s;
  right:twoThree[s] } | two{left:twoThree[s]; right:twoThree[s] } |
  empty;

The @code{left} and @code{right} attributes in the two constructors
are required to have the same type because they are shared by the two
records.

@quotation TIP
Notice how the type annotations for the @code{left} and @code{right}
sub-tree uses the same type identifier as in the definition
itself. This marks @code{twoThree} as a @emph{recursive} type.


==== Default Values @anchor{defaultValues} @cindex{type,record
constructor!default values} @cindex{default values,record constructor}

It is permitted to associate a @emph{default value} with a field of an
record constructor. A default value is simply an expression for an
attribute that is used should a particular record literal expression
(see @var{recordLiteral}) not contain a value for that field.

For example, for convenience, we might add @code{default} annotations
in the @code{twoThree} type defined above, resulting in the type
definition in @var{twoThreeDef}.

@anchor{twoThreeDef} .A @code{twoThree} tree type with defaults
@example
all s ~~ twoThree[s] ::= three{ left:twoThree[s]; left default =
  empty; label:s; right:twoThree[s]; right default = empty; } or two{
  left:twoThree[s]; left default = empty; right:twoThree[s]; right
  default = empty; } or empty;


@quotation NOTE
@cindex{expressions,default} @cindex{variable,scope} A default value
expression for an attribute is evaluated in the scope that is valid
for the type definition itself. The default value expression may
reference variables that are in scope at the point of type
definition. The default value expression may also reference
@emph{other} fields of the record constructor -- as though they were
variables -- provided that they themselves do not have @code{default}s
associated with them.

For example, in this definition of @code{Person}:
@example
Person ::= someone{ name:string; dob:date; age:()=>float; age()
  default => now()-dob; }

there is a @code{default} definition of the @code{age} field that is
used if a given @code{someone} record literal does not mention a value
for @code{age}. This @code{default} definition makes use of the
@code{dob} field as though it were a free variable of the @code{age}
function.


==== Defaults of @code{var} Fields @cindex{expressions,default!assignable
field} @cindex{var field@@code{var} field,default value}

To declare a @code{default} value for a @code{var} field, the form:
**** @var{Identifier} default := @var{Expression} ****

should be used. For example, in the type:
@example
account ::= account{ balance:var integer; balance default := 0 }

the @code{balance} field is a @code{var} field, and its default value
is @code{0}.

==== Type Variables and Safe Algebraic Type Definitions @cindex{type
variables in an algebraic type definition} @cindex{constructor type
variables}

For an @var{AlgebraicType} definition to be safe requires a constraint
on type variables within the definition. In particular, it is not
permitted to @emph{introduce} a type variable in any of the
constructors in the definition.

@quotation NOTE
Specifically, any unbound type variables mentioned in a type
definition must also occur within the @var{TypeSpec} or be bound by an
enclosing type quantifier.


For example, the type definition:
@example
opaque ::= op(t)

is not valid because the type variable @code{t} mentioned in the
@code{op} constructor is not mentioned in the @var{TypeSpec} -- unless
@code{t} is actually bound by a quantifier in an enclosing form.

@quotation NOTE
The reason for this is that type safety cannot be guaranteed for such
constructors. For example, consider the invalid function:
@example
badOp(op(23)) is false;

The type signature for @code{badOp} is
@example
badOp:(opaque)=>boolean

and, according to type inference rules, an expression such as:
@example
badOp(op("alpha"))

would be type safe. However, this expression will lead to a run-time
failure when the integer 23 is compared against the string
@code{"alpha"}.

@quotation NOTE
Note that the converse case, where a type variable is mentioned in the
@var{TypeSpec} is not mentioned in a constructor defined within the
type definition is perfectly valid.

It @emph{is} possible to have type variables mentioned in a
constructor that are not defined in the @var{TypeSpec}. The constraint
is that such type variables must be closed by quantification.

For example, the type definition:
@example
univ ::= univ(all t ~~ t)

is a legally valid @var{AlgebraicType} definition; albeit one that is
quite restricted. Locally quantified types are usually associated with
function types:
@example
uniFun ::= uniFun(all t ~~ (t,t)=>t)

which describes a term constructor @code{uniFun} that expects a
generic function as an argument.

=== Automatic Synthesis of Contract Implementations @cindex{automatically
synthesizing implementations} @cindex{implementing
contracts@@code{implementing} contracts}

In some cases, the @emph{regular} implementation of a contract by be
predicted by examining the algebraic type definition itself. The
@Star{} compiler automatically generates implementations of the
@code{equality} and the @code{pPrint} contracts, for example, by
inspecting the type definition itself.

A programmer may extend this system of atomically implementing
contracts by implementing a special macro whose name is of the form
@code{implement\_\q{name}}. A type definition that is marked:
@example
person ::= some{ name:string; } | noOne implementing Spec

will result in the macro @code{implement_Spec} being invoked on the
type definition.

This is used, for example, to allow coercion between types and the
standard @code{quoted} type to be synthesized, instead of being
constructed manually.

=== Algebraic Interface Record @anchor{algebraicInterface} An
@var{AlgebraicType} definition induces an interface that is composed
of all the fields in any of the @var{RecordConstructor}s that are
defined within the definition.

This interface -- which takes the form of a @var{RecordType} --
contains a @var{Annotation} for every @var{Annotation} that is present
in a @var{RecordConstructor}.

For example, the interface for the @code{account} type above consists
of:
@example
{ balance:var integer; }

This interface is used when determining the type soundness of a
@var{RecordAccess} expression.

@quotation NOTE
The condition noted above that two fields of the same name in two
@var{RecordConstructor}s of the same @var{AlgebraicType} must have the
same type can be formalized by declaring that the interface of an
@var{Algebraic} type must be well formed (which is only possible if
there is only a single @var{Annotation} for a given field).

=== Type Witness Definition @anchor{countsAs}

A @var{TypeWitness} definition declares that a given type exists. It
is used to assert that a given existential type exists.


@anchor{typeCountsAsFig} .Type Witness Statement ****
@anchor{TypeWitness}TypeWitness ::= @code{type} @var{Identifier} @code{=}
@var{Type} ****

For example, in the expression:
@example
group{ type elem = integer; inv(X) => -X; op(X,Y) => X+Y; zero = 0; }

the statement:
@example
type elem = integer;

asserts that the type @code{integer} is a witness for the
existentially quantified type @code{elem}.
@quotation NOTE
@var{TypeWitness} statements are inherently internal statements: the
witness type itself is not exposed by the record that contains the
@var{TypeWitness} statement.

== Contracts @anchor{contracts} @cindex{type,contracts}

A contract is a specification of a set of functions and action
procedures that form a coherent collection of
functionality. Associated with a @var{Contract} are one or more
@var{Type}s -- the contract is said to be @emph{over} those types.





=== Resolving Overloaded Definitions @anchor{overloading}
@cindex{type,contracts!resolving} @cindex{overloading} @cindex{resolving
overloaded definitions}

When a program varers to a contract-defined function -- i.e., a
variable that is declared within a @code{contract} -- then that
reference must be @emph{resolved} to an actual program before the
program can be said to be executable.

For example, consider the expression:
@example
A+3

The @code{(+)} function is part of the @code{arithmetic} contract (see
@var{arithmeticContract}) which means that we need to resolve the call
to @code{(+)} to an actual implemented function.

The type signature for @code{(+)} is:
@example
all t ~~ arithmetic[t] |: (t,t)=>t

where the constraint
@example
arithmetic[t]

is satisfied for any @code{t} for which there is an
@code{implementation} of @code{arithmetic}.

In this case we know, because @code{3} is an @code{integer} that the
type of @code{A} must also be @code{integer} -- as is the type of the
whole expression. So, the actual constraint after taking type
inference into account is:
@example
arithmetic[integer]

which @emph{is} satisfied because there is a standard implementation
of @code{arithmetic} for @code{integer}.

Implementations can be viewed as functions whose value is a record of
all the elements of the defined contract. For example, the
implementation function of @code{arithmetic} over @code{integer} has a
definition that is similar to:
@example
arithmetic#integer() is arithmetic{ X+Y => _integer_plus(X,Y) ...  }

Resolving the expression @code{A+3} is achieved by replacing the
abstract function @code{(+)} with an actual function:
@example
arithmetic#integer().+(A,3)

In some cases, there is not sufficient information about the types of
variables to fully resolve the appropriate definition to use. In this
case, it must be true that the type(s) involved must be variable and
that they @emph{surface} to a point where the type variable(s) are
generalized.

Consider the lambda:
@example
(X,Y) => X+Y*Y

The type of @code{X} and @code{Y} may not be completely known, and are
denoted by the same type variable (@code{t}) say; @code{t} is,
however, a constrained type that is bound by the scope of the function
itself.

Ultimately, in some larger scope, either the @code{t} type becomes
grounded into some specific type, or it is bound by an explicit
quantifier. The quantifier must varlect the contract constraint --
otherwise the compiler will report an error. For example, it might be
that we defined a variable in a @code{let} @var{ThetaEnvironment}:
@example
addSq : all t arithmetic[t] |: (t,t)=>t addSq = ((X,Y)=>X+X*Y)

The @code{arithmetic} contract constraint is surfaced to the same
level where the type variable @code{t} is bound.

In general, where an overloaded name is used, there are two permitted
possibilities: the type constraints implied by the overloaded name are
subsumed by an explicit type equality or the type variable is bound in
some @var{thetaEnvironment}.

@quotation NOTE
The third possibility -- where the constrained type is a type variable
but is not bound by a @var{thetaEnvironment} is an error -- an
unresolved overloaded identifier error.

In the case of the @code{addSq} definition, there is not enough
information here to @emph{fix} an actual implementation to use; and so
we resolve this by rewriting the @code{addSq} function to take an
additional argument -- the @code{arithmetic} dictionary represented by
the variable @code{D}:
@example
addSq#(D) => let{ addSq'(X,Y) => D.+(X,D.*(Y,Y)); } in addSq'

In addition (sic), we will have to also resolve all @emph{calls} to
@code{addSq} as well. A call to @code{addSq} such as:
@example
addSq(A,3)

will be rewritten to:
@example
addSq#(arithmetic#integer())(A,3)

because we know from the presence of the literal integer that
@code{addSq} is being used with @code{integer} arguments.

Resolving for contract implementations @emph{pushes out} from
expressions such as @code{A+3} outward until all references to
contracts have been resolved by explicit implementations.

@quotation NOTE
It is an error for the top-level of a program -- i.e., package-level
-- to contain unresolved references to contracts.

The formal rules for satisfying (and hence resolving) contract
constraints are shown in @var{overloading}.


=== Standard Contracts @anchor{standardContracts}
@cindex{type,contracts!standard} @cindex{standard,contracts}

The language defines a few contracts as standard. These cover, for
example, the concepts of @code{equality}, @code{comparable}, and
@code{sizeable} entities and the @code{arithmetic} operations. These
contracts are integral to the semantics of the language.

@anchor{standardContractTable} .Standard Contracts [cols="1,5,2"] |===
|Contract | Description | Reference

|@code{equality[t]} |Definition of equality | @var{equalityPredicate}

|@code{comparable[t]} |Definition of comparability|
 @var{comparisonPredicates}

|@code{arithmetic[t]}|Basic arithmetic| @var{arithmeticContract}

|@code{math[t]} | Misc math functions | @var{mathContract}

|@code{trig[t]} | Trigonometry functions| @var{trigContract}

|@code{bitstring[t]} | Bitwise functions| @var{bitString}

|@code{sizeable[t]} | Definition of @code{size} and @code{empty}|
|@var{sizeableContract} @code{sequence[t]} | Sequences of values|
|@var{sequenceContract} @code{indexable[t]} | Random access|
|@var{indexableContract} @code{iterable[t]} | Iteration over
|collections| @var{iterableContract} @code{coercion[s,t]} | Coerce
|between types| @var{typeCoercionContract} @code{speech[a]} | Actor
|speech actions| @var{speechContract} @code{pPrint[t]} | Pretty Print
|Display| @var{pPrintContract} @code{computation[c]} | Computation
|Expressions| @var{computationContractProg} @code{execution[c]} |
|Computation Expressions| @var{executionContractProg} ===

@anchor{typeSystem} == Type System @cindex{type,system}

The type system consists of a language of type expressions and a set
of rules for showing consistency between types and programs.

The foundation of these rules are the rules that relate one type to
another; and the primary relationship involved here is subsumption.

In addition there are rules for determining when various constraints
are satisfied and there are rules that relate specific expressions to
types.


== Type Annotations @anchor{typeAnnotation} An @var{Annotation} is a
statement that declares a variable to have a certain @var{Type} or a
@var{Type} to have a certain @var{Kind}.

For example,
@example
alpha:all t ~~~ (t)=>string

is a @var{TypeAnnotation}, whereas
@example
el :: type
@end example

is a @var{KindAnnotation}.

@anchor{typeAnnotationFig} .Type Annotations **** @anchor{Annotation}Annotation
::= @var{TypeAnnotation} | @var{KindAnnotation}

@anchor{TypeAnnotation}TypeAnnotation ::= @var{Identifier} @code{:}
@var{Type}

@anchor{KindAnnotation}KindAnnotation ::= @var{Identifier} @code{::}
@var{Kind} &nbsp;&nbsp; | @var{Identifier} @code{::}
@var{TypeConstraint} @code{|:} @var{Kind}

@anchor{Kind}Kind::=@code{type} | @code{type/}@var{Decimal} |
@code{type[type,..,type]} ****

