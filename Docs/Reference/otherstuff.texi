==== Default Values @anchor{defaultValues} @cindex{type,record
constructor!default values} @cindex{default values,record constructor}

It is permitted to associate a @emph{default value} with a field of an
record constructor. A default value is simply an expression for an
attribute that is used should a particular record literal expression
(see @var{recordLiteral}) not contain a value for that field.

For example, for convenience, we might add @code{default} annotations
in the @code{twoThree} type defined above, resulting in the type
definition in @var{twoThreeDef}.

@anchor{twoThreeDef} .A @code{twoThree} tree type with defaults
@example
all s ~~ twoThree[s] ::= three{ left:twoThree[s]; left default =
  empty; label:s; right:twoThree[s]; right default = empty; } or two{
  left:twoThree[s]; left default = empty; right:twoThree[s]; right
  default = empty; } or empty;


@quotation NOTE
@cindex{expressions,default} @cindex{variable,scope} A default value
expression for an attribute is evaluated in the scope that is valid
for the type definition itself. The default value expression may
reference variables that are in scope at the point of type
definition. The default value expression may also reference
@emph{other} fields of the record constructor -- as though they were
variables -- provided that they themselves do not have @code{default}s
associated with them.

For example, in this definition of @code{Person}:
@example
Person ::= someone{ name:string; dob:date; age:()=>float; age()
  default => now()-dob; }

there is a @code{default} definition of the @code{age} field that is
used if a given @code{someone} record literal does not mention a value
for @code{age}. This @code{default} definition makes use of the
@code{dob} field as though it were a free variable of the @code{age}
function.


==== Defaults of @code{var} Fields @cindex{expressions,default!assignable
field} @cindex{var field@@code{var} field,default value}

To declare a @code{default} value for a @code{var} field, the form:
**** @var{Identifier} default := @var{Expression} ****

should be used. For example, in the type:
@example
account ::= account{ balance:var integer; balance default := 0 }

the @code{balance} field is a @code{var} field, and its default value
is @code{0}.
