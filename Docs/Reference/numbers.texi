@node Numbers
@chapter Numbers
@cindex expressions,arithmetic

The basis of arithmetic expressions are several contracts: the
@code{arith} contract which provides definitions of the familiar
@emph{calculator} functions of @code{+}, @code{-}, @code{*} and
@code{/}.

In addition, there is an extended set of mathematical functions for
trigonometry, bit string manipulation and so on.

@node Numeric Types
@section Numeric Types

@node Implemented Arithmetic Contracts
@section Implemented Arithmetic Contracts
@cindex contract, implemented for @code{integer} and @code{float}

@node Arithmetic for Integers
@subsection Arithmetic for Integers

The @code{arith} contract is implemented for @code{integer}
values. See @refer{arithContractProg}.

@node Arithmetic for Floating Points
@subsection Arithmetic for Floating Points

@node Display for @code{integer}
@subsection Display for @code{integer}

@node Format for @code{integer}
@subsection Format for @code{integer}

The format string for @code{integer} values determines how the number is
formatted. For example, the result of
@example
"--$(-15):-   0;--"
@end example
is
@example
"--  -15--"
@end example

The grammar for legal formatting codes for integral values may be
given in the regular expression:
@example
@code{[P+-]?([09 ,.])+[P+-]}
@end example

I.e., a sign specification, followed by digit specifications
optionally mixed with thousands markers and periods, terminated by an
optional sign specification.

The complete list[formatting] codes for formatting numeric values is:

@table @code
@item 9
A digit is displayed if it is significant. I.e., if it is non-zero
or there is a non-zero digit to the left of the digit.

@item 0
A zero character is used for numeric values. It always results in a
digit being displayed. For example, the value of
@example
"--$(5):00;--"
@end example
is the string
@example
"--05--"
@end example

@item space
A space character is similar to the @code{0} code; except that a
leading space is displayed instead of a leading zero.

For example, the value of
@example
"--$(5): 0;--"
@end example
is the string
@example
"-- 5--"
@end example

@quotation Note
Signs are treated specially with the space code: any produced sign
character is migrated past leading spaces -- with the result that the
sign character is always abutted to the digits.
For example, the result of
@example
"--$(-15):-   0;--"
@end example
is
@example
"--  -15--"
@end example

The space code is especially useful for lining up columns of figures
where a leading space is preferred over leading zeroes.
@end quotation

@item .
A period is displayed if there is a digit to the left.

This is used for showing currency values -- when they are represented
internally as pennies but should be displayed as dollar values -- and
for floating point numbers.

@item ,
A comma is displayed if there is a digit to the left.

This is used for displaying values in the @emph{thousands}
notation. For example, the value of
@example
"--$(120345567):999,999,999,999;--"
@end example
is the string:
@example
"--120,345,567--"
@end example

@item -
Is used to control how signed values are presented. If the value is negative then a @code{-} character is displayed; if the value is positive then a space is displayed.

@quotation Note
The @code{-} format code may appear at either end of the display. A
leading @code{-} results in the sign being displayed at the beginning
-- before any digits -- and a trailing @code{-} results in the sign
appended to the end.
@end quotation

@quotation Warning
If no @emph{sign} code is present in the format specification then
nothing is displayed if the value is positive or negative.
@end quotation

@item +
Always results in a sign being displayed. If the value is negative
then a @code{-} character is displayed; otherwise a @code{+} character
is displayed.

Like the @code{-} code, the @code{+} may appear at either end of the
display format.

@item P
The @code{P} code uses parentheses on either end of the value to
indicate a negative value. If the value is positive then spaces are
appended to either end; otherwise the number is enclosed in
@code{()}s.

@quotation Note
The @code{P} code should be placed at @emph{both} ends of the format
specification.  For example, the expression:
@example
"Balance: $(Amnt):P999900.00P; remaining"
@end example

where @code{Amnt} had value -563 would result in
@example
"Balance: (05.63) remaining"
@end example
@end quotation

@item X
Causes the integer to be formatted as a hexadecimal number; and a
hexadecimal digit is displayed if it is significant. I.e., if it is
non-zero or there is a non-zero digit to the left of the digit.

For example, this can be used to display the Unicode equivalent of a character:
@example
"Unicode: $(C)/$(C::integer):XXXXX;"
@end example
@end table

@node Display for @code{float}
@subsection Display for @code{float}

@node Format for @code{float}
@subsection Format for @code{float}

The grammar for legal formatting codes for @code{float} values is a little more complex:
@example
[P+-]?[09 ,.]+([eE][+-]?[09 ]+)?[P+-]?
@end example

I.e., the format string for @code{float} values permits the exponent
to be printed as well as the mantissa. If the exponent part is missing
and if the @code{float} value cannot be represented in the available
precision without an exponent then an exception will be @code{raised}.

@node Arithmetic Functions
@section Arithmetic Functions

@node @code{abs} -- absolute value
@subsection @code{abs} -- absolute value
@findex @code{abs} function.

@example
abs : all t ~~ arith[t],comp[t] |: (t)=>t.
@end example

The @code{abs} function returns the absolute value of its argument. It
depends on both teh @code{arith} and the @code{comp} contracts, hence
is implemented for both @code{integer} and @code{float} values.

@node Bit Manipulation Functions
@section Bit Manipulation Functions
@anchor{bitString}

The bit manipulation functions treat @code{integer} values as 64-bit
bit strings.

@node @code{.&.} Bit-wise Conjunction
@subsection @code{.&.} Bit-wise Conjunction
@findex @code{.&.} function
@example
(.&.) : (integer,integer)=>integer.
@end example

The @code{.&.} operator returns the bit-wise conjunction of two
@code{integer} values.

@node @code{.|.} Bit-wise Disjunction
@subsection @code{.|.} Bit-wise Disjunction
@findex @code{.|.} function
@example
(.|.)  : (integer,integer)=>integer.
@end example

The @code{.|.} operator returns the bit-wise disjunction of two
@code{integer} values.

@node @code{.^.} Bit-wise Exclusive-or
@subsection @code{.^.} Bit-wise Exclusive-or
@findex @code{.^.} function
@example
(.^.)  : (integer,integer)=>integer.
@end example

The @code{.^.} operator returns the bit-wise exclusive of two
@code{integer} values.

@node @code{.<<.} Bit-wise Left Shift
@subsection @code{.<<.} Bit-wise Left Shift
@findex @code{.<<<.} function

@example
(.<<.) : (integer,integer)=>integer.
@end example

The @code{.<<.} operator left-shifts the left hand argument by the
number of bits indicated in the right argument. It is effectively
multiplication by a power of 2.

@node @code{.>>.} Bit-wise Arithmetic Right Shift
@subsection @code{.>>.} Bit-wise Arithmetic Right Shift
@findex @code{.>>.} function
@example
(.>>.) : (integer,integer)=>integer.
@end example

The @code{.>>.} operator right-shifts the left hand argument by the
number of bits indicated in the right argument. The most significant
bit is replicated in the shift. It is effectively division by a power
of 2.

@node @code{.>>>.} Bit-wise Logical Right Shift
@subsection @code{.>>>.} Bit-wise Logical Right Shift
@findex @code{.>>>.} function
@example
(.>>>.) : (integer,integer)=>integer.
@end example

The @code{.>>>.} operator right-shifts the left hand argument by the
number of bits indicated in the right argument. The most significant
bits of the result are replaced by zero. This operator is sometimes
known as logical right shift.

@node @code{.~.} Bit-wise Logical Complement
@subsection @code{.~.} Bit-wise Logical Complement
@findex @code{.~.} function
[[bitComplement]]
@example
(.~.) : (integer)=>integer.
@end example

The @code{.~.} operator forms the logical or 1s complement of its argument.

@node @code{.#.} Bit Count
@subsection @code{.#.} Bit Count
@findex @code{.#.} function
@example
(.#.) : (integer)=>integer.
@end example

The @code{.#.} operator computes the number of non-zero bits in its argument.

@node Trigonometry Functions
@section Trigonometry Functions

@quotation
All the trig functions assume that the angles that they accept (or
return) are expressed in radians.
@end quotation

@node @code{sin} -- Sine Function
@subsection @code{sin} -- Sine Function
@example
sin : (float) => float.
@end example

The @code{sin} function returns the Sine of its argument -- expressed
in radians.

@node @code{asin} -- Arc Sine Function
@subsection @code{asin} -- Arc Sine Function
@example
asin : (float) => float.
@end example

The @code{asin} function returns the Arc Sine of its argument --
expressed in radians.

@node @code{cos} -- Cosine Function
@subsection @code{cos} -- Cosine Function
@example
cos : (float) => float.
@end example

The @code{cos} function returns the cosine of its argument --
expressed in radians.

@node @code{acos} -- Arc Cosine Function
@subsection @code{acos} -- Arc Cosine Function
@example
acos : (float) => float.
@end example

The @code{acos} function returns the arc cosine of its argument --
expressed in radians.

@node @code{tan} -- Tangent Function
@subsection @code{tan} -- Tangent Function
@example
tan : (float) => float.
@end example

The @code{tan} function returns the tangent of its argument --
expressed in radians.

@node @code{atan} -- Arc Tangent Function
@subsection @code{atan} -- Arc Tangent Function
@example
atan : (float) => float.
@end example

The @code{atan} function returns the Arc Tangent of its argument --
expressed in radians.

@node @code{min} -- minimum value
@subsection @code{min} -- minimum value
@findex @code{min} function
@example
min: all t ~~ comp[t] |: (t,t)=>t.
@end example

The @code{min} function returns the smaller of its two arguments. It
is defined on top of the @code{comp} contract.

@node @code{max} -- maximum value
@subsection @code{max} -- maximum value
@example
max: all t ~~ comp[t] |: (t,t)=>t.
@end example

The @code{max} function returns the larger of its two arguments.

@node @code{sqrt} -- square root
@subsection @code{sqrt} -- square root
@example
sqrt : (float)=>float
@end example

The @code{sqrt} function returns the square root of its argument. If
the argument is negative, the returned value is undefined.

@node @code{ceil} -- ceiling
@subsection @code{ceil} -- ceiling
@example
ceil : (float)=>float
@end example

The @code{ceil} function returns the nearest integral value that is
equal to or larger than X.
@quotation Note
For integral types,
@example
ceil(X)=X
@end example
@end quotation

@node @code{floor} -- floor
@subsection @code{floor} -- floor
@example
floor : (float)=>float
@end example

The @code{floor} function returns the nearest integral value that is
equal to or smaller than X.
@quotation Note
For integral types,
@example
floor(X)=X
@end example
@end quotation

@node @code{trunc} -- round to closest integral
@subsection @code{trunc} -- round to closest integral
@example
trunc : (float)=>float
@end example

The @code{trunc} function returns the nearest integral value to its argument.

@node @code{log} -- Natural Logarithm
@subsection @code{log} -- Natural Logarithm
@example
log : (float)=>float
@end example

The @code{log} function returns the natural logarithm of its argument.

@node @code{log10} -- Logarithm Base 10
@subsection @code{log10} -- Logarithm Base 10
@example
log10 : (float)=>float
@end example

The @code{log10} function returns the base 10 logarithm of its argument.

@node @code{exp} -- Natural Exponentiation
@subsection @code{exp} -- Natural Exponentiation
@example
exp has type for all t such that (t)=>t where math over t
@end example

The @code{exp} function returns the value $e^X$.

@node @code{random} -- random number generation
@subsection @code{random} -- random number generation
@cindex random number generation
@example
random : (float)=>float
@end example

The @code{random} function returns a number in the half-open range
[0,X) where X is the argument of the function.
@quotation
The argument of the @code{random} function must be a positive
number. However, it can be any @emph{normal} kind of arithmetic value.
@end quotation
The number generated is the next in a sequence of numbers that is
typically pseudo-random: i.e., not actually random but statistically
indistinguishable from random.

@node @code{**} -- exponentiation
@subsection @code{**} -- exponentiation
@example
(**) : (float,float) => float
@end example

The @code{**} function raises the first argument to the power of the second.

For example, the expression
@example
X**3.0
@end example

denotes the cube of @code{X}.

