{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
%=== Type Cast Expression\
%[[typeCastExpression]]\
%(((expressions,type cast)))\
%(((type cast,expression)))\
%(((as@`as`,expression)))\
%A <<TypeCastExpression>> expression marks an explicit declaration of the type of an expression. It also delays actual type checking of the castee to runtime.\
%\
%\\begin\{figure\}[htbp]\
%\\begin\{eqnarray*\}\
%[[TypeCastExpression]]TypeCastExpression::=<<Expression>>\\ `cast`\\ <<Type>>\
%\\end\{eqnarray*\}\
%.Type Cast Expression\
%[[typeCastExpressionFig]]\
%\\end\{figure\}\
%\
%==== Type Safety\
%A type cast is an inherently dynamic operation; as far as type consistency is concerned the only constraint on the type of the left hand side is that its value is consistent with the declared type.\
%\
%In effect, the type consistency check may be delayed until the expression is actually evaluated.\
%\
%However, the declared type may be assumed to be the type of the cast expression -- a fact that may be used by the type checker.\
%\
%\\begin\{prooftree\}\
%\\AxiomC\{\\typeprd\{E\}\{Ex\}\{T\\sub\{Ex\}\}\}\
%\\AxiomC\{\\entail\{E,\\theta\\sub0\}\{T\\subsume T\\sub\{Ex\}\\leadsto\\theta\\sub\{o\}\}\}\
%\\BinaryInfC\{\\typeprd\{E\}\{Ex` cast `T\}\{T\}\}\
%\\end\{prooftree\}\
%\
%\\begin\{aside\}\
%A type cast expression only `makes sense' in a few situations: for example, if either the cast type is type `any` or the type of the castee expression is of type `any`.\
%\
%This is because type consistency is based on type equality and the only legitimate form of type casting is where the value already has the correct type.\
%\
%However, using type casting with type `any` allows so-called _heterogenous_ structures where they would not ordinarily be permitted.\
%\
%For example, the `list` expression:\
%[listing]\
%list of [1, "alpha", list of []]\
%\
%is not valid because the types of the elements of the type are not consistent. But, the expression:\
%[listing]\
%list of [1 cast any, "alpha" cast any, list of [] cast any]\
%\
%_is_ valid, is actually of type `list[any]`. However, in order to `unwrap' elements of the list it will generally be required to `cast` the elements back out of the `any` type.\
%\\end\{aside\}\
%}