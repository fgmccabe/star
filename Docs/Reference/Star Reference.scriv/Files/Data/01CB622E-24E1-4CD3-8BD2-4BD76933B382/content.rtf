{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 For an 
\i AlgebraicType
\i0  definition to be safe requires a constraint on type variables within the definition. In particular, it is not permitted to introduce a type variable in any of the constructors in the definition.\
[NOTE] Specifically, any unbound type variables mentioned in a type definition must also occur within the TypeSpec or be bound by an enclosing type quantifier.\
For example, the type definition:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 all t ~~ opaque ::= op(t)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 is not valid because the type variable 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  mentioned in the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 op
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  constructor is not mentioned in the 
\i TypeSpec
\i0 .\
[NOTE] The reason for this is that type safety cannot be guaranteed for such constructors. For example, consider the invalid function:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 badOp(op(23)) => false
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The type signature for 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 badOp
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 badOp:(opaque)=>boolean
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 and, according to type inference rules, an expression such as:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 badOp(op("alpha"))
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 would be type safe. However, this expression will lead to a run-time failure when the integer 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 23
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is compared against the string 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 "alpha"
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 .\
[NOTE] Note that the converse case, where a type variable is mentioned in the 
\i TypeSpec
\i0  is not mentioned in a constructor defined within the type definition is perfectly valid.\
It 
\i is
\i0  possible to have type variables mentioned in a constructor that are not defined in the 
\i TypeSpec
\i0 . The constraint is that such type variables must be closed by quantification.\
For example, the type definition:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 univ ::= univ(all t ~~ t)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 is a legally valid 
\i AlgebraicType
\i0  definition; albeit one that is quite restricted. Locally quantified types are usually associated with function types:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 uniFun ::= uniFun(all t ~~ (t,t)=>t)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 which describes a term constructor `uniFun` that expects a generic function as an argument.\
}