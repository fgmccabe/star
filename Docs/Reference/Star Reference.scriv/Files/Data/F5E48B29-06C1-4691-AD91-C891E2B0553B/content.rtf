{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
==== Evaluation Semantics\
As noted above, the primary guarantee that a `memo` function offers is that it's expression is only evaluated once.\
\
An expression of the form:\
[listing][escapechar=|]\
memo |<<Expression>>|\
\
denotes a function value. Each time the `memo` expression is evaluated a new function value is `created'. In this regard, a `memo` function is no different to an `ordinary' anonymous function.\
\
\\begin\{aside\}\
The only sense in which it makes a material difference how `memo` functions are computed is through the binding of free variables within the`memo`'d expression.\
\
In general, each evaluation of a `memo` function -- or a `function` expression -- may result in different bindings for free variables within the <<Expression>>.\
\
If the function has no free variables then the compiler _may_ simply construct a static entity for the function.\
\\end\{aside\}\
\
When a `memo` function is entered then one of three possibilities may occur: either the `memo` function has never been entered, the `memo` function has already returned a value or there is a concurrent activity that is computing `within' the function.\
\
\\begin\{itemize\}\
\\item If the `memo` function has never been entered before then its expression is evaluated, recorded internally within the function, and the computed value is returned as the value.\
\\item If the `memo` function has previously returned then the recorded value is returned.\
\\item If the `memo` function is currently being computed then the call is blocked until the ongoing computation is completed. At which point the call is handled in the same way as a subsequent call to the `memo` function.\
\\end\{itemize\}\
\
==== Type Safety\
The type of a `memo` function is determined by the type of the memo'd expression:\
\
\\begin\{prooftree\}\
\\AxiomC\{\\typeprd\{E\}\{M\}\{T\\sub\{M\}\}\}\
\\UnaryInfC\{\\typeprd\{E\}\{`memo`\\ M\}\{`()=>`T\\sub\{M\}\}\}\
\\end\{prooftree\}\
\
=== Value Expressions\
[[valueExpression]]\
(((valof expression@`valof` expression)))\
(((expressions,valof@`valof`)))\
\
The `valof` expression computes a result based on the execution of a sequence of actions; the last (executed) action being a `valis` action.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[ValueExpression]]ValueExpression::=`valof`\\ <<ActionBlock>>\\\\\
  | `valof`\\ <<Expression>>\
\\end\{eqnarray*\}\
.Valof Expressions\
[[valueExpressionFig]]\
\\end\{figure\}\
\
There may be a number of actions within the `valof` action; however, when a `valis` action is executed the `valof` is terminated and the value of the `valof` expression is the value associated with the `valis` action.\
\
\\begin\{aside\}\
Each `valof` expression must contain at least one `valis` action. The execution of any of the `valis` actions terminates the `valof` itself; it acts much like a `return` in other programming languages.\
\\end\{aside\}\
\
The `valof` expression is useful for those occasions where it is necessary to side-effect some variable as part of evaluation of an expression. The classic example of this is the counter, as illustrated in Program~\\vref\{counterProg\}.\
\\begin\{program\}\
[listing]\
var Count := 0;\
counter has type ()=>integer;\
counter() is valof\{\
  Count := Count+1;\
  valis Count\
\};\
\
.A Counting Program[[counterProg]]\
\\end\{program\}\
\\begin\{aside\}\
Although the `valof` expression form _allows_ functions to be written in a procedural style, their use should be minimized to those cases where it is essential. In general, procedural programs are harder to debug and maintain and, furthermore, limit the potential for highly parallel execution.\
\\end\{aside\}}