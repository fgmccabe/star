{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 An existential type denotes an 
\i abstract
\i0  type.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f0\i\fs26 ExistentialType ::= 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 exists
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  BoundType,..,BoundType 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ~~ 
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 Type\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sa160\pardirnatural\qc\partightenfactor0

\f1\i0\fs24 \cf0 <!$Scr_Ps::0><$Scr_Ps::1>
\f0\fs26 Existential Type Expression\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::1>
\f0\fs26 An existentially quantified type denotes a type within which there is an 
\i abstract type
\i0 : i.e., the type exists but the expression is not explicit about which type.\
Existential types are most often used in the type signatures of abstract data types. For example, the term in the statement:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::2>
\f2\fs22 R = \{\
  type el = integer\
  op(X,Y) => X+Y\
\}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::2>
\f0\fs26 has type:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::2>
\f2\fs22 exists el ~~ \{ el :: type; op:(el,el)=>el \}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::2>
\f0\fs26 [NOTE] Note that the fact that within the record the type 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 el
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  is identified as 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 integer
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  does not escape the record itself. Externally, the existence of the type is known but not what it is.\
It is permissible to refer to the type within the record by a dot reference.\
[TIP] Existentially quantified types are generally not inferred for variables: i.e., if a variable has an existential type then that must be explicitly annotated.\
Existential types are inferred, however, for 
\i Record
\i0 s that contain a 
\i TypeDefinition
\i0  statement.}