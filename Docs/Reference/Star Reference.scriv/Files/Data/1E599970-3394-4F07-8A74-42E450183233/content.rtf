{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 A 
\i RecordType
\i0  is a type expression that denotes a named association of fields and types. A record type is written as a sequence of type annotations enclosed in braces.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f0\i\fs26 RecordType ::=  
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 \{
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 Annotation
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22  ;
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  .. 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ;
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 Annotation 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 \}
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 \
TypeEquality ::= 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 type
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  Identifier 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 =
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  Type\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sa160\pardirnatural\qc\partightenfactor0

\f1\i0\fs24 \cf0 <!$Scr_Ps::0><$Scr_Ps::1>
\f0\fs26 Record Type\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::1>
\f0\fs26 Record types are used as the type of anonymous records (see <<anonRecord>>). They are also the basis of other features of the type language -- including the 
\i ConstructorType
\i0  and 
\i Contracts
\i0 .\
Two record types are equivalent if their elements are pair-wise equivalent. Note that the 
\i order
\i0  of elements is not important. For example, given the types:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::2>
\f2\fs22 \{a:string . b:integer \}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::2>
\f0\fs26 and\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::2>
\f2\fs22 \{b:integer . a:t \}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::2>
\f0\fs26 these types unify -- assuming that 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  is a bound type variable, provided that 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  is unifiable with 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 string
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26 .\
[NOTE] All user-defined types -- i.e., types defined by an 
\i AlgebraicType
\i0  definition -- have a 
\i RecordType
\i0  interface associated with them. This, as is detailed in <<algebraicInterface>>, defines a type for all of the fields in any of the constructors for the type. In turn, this permits a 
\i RecordAccess
\i0  expression to apply to a user-defined type as well as a 
\i RecordType
\i0 .}