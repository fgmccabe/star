{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 %!TEX root = reference.tex\
= JSON\
(((JSON\}\\index\{Using the JSON type)))\
\
The JSON Infoset type, or just `json` type, allows values to be represented in a way that is easily digestible by many web-based tools -- including browsers. The `json` type is semantically equivalent to the JSON structure defined in \\cite\{rfc4627\}. However, the `json` type represents a statically typed representation of JSON values.\
\
In addition to basic handling of JSON values, Star provides a form of path notation that allows `json` values to be probed and updated.\
\
== The `json` Type\
[[infosetType]]\
(((json type@`json` type)))\
\
Program~\\vref\{infosetProg\} defines the `json` type.\
\\begin\{program\}\
[listing]\
type json is\
      iFalse or\
      iTrue or\
      iNull or\
      iColl(dictionary of (string,json)) or\
      iSeq(list[json]) or\
      iText(string) or\
      iNum(long) or\
      iFlt(float);\
\
.The `json` Type[[infosetProg]]\
\\end\{program\}\
\
\\begin\{aside\}\
JSON values are not strongly typed in the sense that the value associated with the `Width` of the `Thumbnail` is a string even though one might expect widths to be integral. However, JSON values are checked to be consistent with the `json` type -- like all other values.\
\\end\{aside\}\
\
For example, the JSON value:\
[listing]\
\\\{\
  "Image": \\\{\
    "Width":  800,\
    "Height": 600,\
    "Title":  "View from 15th Floor",\
    "Thumbnail": \\\{\
      "Url":    "http://www.example.com/image/481989943",\
      "Height": 125,\
      "Width":  "100"\
    \\\},\
    "IDs": [116, 943, 234, 38793]\
  \\\}\
\\\}\
\
can be represented using the `json` value shown in <<infosetEx>>.\
\
\\begin\{figure\}[hbt]\
[listing]\
iColl(dictionary of [\
  "Image" -> iCol(dictionary of [\
    "Width" -> iNum(800l),\
    "Height" -> iNum(600l),\
    "Title" -> iText("View from 15th Floor"),\
    "Thumbnail" -> iColl(dictionary of [\
      "Url" -> iText("http://www.example.com/image/481989943"),\
      "Height" -> iNum(125l),\
      "Width" -> iText("100")\
    ]),\
    "IDs" -> iSeq(list of [\
      iNum(116l), iNum(943l), iNum(234l), iNum(38793)\
    ])\
  ])])\
\
.An Example `json` Value\
[[infosetEx]]\
\\end\{figure\}\
\
\\begin\{aside\}\
The JSON standard specification is mute on the topic of numeric precision. We choose to represent integers as `long` values and floating point values as `float` (which is equivalent to `double` precision arithmetic).\
\\end\{aside\}\
\
== Infoset paths\
[[infoPath]]\
(((path access to json@path access to `json`)))\
\
Infoset values are typically deeply nested structures involving both accessing dictionary-like collections and arrays. In order to make working with `json` values simpler we introduce the concept of an json path -- an `infoPath`.\
\
An `infoPath` is a list[path] elements -- each of which represents either an index into a sequence of `json` elements or the name of a member of a collection of elements. This is captured in the definition of the `infoPathKey`, as defined in Program~\\vref\{infoPathProg\}.\
\\begin\{program\}\
[listing]\
type infoPathKey is kString(string) or kInt(integer);\
\
type infoPath is alias of list[infoPathKey];\
\
.The `infoPathKey` and `infoPath` Types[[infoPathProg]]\
\\end\{program\}\
\
For example, the path expression that denotes the url of the thumbnail in <<infosetEx>> is:\
[listing]\
list of [kString("Image"), kString("Thumbnail"), kString("Url")]\
\
and the path that denotes the first id from the `IDs` sequence is:\
[listing]\
list of [kString("Image"), kString("IDs"), kInt(0)]\
\
\
Infoset paths are used in several of the functions that are defined on `json` values.\
\
== Standard Functions on Infoset Values\
(((json@`json`,standard functions)))\
Several contracts are implemented for `json` values; including `indexable`, `iterable`, `indexed\\_iterable`, `pPrint` and `coercion`.\
\
=== `\\_index` access to `json`\
(((json@`json`,standard functions!_index@`\\_index`)))\
(((_index@`\\_index`)))\
\
The `\\_index` function applies an `infoPath` to an `json` to obtain a portion of the `json` value. It's type is:\
[listing]\
\\_index has type (infoPath,json)=>json\
\
`\\_index` is part of the `indexable` contract -- see <<indexableContract>>.\
\
For example, the value of the first element of the value shown in <<infosetEx>> is gotten with the expression (assuming that the value is bound to the variable `I`:\
[listing]\
I[list of [kString("Image"), kString("IDs"), kInt(0)]]\
\
This has value\
[listing]\
iNum(116L)\
\
\
\\begin\{aside\}\
The above expression is a synonym of\
[listing]\
\\_index(I,list of [kString("Image"), kString("IDs"), kInt(0)])\
\
\\end\{aside\}\
\
=== `\\_set\\_indexed` -- Set a Value in an `json`\
(((json@`json`,standard functions!_set_indexed@`\\_set\\_indexed`)))\
(((_set_indexed@`\\_set\\_indexed`)))\
\
The `\\_set\\_indexed` function updates a value in an `json` -- depending on a path -- and returns the updated `json`.\
The type of `\\_set\\_indexed` is given by:\
\\begin\{spec\}\
\\_set\\_indexed has type (json,info path,json)=>json\
\\end\{spec\}\
`\\_set\\_indexed` is part of the `indexable` contract.\
\
\\begin\{aside\}\
This function does not update the original; it returns a new value.\
\\end\{aside\}\
\
To use this function to change the title of the value in <<infosetEx>> (again assuming that it is bound to an updateable variable `I`) one might use the action:\
[listing]\
I[list of [kString("Image"), kString("Title")]] := iText("A Better One")\
\
which is a synonym for the action:\
[listing]\
I := I[list of [kString("Image"), kString("Title")]->iText("A Better One")]\
\
which, in turn, is a synonym for:\
[listing]\
I := \\_set_indexed(I,list of [kString("Image"),kString("Title")],\
                  iText("A Better One"))\
\
\
=== `\\_delete\\_indexed` -- Remove a Value from an `json`\
(((json@`json`,standard functions!_delete_indexed@`\\_delete\\_indexed`)))\
(((_delete_indexed@`\\_delete\\_indexed`)))\
\
The `\\_delete\\_indexed` function removes a value in an `json` -- depending on a path -- and returns the modified `json`.\
\\begin\{aside\}\
This function does not update the original; it returns a new value.\
\\end\{aside\}\
The type of `\\_delete\\_indexed` is given by:\
[listing]\
\\_delete\\_indexed has type (json,info path)=>json\
\
`\\_delete\\_indexed` is part of the `indexable` contract.\
\
To use this function to remove the last ID from `IDs` in <<infosetEx>> one might use the action:\
[listing]\
remove I[list of [kString("Image"), kString("IDs"), kInt(3)]]\
\
which is a synonym for the action:\
[listing]\
I := I[without list of [kString("Image"),kString("IDs"), kInt(3)]]\
\
\
=== `\\_index\\_member` -- Test a Path in an `json`\
(((json@`json`,standard functions!_index_member@`\\_index\\_member`)))\
(((_index_member@`\\_index\\_member`)))\
\
The `\\_index\\_member` pattern succeeds if there is a designated element of the `json` and matches it against a pattern.\
\
The type of `\\_index\\_member` is given by:\
[listing]\
\\_index\\_member has type (json)<=(json,infopath)\
\
`\\_index\\_member` is part of the `indexable` contract.\
\
The `\\_index\\_member` pattern is typically used in query conditions; such as:\
[listing]\
if I[list of [kString("Image")]] matches L then\
\
This is equivalent to the condition:\
[listing]\
if (I,list of [kString("Image")]) matches \\_index\\_member then\
\
\
=== `\\_iterate` -- Over an `json`\
(((json@`json`,standard functions!_iterate@`\\_iterate`)))\
(((_iterate@`\\_iterate`)))\
\
The `\\_iterate` function is used when iterating over the elements of an `json`.\
\
The type of `\\_iterate` is given by:\
[listing]\
\\_iterate has type for all s such that\
  (json,(json,IterState of s)=>IterState of s,\
   IterState of s) => IterState of s\
\
The `\\_iterate` function is part of the `iterable` contract -- see <<iterableContract>>.\
\
The `json` variant of the `\\_iterate` function calls the `client function' for all of the `leaf' elements of an `json` value. For example, in the condition:\
[listing]\
X in I\
\
where `I` is the `json` value shown in <<infosetEx>>, then the client function will be called successively on the `json` values:\
[listing]\
iNum(800l)\
iNum(600l)\
iText("View from 15th Floor")\
iText("http://www.example.com/image/481989943")\
iNum(125l)\
iText("100")\
iNum(116l)\
iNum(943l)\
iNum(234l)\
iNum(38793)\
\
The query:\
[listing]\
list of \\\{ all X where iText(X) in I \\\}\
\
will have value:\
[listing]\
list of [\
  "View from 15th Floor",\
  "http://www.example.com/image/481989943",\
  "100"\
]\
\
\
=== `\\_indexed\\_iterate` -- Over an `json`\
(((json@`json`,standard functions!_indexed_iterate@`\\_indexed\\_iterate`)))\
(((_indexed_iterate@`\\_indexed\\_iterate`)))\
\
The `\\_indexed\\_iterate` function is used when iterating over the elements of an `json`. A key difference between this and `\\_iterate` is that `\\_indexed\\_iterate` involves the paths to each of the leaf elements of the JSON value.\
\
The type of `\\_indexed\\_iterate` is given by:\
[listing]\
\\_indexed\\_iterate has type for all s such that\
  (json,(infoPath,json,IterState of s)=>IterState of s,\
   IterState of s) => IterState of s\
\
The `\\_indexed\\_iterate` function is part of the `indexed\\_iterable` contract -- see <<iterableContract>>.\
\
The `\\_indexed\\_iterate` function calls the `client function' for all of the `leaf' elements of an `json` value; providing an `infoPath` expression for each leaf element processed.\
\
The `\\_indexed\\_iterate` function is typically used in conditions of the form:\
[listing]\
K -> V in I\
\
where `K` is a pattern that matches the key (`infoPath`), `V` is a pattern that matches the (leaf) value, and `I` is the `json` being queried.\
\
For example, in the condition:\
[listing]\
K->V in I\
\
where `I` is the `json` value shown in <<infosetEx>>, then the client function will be called successively on the `infoPath->json` values:\
[listing]\
list of [kString("Image"), kString("Width")] -> iNum(800l)\
list of [kString("Image"), kString("Height")] -> iNum(600l)\
list of [kString("Image"), kString("Title")] ->\
       iText("View from 15th Floor")\
list of [kString("Image"), kString("Thumbnail"), kString("Url")] ->\
       iText("http://www.example.com/image/481989943")\
list of [kString("Image"), kString("Thumbnail"), kString("Height")] ->\
       iNum(125l)\
list of [kString("Image"), kString("Thumbnail"), kString("Width")] ->\
       iText("100")\
list of [kString("Image"), kString("IDs"), kInt(0)] -> iNum(116l)\
list of [kString("Image"), kString("IDs"), kInt(1)] -> iNum(943l)\
list of [kString("Image"), kString("IDs"), kInt(2)] -> iNum(234l)\
list of [kString("Image"), kString("IDs"), kInt(3)] -> iNum(38793)\
\
The `\\_indexed\\_iterate` function is therefore useful when you want to both process all the leaves in an `json` but also to know where they are.\
\
\
== Parsing and Displaying\
The standard contract for displaying values -- `pPrint` -- is implemented for the `json` type. In addition, a `string` value may be parsed as a `json` by using the coercion expression:\
[listing]\
"\\\{"Id" : 34 \\\} as json\
\
has value:\
[listing]\
iColl(dictionary of \\\{ "Id" -> iNum(34L) \\\})\
\
\
=== `ppDisp` -- Display a `json` Value\
The `pPrint` contract is implemented for `json` values. The type of `ppDisp` is given by:\
[listing]\
ppDisp has type (json)=>pP\
\
The `pPrint` contract is described in <<pPrintContract>>. This implementation means that when a `json` value is displayed, it is shown in legal JSON syntax.\
}