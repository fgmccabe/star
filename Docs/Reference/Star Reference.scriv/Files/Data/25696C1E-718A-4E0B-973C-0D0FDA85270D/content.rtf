{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Accessing Elements of a Collection\
[[indexedAccess]]\
(((indexed access to collection)))\
(((access list with index)))\
An expression of the form:\
[listing]\
C[ix]\
\
is equivalent to the expression\
[listing]\
_index(C,ix)\
\
\\begin\{aside\}\
The type of the resulting value from an indexed access is `option`al -- see <<optionExpression>>. I.e., since it cannot be guaranteed -- in general -- that the element exists, the resulting type expresses that uncertainty.\
\
You can extract the underlying value by using the `someValue` function -- see <<someValue>> -- but a safer way is to use a `has value` condition (see <<hasValueCond>>.\
\\end\{aside\}\
\
The presence of an element can be tested in one of two ways: by using the `present` predicate -- see <<presentCond>>:\
[listing]\
present C[Ix]\
\
which tests whether `C` has an element at index `Ix` or using the special condition:\
[listing]\
C[Ix] has value V\
\
which are equivalent to\
[listing]\
_index(C,Ix) matches some(_)\
\
and\
[listing]\
_index(C,Ix) matches some(V)\
\
respectively.}