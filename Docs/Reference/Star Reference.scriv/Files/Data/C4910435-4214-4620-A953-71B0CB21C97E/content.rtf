{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 String variable interpolation expressions may refer to variables that are in scope at the location of the string literal itself.\
\
The meaning of a string interpolation is slightly different for the two forms of interpolation. An expression of the form:\
[listing][escapechar=|]\
"|_prefix_|$(|_Exp_|)|_suffix_|"\
\
is interpreted as:\
[listing][mathescape=true]\
"$_prefix_$"++display($_Exp_$)++"$_suffix_$"\
\
whereas the expression:\
[listing][mathescape=true]\
"$_prefix_$\\#($_Exp_$)$_suffix_$"\
\
is interpreted as being equivalent to:\
[listing][mathescape=true]\
"$_prefix_$"++($_Exp_$ as string)++"$_suffix_$"\
\
\
\\begin\{aside\}\
The difference between `display` and `as` becomes most obviously apparent with `string`s themselves. Assuming that the variable `L` is bound to the `string` `"hello"`, the value of\
[listing]\
"alpha#(L)beta"\
\
is the string\
[listing]\
"alphahellobeta"\
\
whereas the value of\
[listing]\
"alpha$(L)beta"\
\
is\
[listing]\
"alpha\\"hello\\"beta"\
\
But in general, there may be many differences between the two forms of displayed value.\
\\end\{aside\}\
\
If a <<FormattingSpec>> is present, then the translation takes that into account also. For example, the expression:\
[listing][escapechar=|]\
"|_prefix_|$(|_Exp_|):|_Format_|;|_suffix_|"\
\
is equivalent to the expression:\
[listing][mathescape=true]\
"$_prefix_$"++_format($_Exp_$,$_Format_$)++"$_suffix_$"\
\
where `\\_format` is part of the `format` contract -- see <<formatContract>>.\
\
\\begin\{aside\}\
Note that this translation is the same for either the `\\$` or `\\#` interpolation form.\
\\end\{aside\}}