{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Conditional Expressions\
[[conditionalExpression]]\
(((expressions,conditional)))\
(((conditional expression)))\
\
A conditional expression applies a predicate <<Condition>> to decide whether or not to `take' the `then' branch or the `else' branch.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[ConditionalExpression]]ConditionalExpression::=`(`<<Condition>>`?`<<Expression>>`:`<<Expression>>`)`\
\\end\{eqnarray*\}\
.Conditional Expression\
[[conditionalExpressionFig]]\
\\end\{figure\}\
\
The value of a conditional expression depends on whether the <<Condition>> is satisfiable or not. If the <<Condition>> is satisfiable, then the expression is equivalent to the `then' branch of the conditional expression; otherwise it is equivalent to the `else' branch.\
\
For example, the expression:\
[listing]\
(P in members ? X>Y : X<Y)\
\
is equivalent to one of `X>Y` or `X<Y` depending on whether the <<Condition>>:\
[listing]\
P in members\
\
is satisfiable -- i.e., has at least one solution.\
\
The condition of a conditional expression may introduce variables, depending on the form of the condition -- for example, if the <<Condition>> is a <<SearchCondition>> condition like that above. These variables are `in scope' within the `then' part of the conditional expression but are _not_ in scope for the `else' part.\
\
\\paragraph\{Evaluation Order\}\
The only guarantees as to evaluation of a conditional expression are that\
\\begin\{enumerate\}\
\\item the conditional will be evaluated prior to evaluating either arm of the conditional\
\\item only one of the arms will be evaluated -- depending on the value of the condition.\
\\end\{enumerate\}}