{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
== Quoted Expressions\
[[quotedText]]\
\
The `quote` expression is used to `convert' a fragment of Star source text into a form that can be processed by Star programs.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[QuotedExpression]]QuotedExpression::=`quote(`<<QExpression>>`)`\\\\\
  | `<|`<<QExpression>>`|>`\\\\\
[[QExpression]]QExpression::=`unquote(`<<Expression>>`)`\\\\\
  | `?`<<Expression>>\\\\\
  | <<Expression>>\
\\end\{eqnarray*\}\
.Quoted Expressions\
[[quotedExpressionFig]]\
\\end\{figure\}\
\
\
(((quoted expression notation)))\
There are two forms of quoted forms: using the `quote` keyword -- together with the `unquote` keyword -- and special `<| |>` brackets -- with embedded `?` marks. Semantically they are identical; except that the latter is potentially a little easier to use.\
\
The `quote` expression takes the form:\
[listing][escapechar=$]\
quote($_SyntacticForm_$)\
\
Alternately, the special `<|` brackets `|>` may be used:\
[listing][mathescape=true]\
<|$_SyntacticForm_$|>\
\
The type of a `quote` expression is `quoted` -- whose description is shown in Program~\\vref\{quotedProg\}.\
\
_SyntacticForm_ may be any valid Star term; it is _not_ checked apart from correct use of operators. It does not have to be syntactically valid -- again, with the exception that operators must balance appropriately.\
\\begin\{aside\}\
One of the salient differences between the `quote` form of a quoted expression and the `<|` bracketed `|>` form is that the maximum priority of operators in the latter form is 2000 whereas it is 1000 within the `quote` form.\
\\end\{aside\}\
\
For example, the expression:\
[listing]\
<|A+45|>\
\
is equivalent to the expression:\
[listing][mathescape=true]\
applyAst(L$\\sub1$,nameAst(L$\\sub2$,"+"),[nameAst(L$\\sub3$,"A"), integerAst(L$\\sub4$,45)])\
\
Note that the various `L\\subi` refer to `astLocation` terms and that no check is made whether the `variable' `A` is defined or of the right type.}