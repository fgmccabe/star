{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== The Type of Abstract Syntax Terms\
The foundation of this is the standard `quoted` type which defines the structure of quoted fragments. The `quoted` type is defined in Program~\\vref\{quotedProg\} and the ancillary type `astLocation` is defined in Program~\\vref\{locationProg\}.\
\\begin\{program\}\
[listing]\
type quoted is nameAst(astLocation,string)\
            or boolAst(astLocation,boolean)\
            or stringAst(astLocation,string)\
            or integerAst(astLocation,integer)\
            or longAst(astLocation,long)\
            or floatAst(astLocation,float)\
            or decimalAst(astLocation,decimal)\
            or applyAst(astLocation,quoted,list[quoted])\
\
.The `quoted` Type[[quotedProg]]\
\\end\{program\}\
\
=== Locations\
The `quoted` forms include an `astLocation` field that indicates where the `quoted` term first appeared in a program. This type is defined in Program~\\vref\{locationProg\}.\
\\begin\{program\}[htb]\
[listing]\
type astLocation is _someWhere\{\
    source has type uri;\
    charCount has type integer;\
    lineCount has type integer;\
    lineOffset has type integer;\
    length has type integer;\
  \}\
  or noWhere;\
\
.The `astLocation` Type[[locationProg]]\
\\end\{program\}}