{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
== Optional Expressions\
[[optionExpression]]\
(((option expression@`option` expression)))\
\
An `option` expression is used to handle cases where a value is not always guaranteed. The `option` type is built-in but is defined as though by the algebraic type definition in Program~\\vref\{optionTypeProg\}.\
\
\\begin\{program\}\
[listing]\
type option of t is none or some(t)\
\
.The `option` Type\
[[optionTypeProg]]\
\\end\{program\}\
\
The `option` type is intended to convey one of two possibilities: a given value exists -- in which case the `some` constructor is used -- or no value exists -- in which case `none` is used.\
\
For example,\
[listing]\
some("alpha")\
\
signals the definite `string` value `"alpha"`; whereas\
[listing]\
none\
\
signals that there is no value.\
\
The `option` type can be used as the return type of functions that must reliably signal whether or not a value exists.\
\\begin\{aside\}\
The `option` type serves as a normal `replacement' for `null` that one sees in languages like Java.\
\\end\{aside\}\
\
In addition to the `someValue` and `?.` operators -- described below in <<someValue>> and <<optionChaining>> -- two conditions are defined specifically for `option` expressions: `present` (see <<presentCond>>) and `has value` (see <<hasValueCond>>).\
\
=== Unwrap Option Value -- `someValue`\
[[someValue]]\
(((unwrap option value)))\
\
The `someValue` unwraps a `some` value and returns its contents. It is defined by the equation:\
\
[listing]\
someValue(some(X)) is X\
\
\
\\begin\{aside\}\
\\begin\{aside\}\
The `someValue` function is partial. It is not defined in the case that its argument is not a `some` value. If `someValue` is invoked with q\{none\} then the program will terminate.\
\
For this reason, the programmer should consider whether the `has value` condition (see <<hasValueCond>>) is a better fit.\
\\end\{aside\}\
\\end\{aside\}}