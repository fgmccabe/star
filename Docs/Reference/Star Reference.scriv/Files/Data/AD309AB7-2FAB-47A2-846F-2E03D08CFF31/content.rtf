{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 When a program refers to a contract-defined function -- i.e., a variable that is declared within a contract -- then that reference must be 
\i resolved
\i0  to an actual program before the program can be said to be executable.\
For example, consider the expression:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 A+3
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 (+)
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  function is part of the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  contract which means that we need to resolve the call to 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 (+)
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  to an actual implemented function.\
The type signature for 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 (+)
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 all t ~~ arith[t] |: (t,t)=>t
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 where the constraint\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 arith[t]
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 is satisfied for any 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  for which there is an implementation of 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 metic.\
In this case we know, because 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 3
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is an 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 integer
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  that the type of 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 A
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  must also 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 beinteger
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  -- as is the type of the whole expression. So, the actual constraint after taking type inference into account is:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 arith[integer]
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 which 
\i is
\i0  satisfied because there is a standard implementation of 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  for 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 integer
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 .\
Implementations can be viewed as functions whose value is a record of all the elements of the defined contract. For example, the implementation function of 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  over 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 integer
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  has a definition that is similar {\field{\*\fldinst{HYPERLINK "scrivcmt://BE59EA0B-C32B-4EAA-B89B-1AAFFE6AD3F6"}}{\fldrslt to:}}\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \'91arith#integer\'92() => arith\{\
  X+Y => _integer_plus(X,Y)\
  ...\
  \}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 Resolving the expression 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 A+3
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is achieved by replacing the abstract function 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 (+)
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  with an actual function:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 arith#integer().\'92+\'92(A,3)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 In some cases, there is not sufficient information about the types of variables to fully resolve the appropriate definition to use. In this case, it must be true that the type(s) involved must be variable and that they surface to a point where the type variable(s) are generalized.\
Consider the lambda:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 (X,Y) => X+Y*Y
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The type of 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 X
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  and 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 Y
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  may not be completely known, and are denoted by the same type variable (
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 ) say; 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is, however, a constrained type that is bound by the scope of the function itself.\
Ultimately, in some larger scope, either the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  type becomes grounded into some specific type, or it must be bound by an explicit quantifier. The quantifier must reflect the contract constraint -- otherwise the compiler will report an error. For example, it might be that we defined a variable in a 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 let
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 :\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 addSq : all t arith[t] |: (t,t)=>t\
addSq = ((X,Y)=>X+X*Y)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  contract constraint is surfaced to the same level where the type variable 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is bound.\
In general, where an overloaded name is used, there are two permitted possibilities: the type constraints implied by the overloaded name are subsumed by an explicit type equality or the type variable is bound in some 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 let
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  environment.\
[NOTE] The third possibility -- where the constrained type is a type variable but is not bound by a 
\i thetaEnvironment
\i0  is an error -- an unresolved overloaded identifier error.\
In the case of the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 addSq
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  definition, there is not enough information here to fix an actual implementation to use; and so we resolve this by rewriting the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 addSq
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  function to take an additional argument -- the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  dictionary represented by the variable 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 D
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 :\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \'91addSq#\'92(D) => let\{\
  \'91addSq\\\'92\'92(X,Y) => D.\'92+\'92(X,D.*(Y,Y)).\
\} in \'91addSq\\\'92\'92
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 In addition (sic), we will have to also resolve all calls to 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 addSq
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  as well. A call to 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 addSq
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  such as:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 addSq(A,3)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 will be rewritten to:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \'91addSq#\'92(\'91arith#integer\'92())(A,3)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 because we know from the presence of the literal integer that 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 addSq
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  is being used with 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 integer
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  arguments.\
Resolving for contract implementations pushes out from expressions such as 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 A+3
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  outward until all references to contracts have been resolved by explicit implementations.\
[NOTE] It is an error for the top-level of a program -- i.e., package-level -- to contain unresolved references to contracts.}