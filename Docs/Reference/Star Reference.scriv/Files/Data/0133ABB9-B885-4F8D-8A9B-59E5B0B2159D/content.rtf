{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 A key input to the grammar is the table of operators. Star starts with a number of standard operators, but this can be extended via the use of extensions to the language.\
The standard operators that are part of the core language and the base extensions are listed in <<StandardOps>>. Operators in this table are listed in order of priority. Together with a priority, operators can also be considered to `prefix`, `infix`, `postfix`, or some combination of the three.\
\
The priority of an operator is the indication of the `importance' of the operator: the higher the priority the nearer the top of the abstract syntax tree the corresponding structure will be.\
\
Priorities are numbers in the range 1..2000; by convention, priorities in the range 1..899 refer to entities that normally take the role of expressions, priorities in the range 900..1000 refer to predicates and predicate-level connectives and priorities in the range 1001..2000 refer to entries that have a statement or program level interpretation.\
\
\
[[StandardOps]]\
.Standard Operators\
[cols="3*"]\
|===\
\
`#right(";",2000)` |\
`#postfix(";",2000)` |\
`\\#prefix("#",1350)` |\
`#infix(":-",1347)` |\
`#infix("-->",1347)` |\
`#infix("==>",1347)` |\
`#right(":\\|",1345)` |\
`#right(":",1344)` |\
`#prefix(":!",1343)` |\
`\\#infix("##",1342)` |\
`#infix("::",1341)` |\
`#infix("\\|*",1340)` |\
`#infix(":*",1340)` |\
`#infix(":+",1340)` |\
`#infix(";*",1340)` |\
`#prefix("private",1320)` |\
`#prefix("java",1300)` |\
`#prefix("var",1300)` |\
`#prefix("contract",1300)` |\
`#prefix("open",1300)` |\
`#prefix("on",1300)` |\
`#prefix("implementation",1300)` |\
`#prefix("case",1290)` |\
`#right("\\|",1290)` |\
`#prefix("type",1250)` |\
`#infix("counts as",1200)` |\
`#right("else",1200)` |\
`#infix("is",1200)` |\
`#right("do",1200)` |\
`#prefix("remove",1200)` |\
`#infix("then",1180)` |\
`#prefix("if",1175)` |\
`#prefix("while",1175)` |\
`#prefix("for",1175)` |\
`#infix("to",1130)` |\
`#infix("from",1130)` |\
`#infix(":=",1120)` |\
`#prefix("perform",1120)` |\
`#prefix("merge",1100)` |\
`#prefix("extend",1100)` |\
`#prefix("notify",1100)` |\
`#postfix("default",1100)` |\
`#prefix("assert",1100)` |\
`#prefix("valis",1100)` |\
`#prefix("try",1100)` |\
`#prefix("update",1100)` |\
`#prefix("delete",1100)` |\
`#prefix("ignore",1100)` |\
`#infix("//",1100)` |\
`#infix(",..",1099)` |\
`#infix("..,",1098)` |\
`#infix("catch",1050)` |\
`#prefix("request",1050)` |\
`#infix("with",1050)` |\
`#prefix("switch",1020)` |\
`#infix("has type",1020)` |\
`#right("such that",1010)` |\
`#assoc("exists",1005)` |\
`#assoc("for all",1005)` |\
`#right(",",1000)` |\
`#infix("default",1000)` |\
`#prefix("raise",1000)` |\
`#prefix("query",1000)` |\
`#prefix("import",1000)` |\
`#prefix("memo",999)` |\
`#prefix("without",999)` |\
`#infix("computation",999)` |\
`#infix("./",999)` |\
`#prefix("with",999)` |\
`#right(":",960)` |\
`#postfix(":",960)` |\
`#left("group by",960)` |\
`#prefix("when",950)` |\
`#right("?",950)` |\
`#right("~",950)` |\
`#infix("order descending by",950)` |\
`#prefix("waitfor",950)` |\
`#prefix("spawn",950)` |\
`#infix("order by",950)` |\
`#infix("descending by",950)` |\
`#infix("where",940)` |\
`#prefix("any of",935)` |\
`#prefix("all",935)` |\
`#right("otherwise",930)` |\
`#right("or",930)` |\
`#right("implies",920)` |\
`#right("and",920)` |\
`#right("=>",910)` |\
`#right("$=>",910)` |\
`#prefix("not",910)` |\
`#right("<=>",910)` |\
`#prefix("let",909)` |\
`#left("using",908)` |\
`#infix("in",908)` |\
`#right("or else",900)` |\
`#infix("matches",900)` |\
`#infix("!=",900)` |\
`#infix("<",900)` |\
`#infix("=",900)` |\
`#infix(">",900)` |\
`#infix("substitute",900)` |\
`#infix("<=",900)` |\
`#prefix("ref",900)` |\
`#infix("=<",900)` |\
`#prefix("kind",900)` |\
`#postfix("is tuple",900)` |\
`#infix("->",900)` |\
`#infix("has kind",900)` |\
`#infix("bound to",900)` |\
`#infix("has value",900)` |\
`#infix(">=",900)` |\
`#right("implements",900)` |\
`#infix("on",900)` |\
`#right("over",900)` |\
`#infix("instance of",900)` |\
`#infix("determines",895)` |\
`#right("++",850)` |\
`#right("of",840)` |\
`#prefix("reduction",830)` |\
`#infix("matching",800)` |\
`#left("+",720)` |\
`#left("-",720)` |\
`#left("%",700)` |\
`#left("*",700)` |\
`#left("/",700)` |\
`#infix("**",650)` |\
`#prefix("valof",500)` |\
`#infix("on abort",475)` |\
`#infix("as",420)` |\
`#prefix("unique",400)` |\
`#infix("@@",200)` |\
`#infix("@",200)` |\
`\\#infix("#@",200)` |\
`#left(".",175)` |\
`#left("?.",175)` |\
`#prefix("!",150)` |\
`#prefix("+",100)` |\
`#prefix("-",100)` |\
`#prefix("$",75)` |\
`#prefix("%",75)` |\
`#prefix("?",75)` |\
`#prefix("%%",75)` |\
`\\#prefix("#$",50)` |\
`\\#prefix("#*",50)` |\
`\\#right("#+",50)` |\
`\\#prefix("#:",50)` |\
`#prefix("$$",50)` |\
`#right("$$",50)` |\
`\\#prefix("#~",50)` |\
|===\
\
==}