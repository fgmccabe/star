{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
A <<PatternAbstraction>> is an abstraction of a pattern. Pattern abstractions allow patterns to be treated as first class values -- i.e., passed in as arguments to programs and bound to variables -- and they may be applied in contexts where patterns are valid.\
\
The form of a pattern abstraction type is defined in <<patternAbTypeFig>>.\
\
[[patternAbTypeFig]]\
.Pattern Type\
****\
[[PatternType]]PatternType ::= <<TupleType>> `\\<=` <<Type>>\
****\
\
Pattern abstractions match a pattern, and extract values from that pattern; values that, in turn, may be matched against where the pattern abstraction is applied.\
For example, a <<PatternAbstraction>> that matches ``string``s that are intended to denote `integer` literals, and extracts such an `integer` would have the type\
[listing]\
(integer) <= string\
\
\
===}