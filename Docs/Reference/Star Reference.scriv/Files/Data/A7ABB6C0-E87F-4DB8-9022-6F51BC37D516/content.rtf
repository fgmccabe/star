{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
[[algebraicInterface]]\
An <<AlgebraicType>> definition induces an interface that is composed of all the fields in any of the <<RecordConstructor>>s that are defined within the definition.\
\
This interface -- which takes the form of a <<RecordType>> -- contains a <<Annotation>> for every <<Annotation>> that is present in a <<RecordConstructor>>.\
\
For example, the interface for the `account` type above consists of:\
[listing]\
\{\
  balance:ref integer;\
\}\
\
This interface is used when determining the type soundness of a <<RecordAccess>> expression.\
\
[NOTE]\
The condition noted above that two fields of the same name in two <<RecordConstructor>>s of the same <<AlgebraicType>> must have the same type can be formalized by declaring that the interface of an <<Algebraic>> type must be well formed (which is only possible if there is only a single <<Annotation>> for a given field).\
\
===}