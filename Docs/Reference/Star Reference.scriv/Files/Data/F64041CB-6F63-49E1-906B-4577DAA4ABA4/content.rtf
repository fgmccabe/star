{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 A contract definition is a statement that defines the functions and action procedures associated with a contract. As can be seen below, a contract statement associates a contract name -- together with a set of type variables -- with a set of 
\i TypeAnnotations
\i0  that define the elements of the contract. Within the 
\i Contract
\i0  statement, a 
\i TypeAnnotation
\i0  may refer to the type(s) in the contract head.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f0\i\fs26 Contract ::= `
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 contract
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 ` ContractSpec `
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ::=
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 ` RecordType\
ContractSpec ::= [ TypeQuantifier ] Identifier [ TypeArgSpec [`
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ->>
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 ` TypeArgSpec ]]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sa160\pardirnatural\qc\partightenfactor0

\f1\i0\fs24 \cf0 <!$Scr_Ps::0><$Scr_Ps::1>
\f0\fs26 Contract Statement\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::1>
\f0\fs26 For example, the contract that underlies type coercion is:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::2>
\f2\fs22 contract all s,t ~~ coercion[s,t] ::= \{\
  coerce:(s)=>t\
\}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::2>
\f0\fs26 A contract statement may also include defaults for the names defined in the contract. If a given contract implementation does not give an implementation for a name that has a default associated for it, then the default is used.\
[NOTE] Default specifications may use variables that are in scope at the point of the contract {\field{\*\fldinst{HYPERLINK "scrivcmt://494B4CB2-52B1-4A84-B489-FC44269F2143"}}{\fldrslt specification.}}\
[TIP] An important usage pattern for contracts is to represent abstract types. An abstract type is one defined by its contract rather than one defined by an explicit type definition.\
For example, the 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  contract defines a set of arithmetic functions. However, it can also be interpreted as a definition of an abstract type of arithmetic values -- the values that implement the 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  contract.}