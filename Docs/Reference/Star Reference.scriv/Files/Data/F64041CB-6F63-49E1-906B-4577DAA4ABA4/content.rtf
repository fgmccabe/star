{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
[[ContractDefinition]]\
(((type,contracts!definition)))\
\
A contract definition is a statement that defines the functions and action procedures associated with a contract. As can be seen in <<ContractFig>>, a contract statement associates a contract name -- together with a set of type variables -- with a set of <<TypeAnnotation>>s that define the elements of the contract. Within the <<Contract>> statement, a <<TypeAnnotation>> may refer to the type(s) in the contract head.\
\
[[ContractFig]]\
.Contract Statement\
****\
[[Contract]]Contract ::= `contract` <<ContractSpec>> `<~` <<RecordType>>\
\
[[ContractSpec]]ContractSpec ::= [ <<TypeQuantifier>> ] <<Identifier>> [ <<TypeArgSpec>> [`\\->>` <<TypeArgSpec>> ]]\
****\
\
For example, the contract that underlies type coercion (see <<typeCoercionExpression>>) is:\
[listing]\
contract all s,t ~~ coercion[s,t] <~ \{\
  coerce:(s)=>t\
\}\
\
(((default values,contract)))\
A contract statement may also include _defaults_ for the names defined in the contract. If a given contract implementation does not give an implementation for a name that has a default associated for it, then the default is used.\
\
[NOTE]\
Default specifications may use variables that are in scope at the point of the contract specification. footnote:[This is generally not the same scope as where a contract implementation is given.]\
\
\
[TIP]\
====\
An important usage pattern for contracts is to represent _abstract types_. An abstract type is one defined by its contract rather than one defined by an explicit type definition.\
\
For example, the `arithmetic` contract in <<arithmeticContractProg>> defines a set of arithmetic functions. However, it can also be interpreted as a definition of an abstract type of arithmetic values -- the values that implement the `arithmetic` contract.\
====\
\
====}