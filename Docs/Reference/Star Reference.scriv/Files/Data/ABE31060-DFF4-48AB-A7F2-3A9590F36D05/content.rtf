{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 The type system is based on the concept of type _subsumption_. One type subsumes another if either it is already equivalent under some substitution or it is `more general' than the other.\
\
The intuition is that if a function expects a certain kind of argument then either a value of exactly that type or one that is more general may be supplied.\
\
We express this formally in terms of a subsumption relation `subsume`:\
\\[\
T\\sub1\\subsume\{\}T\\sub2\
\\]\
is read as\
\\begin\{quote\}\
$T\\sub1$ subsumes, or is more general than, $T\\sub2$.\
\\end\{quote\}\
In general, type checking takes place in a certain context. For subsumption, this context defines available implementations of contracts as well as recording the types of variables. Furthermore, subsumption is likely to lead to the instantiation of type variables. Hence, in general, the predicate that we establish takes the form:\
\\[\\entail\{E,\\theta\\sub\{in\}\}\{T\\sub1\\subsume\{\}T\\sub2\}\\leadsto\\theta\\sub\{out\}\\]\
where \\ensuremath\{\\theta\}\
takes the form \\ensuremath\{\\\{x\\sub1/t\\sub1\\sequence\{,\}x\\subn/t\\subn\}\\\}\
and defines a substitution of types t\\subi\{\} for type variables x\\subi\{\} where a given variable occurs at most once in the left hand side of a $x\\subi/t\\subi$ pair.\
\
\\begin\{aside\}\
We do not take account of constraints at this time.\
\\end\{aside\}\
\
====}