{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
== Collection and Sequence Expressions\
[[sequenceExpression]]\
(((sequence,expressions)))\
(((expressions,sequence)))\
(((of@`of`,expression)))\
\
Collection expressions and sequence expressions are a syntactic feature that make it straightforward to represent collective values. The difference between a `collection` and a `sequence` is that the latter embodies a sequential ordering of the elements. A `collection` may have an ordering present; but that is not required by the contract and is not enforced in the notation.\
\
\
A sequence expression represents a use of the standard `sequence` contract (see Program~\\vref\{sequenceContractDef\}) to construct sequences of values.\
\
\\begin\{aside\}\
There is a similar form to <<SequenceExpression>> which is used to denote _queries_ -- the programmer's analog of set abstractions. <<Query>> expressions are defined in Chapter~\\ref\{queries\}.\
\\end\{aside\}\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
_Expression_&\\arrowplus&<<SequenceExp>>\\\\\
[[SequenceExp]SequenceExp::=<<SequenceType>>\\ `of``[`<<ExpSequence>>`]]`\\\\\
  | `[`<<ExpSequence>>`]`\\\\\
[[ExpSequence]ExpSequence::=[<<Expression>>`..,`]<<Expression>>\\sequence\{,\}<<Expression>>[`,..`<<Expression>>]]\\\\\
[[SequenceType]]SequenceType::=<<Identifier>>\
\\end\{eqnarray*\}\
.Sequence Expression\
[[sequenceExpressionFig]]\
\\end\{figure\}\
I.e., a sequence expression consists of a sequence of <<Expression>>s separated by commas. In addition, either -- but not both -- the tail or the front of the sequence may be denoted by an expression. Otherwise the sequence is nil-terminated.\
\
An expression of the form:\
[listing][escapechar=|]\
|_Label_| of [|_E\\sub1_\\sequence\{,\}_E\\subn_|]\
\
is equivalent to the expression:\
[listing][escapechar=|]\
_cons(|_E\\sub1_\\sequence\{,\}|_cons(|_E\\subn_|,_nil())|\\sequence\{\}|) has type |_Label_| of %t|\\sub\{new\}|\
\
_provided that \\emph\{Label_ is the label of a <<Type>> that implements the `sequence`  contract\} -- see <<sequenceContract>> and where `\\%t\\sub\{new`\} is a new type variable not occurring elsewhere. Included in that contract are two functions -- denoting the empty sequence (`\\_nil()`) and a non-empty sequence (`\\_cons()`) -- that are used to build the true value of a sequence expression.\
\
A sequence can be built up from other sequences by prepending to them. An expression of the form:\
[listing][escapechar=|]\
|_Label_| of [|_E\\sub1_\\sequence\{,\}_E\\sub\{n-1_\}`,..`_E\\subn_|]\
\
is equivalent to the expression:\
[listing][escapechar=|]\
_cons(|_E\\sub1_\\sequence\{,\}|_cons(|_E\\sub\{n-1_\}|,|_E\\subn_|)|\\sequence\{\}|)\
\
\
Conversely, a sequence may be `front' loaded and be defined by appending elements to a `front' expression:\
[listing][escapechar=|]\
|_Label_| of [|_F_`..,`_E\\sub1_\\sequence\{,\}_E\\subn_|]\
\
is equivalent to the expression:\
[listing][escapechar=|]\
_apnd(|\\sequence\{\}|_apnd(|_F_|,|_E\\sub1_|)|\\sequence\{\}_E\\subn_|)\
\
\
\\begin\{aside\}\
It is also possible to have a sequence expression is that is _both_ front-loaded and back-loaded:\
[listing][escapechar=|]\
|_Label_| of [|_F_|..,|_M_|,..|_T_|]\
\
is equivalent to:\
[listing][escapechar=|]\
_apnd(_cons(|_F_|,|_M_|),|_T_|)\
\
which, in turn, is equivalent to:\
[listing][escapechar=|]\
_cons(|_F_|,_apnd(|_M_|,|_T_|))\
\
\\end\{aside\}}