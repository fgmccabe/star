{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Accessing Fields of a Record\
[[dotAccess]]\
(((record literal,accessing)))\
(((expressions,accessing record fields)))\
\
Record access expressions access the value associated with a field of a record value. The result may either be the field value, or a new record with a replaced field value.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[RecordAccess]]RecordAccess::=<<Expression>>\\ `.`\\ <<Identifier>>\
\\end\{eqnarray*\}\
.Record Access Expression[[recordAccessFig]]\
\\end\{figure\}\
\
An expression of the form\
[listing]\
A.F\
\
where `F` is the name of an attribute of the record `A` denotes the value of that attribute. For example, given the type definition\
[listing]\
type person is someone\{\
  name has type string;\
  age has type integer;\
\}\
\
and a `person` value bound to `P`:\
[listing]\
def P is someone\{ name="fred"; age=32 \}\
\
then the expression `P.name` has value `"fred"`.\
\
The (`.`) access operator is also used in cases where an anonymous record is used; for example given the record:\
[listing]\
def R is \{ alpha = "a"; beta=4\}\
\
then `R.alpha` has value `"a"`\
\\begin\{aside\}\
The binding of the record access operator (`.`) is very strong. Thus, expressions such as\
`A.L[ix]` and `A.F(a,b*3)`\
are equivalent to\
[listing][mathescape=true]\
(A.L)[ix] $\{\\rm and\}$ (A.F)(a,b*3)\
\
respectively.\
\\end\{aside\}}