{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 A 
\i ContractConstraint
\i0  is a requirement on a 
\i Type
\i0  -- or tuple of T
\i ype
\i0 s -- that whatever type it is, that there must exist an implementation of the Contract for the 
\i Type
\i0 .\
For example, the type constraint expression:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 comparable[t]
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 means that the type variable 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  may only unify with concrete types that implement the 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 comparable
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  contract.\
[NOTE] If 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  is unified with another type variable, then the constraints on both type variables are 
\i merged
\i0 .\
[NOTE] Since only named types may implement 
\i Contract
\i0 s, it is also not permissible to unify the constrained variable with an structural type -- such as a function type.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::1>
\f0\i\fs26 ContractConstraint ::= Identifier 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 [
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  TypeArgument 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ]
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 \
  | Identifier 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 [
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  TypeArgument 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ->>
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26  TypeArgument 
\f1\i0\fs24 <$Scr_Cs::3>
\f2\fs22 ]
\f1\fs24 <!$Scr_Cs::3>
\f0\i\fs26 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sa160\pardirnatural\qc\partightenfactor0

\f1\i0\fs24 \cf0 <!$Scr_Ps::1><$Scr_Ps::2>
\f0\fs26 Contract Constraint\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::2>
\f0\fs26 It is possible for 
\i ContractConstraint
\i0 s to reference more than one type. For example, the standard 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 coercion
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  contract references two types. A 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 coercion
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  
\i ContractConstraint
\i0  will therefore look like:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 coercion[T1,T2]
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 where 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 T1
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  represents the source type of the coercion and 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 T2
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  represents the destination type.\
If the 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 ->>
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  clause is used, then the 
\i Contract
\i0  being referenced must have a commensurate 
\i functional dependency
\i0  associated with it.\
[NOTE] Conversely, if a 
\i Contract
\i0  has a functional dependency, then any constraint referring to it must also have a 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 ->>
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  clause.\
The 
\f1\fs24 <$Scr_Cs::3>
\f2\fs22 ->>
\f1\fs24 <!$Scr_Cs::3>
\f0\fs26  clause identifies which type(s) are dependent on the type argument(s) of the 
\i Contract
\i0 .}