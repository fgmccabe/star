{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
[[contractContraint]]\
(((type,constraints!contract)))\
(((contract constraint)))\
\
A <<ContractConstraint>> is a requirement on a <<Type>> -- or tuple of <<Type>>s -- that whatever type it is, that there must exist an `implementation` of the <<Contract>> for the <<Type>> (see <<contracts>>).\
\
For example, the type constraint expression:\
[listing]\
comparable[t]\
\
means that the type variable `t` may only unify with concrete types that implement the `comparable` contract.\
[NOTE]\
If `t` is unified with another type variable, then the constraints on both type variables are _merged_.\
\
[NOTE]\
Since only named types may implement <<Contract>>s, it is also not permissible to unify the constrained variable with an structural type -- such as a function type.\
\
\
[[contractConstraintFig]]\
.Contract Constraint\
****\
[[ContractConstraint]]ContractConstraint ::= <<Identifier>>``[``<<TypeArgument>>``]``\
  | <<Identifier>>``[``<<TypeArgument>> \\->> <<TypeArgument>>``]``\
****\
\
It is possible for <<ContractConstraint>>s to reference more than one type. For example, the standard `coercion` contract (see <<typeCoercionContractFig>>) references two types. A `coercion` <<ContractConstraint>> will therefore look like:\
[listing]\
coercion[T1,T2]\
\
where `T1` represents the source type of the coercion and `T2` represents the destination type.\
\
If the `\\->>` clause is used, then the <<Contract>> being referenced must have a _functional dependency_\
(((functional dependency)))\
associated with it.\
\
[NOTE]\
Conversely, if a <<Contract>> has a functional dependency, then any constraint referring to it must also have a `\\->>` clause.\
\
The `\\->>` clause identifies which type(s) are dependent on the type argument(s) of the <<Contract>>. (See <<ContractFunctionalDependency>>).\
\
===}