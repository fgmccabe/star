{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
Type variables are associated with a 
\i Kind
\i0  -- which constrains the kinds (sic) of types that the type variables may be bound to. For example, a 
\i Kind
\i0  of type implies that the type variable may be bound to any valid type -- but may not be bound to a 
\i TypeConstructor
\i0 .\
[NOTE] The different kinds of type variable may not be mixed: it is not permissible to bind a type variable to a 
\i TypeConstructor
\i0 , and vice versa.\
The 
\i Kind
\i0  of a type variable is given by its quantifier declaration.\
For example, given:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 all t ~~ cons[t] ::= nil | cons(t, cons[t]).
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The type variable 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 t
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  may be bound to a type expression such as 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 cons[string
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 ] but not to a higher-kinded type (such as 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  itself).\
On the other hand, the type variable 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 c
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  in\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 contract all c/1 mappable[c] ::= \{\
  fmap:all e,f ~~ ((e)=>f,c[e])=>c[f]\
\}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 is a higher-kinded type variable: it can be bound to a unary 
\i TypeConstructor
\i0  \'97 such as 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  \'97 but  it may not be bound to a regular type or to any non-unary 
\i TypeConstructor
\i0 .}