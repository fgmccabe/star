{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Record Substitution Expression\
[[recordOverride]]\
(((replacing values in a record)))\
(((expressions,substitute@`substitute`)))\
(((record values,replacing fields)))\
An expression of the form:\
[listing][mathescape=true]\
A substitute \{att$\\sub1$=$<<Expression>>\\sub1\\sequence\{;\}$att$\\subn$=$<<Expression>>\\subn$\}\
\
denotes the value obtained by replacing the attributes `att`\\subi\{\} in `A` with the expressions <<Expression>>\\subi.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
_Expression_&\\arrowplus&<<Expression>>\\ `substitute`\\ <<AnonymousRecord>>\
\\end\{eqnarray*\}\
.Record Override Expression[[recordOverrideFig]]\
\\end\{figure\}\
\
For example, the expression\
[listing]\
P substitute \{age=33\}\
\
has value\
[listing]\
someone\{name="fred"; age=33\}\
\
\\begin\{aside\}\
This expression has a separate value to that of `P` itself; evaluating the `substitute` does not side-effect `P`.\
\\end\{aside\}\
\
\\noindent\
The semantics of `substitute` is based on the notion of a `shallow copy'. The value of the expression:\
[listing]\
P substitute \{ age=33 \}\
\
is a new term whose fields consist of all the fields of `P` -- with the exception of the `age` field. The `substitute` expression does not imply a `deep' or complete copy of its left hand side.\
\\begin\{aside\}\
(((expressions,substitute@`substitute`!ref fields@`ref` fields)))\
(((record values,replacing ref fields@replacing `ref` fields)))\
(((ref field@`ref` field)))\
This only has significance if the record contains any `ref` fields. In particular, the resulting expression _contains_ the same `ref` fields as the original; and a subsequent assignment to a `ref` field will affect both the original and the substituted term.\
\
For example, given this type definition:\
[listing]\
type account is account\{\
  name has type string;\
  balance has type ref float;\
\}\
\
and given the variable bindings:\
[listing]\
def A is account\{ name = "fred"; balance := 0.0 \};\
def B is A substitute \{ name = "peter" \}\
\
then `A` and `B` both share the _same_ `ref` field. An assignment to one:\
[listing]\
A.balance := 5.9\
\
is an assignment to the other. In this case, the value of `B.balance` is also `5.9`\
\\end\{aside\}\
\\begin\{aside\}\
Note that if the _right hand side_ of a `substitute` contains a `ref` field, then the result will have the `ref` field from the right hand side, not the original.\
\
For example, if we have:\
[listing]\
def C is A substitute \{ balance := 4.5 \}\
\
then `C` _does not_ share a `ref` with `A` and updating either will not affect the other.\
\\end\{aside\}}