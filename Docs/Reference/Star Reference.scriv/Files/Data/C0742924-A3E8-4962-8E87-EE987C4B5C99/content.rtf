{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Option Field Access -- `?.`\
[[optionChaining]]\
(((?. operator@`?.` operator)))\
(((accessing an optional value)))\
(((option chaining)))\
\
The `?.` operator can be used similarly to a normal record field access (see \\vref\{dotAccess\}) except that it takes an `option`al argument and returns an `option` value.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
<<RecordAccess>>&\\arrowplus&<<Expression>>\\ `?.`\\ <<Identifier>>\
\\end\{eqnarray*\}\
.Optional Record Access Expression[[optionAccessFig]]\
\\end\{figure\}\
\
The form of a optional field access is also similar to the field access; an expression of the form:\
[listing]\
A?.F\
\
will access the `F` field from the wrapped record value in `A`. The result type of a option field access is also an `option`al.\
\
For example, suppose that `R` has the type given by\
[listing]\
R has type option of Person\
\
\
Its type can be approximated by (the difference is that field labels are not themselves functions):\
[listing]\
(?.) has type for all r,s such that\
  (option of r,(r=>s))=>option of s\
\
I.e., it has a similar type to the `map` function (see \\vref\{mapFunction\}) in the `mappable` contract.\
\
However, it is actually best understood as a macro form. The macro definition of `?.` can be given in a single line macro:\
[listing]\
#?R ?. ?F ==> map((RR)=>RR.F,R)\
\
where `map` is the implementation of the `mappable` contract for the `option` type.\
\
=== Default Option Expression -- `or else`\
[[optionDefltChain]]\
(((or else operator@`or else` operator)))\
(((accessing an optional value with default)))\
(((option chaining)))\
\
The `or else` operator can be used to unwrap an `option`al value -- giving a default in the case that it is actually `none`\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
<<Expression>>&\\arrowplus&<<Expression>>\\ `or else`\\ <<Expression>>\
\\end\{eqnarray*\}\
.Optional Chaining with Default[[optionIndexAccessFig]]\
\\end\{figure\}\
\
The form of a optional access is:\
[listing]\
O or else D\
\
where `O` has type `option of t` and `D` has type `t`. If `O` has value `some(X)` then the value is `X`, otherwise it is `D`.\
\
Like `?.`, `or else` can be best understood as a macro:\
[listing]\
# ?O or else ?D ==> _optionDeflt(O,()=>D)\
_optionDeflt(some(X),_) is X\
 |  _optionDeflt(none,D) is D()\
\
Notice that the default expression is not evaluated unless the value of `O` is `none`.\
\
The `or else` operator is right associative. This means that they can be chained  together if more than one default is possible:\
[listing]\
A or else B or else C}