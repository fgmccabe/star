{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Enumerated Symbol\
[[enumeratedSymbol]]\
(((expression,enumerated symbol)))\
(((enumerated symbol literal)))\
<<EnumeratedSymbol>>s denote symbolic values. In particular, it refers to symbols that are introduced in an algebraic <<TypeDefinition>>.\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[EnumeratedSymbol]]EnumeratedSymbol::=<<Identifier>>\
\\end\{eqnarray*\}\
.Enumerated Symbol Expression\
[[enumeratedSymbolFig]]\
\\end\{figure\}\
Enumerated symbols have no internal structure; they are often used to define enumerations or for sentinels. For example, the <<Boolean>> standard type can be defined\
[listing]\
type boolean is false or true\
\
and the standard cons-list type uses `nil` to mark the empty list:\
[listing]\
type cons[t] is cons(t,cons[t]) or nil}