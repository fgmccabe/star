{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
[[instanceConstraint]]\
(((type,constraints!instance)))\
\
An <<InstanceConstraint>> is a requirement on a variable that any instantiation of the variable is an `instance of' a type -- typically that is a universally quantified type.\
\
\
[[instanceConstraintFig]]\
.Instance Type Constraint\
****\
[[InstanceConstraint]]InstanceConstraint ::= <<TypeVar>> `instance of` <<Type>>\
****\
\
For example, in\
[listing]\
r instance of (all t ~~ (t)=>t)\
\
we establish a constraint on `r` that any binding of `r` must be some specialization of the function type:\
[listing]\
all t ~~ (t)=>t\
\
Note that this would permit, for example, `r` to be bound to the `integer` function type:\
[listing]\
(integer)=>integer\
\
because this type is an instance of the <<UniversalType>>.\
\
}