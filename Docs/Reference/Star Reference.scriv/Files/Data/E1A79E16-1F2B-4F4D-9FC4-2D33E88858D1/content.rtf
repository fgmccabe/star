{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
[[attributeConstraint]]\
(((type,field)))\
(((type,constraints!field)))\
\
A _FieldConstraint_ is a requirement on a variable that whatever type it is, it should have particular attributes of particular types defined for it.\
\
\
[[attributeConstraintFig]]\
.Field Constraint\
****\
[[FieldConstraint]]FieldConstraint ::= <<Type>> `<~` \{ <<TypeAnnotation>> ;..; <<Annotation>> \}\
****\
\
For example, in\
[listing]\
r <~ \{ alpha : string; beta : long \}\
\
if `r` is unified against a concrete type then that type's <<RecordType>> interface (see <<algebraicInterface>>) must contain both of `alpha` and `beta`. In addition, the fields must be of the right types.\
\
[NOTE]\
====\
It is also possible to require that an <<EncapsulatedType>> exists. For example, the constraint:\
[listing]\
s <~ \{ type elem \}\
====\
requires that any actual binding for type `s` must include the embedded type `elem`.\
\
\
===}