{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
[[aggCon]]\
(((constructor,record constructor)))\
(((record constructor)))\
(((type,record constructor)))\
\
Labeled records denote constructors whose elements are addressed by name rather than by argument position. A labeled record specification consists of a collection type annotations (see <<typeAnnotationFig>>), separated by semicolons. In addition, the record specification may include _default_ values for some (or all) of the attributes of the record.\
\
\
[[aggregateConFig]]\
.Labeled Record Constructor\
****\
[[RecordConstructor]]RecordConstructor ::= <<Identifier>> `\{` <<ElementType>> ;..; <<ElementType>> `\}`\
\
[[ElementType]]ElementType ::= <<Annotation>>\
  | <<Identifier>> `default` `=` <<Expression>>\
  | <<Identifier>> `default` `:=` <<Expression>>\
  | <<DefltEquation>>\
  | `assert` <<Condition>>\
****\
\
If there is more than one record constructor for a type then any attributes that they have in common must have the same type associated with them. For example, the type definition for a two-three tree structure is illustrated in <<twoThree>>.\
\
[[twoThree]]\
.A `twoThree` tree type\
[listing]\
all s ~~ twoThree[s] ::=\
  three\{left:twoThree[s];\
        label:s;\
        right:twoThree[s]\
       \}\
  | two\{left:twoThree[s]; right:twoThree[s] \}\
  | empty;\
\
The `left` and `right` attributes in the two constructors are required to have the same type because they are shared by the two records.\
\
[TIP]\
Notice how the type annotations for the `left` and `right` sub-tree uses the same type identifier as in the definition itself. This marks `twoThree` as a _recursive_ type.\
\
\
====}