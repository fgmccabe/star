{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 More complex contract implementations may require the use of auxiliary function definitions; and hence may involve the use of 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 let
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  expressions.\
For example, this is an implementation of the 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 comparable
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  contract for 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  values.\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 implementation all t ~~ comparable[t], equality[t] |: comparable[cons[t]] =>\
  let\{\
    consLess([],[_ ,.. _]) => true\
    consLess([X,..L1],[X,..L2]) => consLess(L1,L2)\
    consLess([X,.._], [Y,.._]) where X<Y => true\
    consLess(_,_) default => false\
\
    consLessEq([],_) => true\
    consLessEq([X,..L1],[Y,..L2]) :: X=<Y =>\
          consLessEq(L1,L2)\
    consLessEq(_,_) default => false\
  \} in \{\
    X < Y => consLess(X,Y)\
    X =< Y => consLessEq(X,Y)\
    X > Y => consLess(Y,X)\
    X >= Y => consLessEq(Y,X)\
  \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sa160\pardirnatural\qc\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0><$Scr_Ps::1>
\f0\fs26 Implementation of  
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 comparable
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  contract for 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  values\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::1>
\f0\fs26 [NOTE] The implementation of  
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 comparable
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  contract for 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  types is based on a requirement that the individual elements of lists must also be compared. Hence the clause\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 comparable[t], equality[t] |: comparable[cons[t]]
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 in the head of the contract implementation statement. The primary job of the definition of `
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 <
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26 `  is to show how 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  values may be compared. Our definition of inequality for 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 cons
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  values assumes that:\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}empty lists are less than any non-empty list;\
{\listtext	\uc0\u8226 	}one non-empty list is less than another if the first element is less than the first element of the second; and finally\
{\listtext	\uc0\u8226 	}if the first elements of the two lists are identical then we consider the tails of each list.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 [TIP] The curious reader may wonder why we introduce a new name 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 consLessEq
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  in order to define 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  (and, by extension 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 consLess
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  for 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 <
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  etc.). The reason for this has to do with limitations on type inference in the context of recursive programs: within the equations that define a function, any 
\i use
\i0  of the function symbol must represent a recursive use.\
For example, in the equation:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 consLessEq([X,..L1],[Y,..L2]) where X=<Y =>\
      consLessEq(L1,L2)
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 the occurrence of 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 consLessEq
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  in the right hand side of the equation represents a recursive call.\
However, if we tried to define 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  without the use of the auxiliary name we would get two occurrences of 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  which really represent different functions:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 [X,..L1] =< [Y,..L2] where X=<Y => L1 =< L2
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The two occurrences of 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  refer to different kinds of use: one is as a normal overloaded occurrence of 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  and once as a recursive call to the function being defined.\
Normally, outside of the definition of the function, it is permitted to allow a given function to be used in different uses -- always assuming that the types are consistent. However, 
\i within
\i0  the definition of a function, all occurrences of the function symbol must refer to the same function.\
In the case of the 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  equation above, the type inference system would not be able to distinguish a recursive call from a call to a different overloaded function of the same name; and would assume that both uses of 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26  are intended to be part of the definition. This, in turn, would result in a type error being generated.\
In summary, when defining an overloaded function like 
\f1\fs24 <$Scr_Cs::2>
\f2\fs22 =<
\f1\fs24 <!$Scr_Cs::2>
\f0\fs26 , we often have to introduce an auxiliary function to carry the recursion.\
In defining the implementation of a contract, each of the variables that are part of the contract must either be defined or have a default definition within the contract specification itself.}