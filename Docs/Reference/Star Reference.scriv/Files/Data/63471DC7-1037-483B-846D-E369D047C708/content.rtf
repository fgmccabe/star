{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Substitutions in a Collection\
It is possible to denote the collection obtained by _substituting_ an element -- or deleting an element -- with expressions such as:\
[listing]\
C[with Kx->Vx]\
\
and\
[listing]\
C[without Kx]\
\
which represent\
[listing]\
_set_indexed(Cx,Kx,Vx)\
\
and\
[listing]\
_delete_indexed(Cx,Kx)\
\
respectively.\
\
=== Slicing Collections\
A more powerful form of accessing single elements from a collection is the _slice_ notation. A slice expression takes the form:\
[listing][escapechar=|]\
|_C_|[|_From_|:|_To_|]\
\
which denotes the subset of elements `starting' at `_From_` and `ending' (but _not_ including) with `_To_`.\
\
The special variant:\
[listing][escapechar=|]\
|_C_|[|_From_|:]\
\
denotes all the remaining elements of the collection after `From`.\
\
\\begin\{aside\}\
Related to the indexing and slicing expressions are the indexed assignments -- as can be seen in <<sequenceUpdate>>.\
\\end\{aside\}\
\
== Function Application Expressions\
[[functionApplication]]\
(((expressions,function application)))\
(((function application expression)))\
\
A function application expression `applies' a function to zero or more arguments.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[ApplicativeExpression]]ApplicativeExpression::=<<Expression>>`(`<<Expression>>\\sequence\{,\}<<Expression>>`)`\
\\end\{eqnarray*\}\
.Function Application Expression\
[[applicativeExpressionFig]]\
\\end\{figure\}\
\
It is quite normal for the function expression being applied to arguments itself to be the result of a function application. For example, given the function `double`:\
[listing]\
double has type for all s such that (((s)=>s))=>((s)=>s)\
double(F) is (X) => is F(F(X))\
\
we can apply `double` to `inc`:\
[listing]\
inc has type (integer)=>integer\
inc(X) is X+1;\
\
to get an expression such as:\
[listing]\
double(inc)(3)\
\
which has value 5.}