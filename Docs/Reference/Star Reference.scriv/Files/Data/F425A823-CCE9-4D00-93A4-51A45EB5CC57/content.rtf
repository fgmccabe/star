{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
==== The `current' location\
[[locationVar]]\
(((Accessing source locations)))\
\
The standard keyword `\\_\\_location\\_\\_` denotes the source location of each of its occurrences. It is a pseudo-variable: it has a type and value; but its value is based on the text of the program that it is embedded in:\
[listing]\
__location__ has type astLocation;\
\
\\begin\{aside\}\
The related expression -- `\\hash\{`\\_\\_location\\_\\_\} -- is used within macro rules to denote the location the term that is reduced by a given macro rule.\
\\end\{aside\}\
\
== Typed Expressions\
[[typeExpression]]\
(((expressions,type)))\
(((type expressions)))\
A type annotation expression is an explicit declaration of the type of an expression. A type coercion expression denotes a conversion of a value so that it conforms to a particular type.\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[TypedExpression]]TypedExpression::=<<TypeCoercion>>\\\\\
%  | <<TypeCastExpression>>\\\\\
  | <<TypeAnnotationExpression>>\
\\end\{eqnarray*\}\
.Type Expression\
[[typedExpressionFig]]\
\\end\{figure\}}