{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
==== Type Safety\
The type safety requirements of a conditional expression are that the types of the two arms of the conditional are the same, and that the condition itself is \\safeinf\{\}:\
\
\\begin\{prooftree\}\
\\AxiomC\{\\typesat\{E\}\{C\}\}\
\\AxiomC\{\\typeprd\{E\}\{Th\}\{t\}\}\
\\AxiomC\{\\typeprd\{E\}\{El\}\{t\}\}\
\\TrinaryInfC\{\\typeprd\{E\}\{`(`C`?`Th`:`El`)`\}\{t\}\}\
\\end\{prooftree\}\
\
\
=== Switch Expressions\
[[caseExpression]]\
(((expressions,case@`case`)))\
(((case expression@`case` expression)))\
\
A `switch` expression uses a selector expression and a set of equations to determine which value to return.\
\\begin\{aside\}\
\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[CaseExpression]]CaseExpression::=`switch`\\ <<Expression>>\\ `in`\\ <<CaseBody>>\\\\\
[[CaseBody]]CaseBody::=`\\\{`<<CaseArm>>\\sequence\{`;`\}<<CaseArm>>`\\`\}\\\\\
[[CaseArm]]CaseArm::=`case`\\ <<Pattern>>\\ `is`\\ <<Expression>>\\\\\
  | `case`\\ <<Pattern>>\\ `default`\\ `is`\\ <<Expression>>\
\\end\{eqnarray*\}\
.Case Expression\
[[caseExpressionFig]]\
\\end\{figure\}\
\
The `selector' expression is evaluated, and then, at most one of the <<CaseArm>>s is selected based on whether the <<Pattern>> matches or not. If one of these does match, then the corresponding <<Expression>> on the right hand side is evaluated as the value of the `switch`.\
\
Program~\\vref\{dogCaseProg\} shows a simple example of a `switch` expression, in this mapping `string`s to `integer`s.\
\\begin\{program\}\
[listing]\
switch Alpha in \{\
  case "dog" is 1;\
  case "pup" is 2;\
  case _ default is -1\
\}\
\
.A `case` of Dogs Program[[dogCaseProg]]\
\\end\{program\}\
\
\
Each <<CaseArm>>'s pattern may introduce variables; these variables are `in scope' only for the corresponding right hand side expression.\
\
Optionally, a `switch` expression may have a `default` clause. This clause determines the value of the expression if none of the other <<CaseArm>>s match.\
\
\\begin\{aside\}\
The <<Pattern>> associated with a `default` should always apply. If the `default` clause does not match then an exception will be raised.\
\\end\{aside\}\
\
\\paragraph\{Evaluation Order\}\
Other than handling of the `default` case, the different <<CaseArm>>s are attempted in the order of appearance in the text.\
\
I.e., the `default` <<CaseArm>> is tried only if all other <<CaseArm>>s do not apply.\
\
==== Type Safety\
The type safety requirements of a `case` expression are that the types of the patterns of each <<CaseArm>> are the same, and are the same as the selector expression. In addition, the right hand sides of the <<CaseArm>>s should also be consistently typed.\
\
\\begin\{prooftree\}\
\\AxiomC\{\\typeprd\{E\}\{S\}\{T\}\}\
\\AxiomC\{\\typeprd\{E\}\{P\\subi\}\{T\}\}\
\\AxiomC\{\\typeprd\{E$\\cup\{\}$varsIn(P\\subi)\}\{E\\subi\}\{T\\sub\{e\}\}\}\
\\TrinaryInfC\{\\typeprd\{E\}\{`switch`\\ S\\ `in\\\{`\\sequence\{\}`;``case`\\ P\\subi\\ `is`\\ E\\subi`;`\\sequence\{\}`\\`\}\}\{T\\sub\{e\}\}\}\
\\end\{prooftree\}\
\
In the case that there is a `default` clause, then that too must agree:\
\\begin\{prooftree\}\
\\AxiomC\{\\typeprd\{E\}\{S\}\{T\}\}\
\\AxiomC\{\\typeprd\{E\}\{P\\subi\}\{T\}\}\
\\AxiomC\{\\typeprd\{E$\\cup\{\}$varsIn(P\\subi)\}\{E\\subi\}\{T\\sub\{e\}\}\}\
\\TrinaryInfC\{\\typeprd\{E\}\{`switch`\\ S\\ `in\\\{`\\sequence\{\}`;``case`\\ P\\subi\\ `is`\\ E\\subi`;`\\sequence\{\}`case`\\ P\\subn\\ `default`\\ `is`\\ E\\subn`\\`\}\}\{T\\sub\{e\}\}\}\
\\end\{prooftree\}\
\
`switch` expressions may not be used that often explicitly. However, the compiler will often construct them during the process of compiling functions.\
\\end\{aside\}}