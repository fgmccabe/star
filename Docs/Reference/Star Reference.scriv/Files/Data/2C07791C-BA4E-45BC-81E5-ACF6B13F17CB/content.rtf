{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
=== Record Literals\
[[recordLiteral]]\
(((expressions,record literal)))\
(((record literal)))\
A record literal is a collection of values identified by name.\
\
Like <<ConstructorLiteral>>s, the <<RecordLiteral>> must have been defined with a <<TypeDefinition>> statement. This also constrains the types of the expressions associated with the fields.\
\
\
\\begin\{figure\}[H]\
\\begin\{eqnarray*\}\
[[RecordLiteral]]RecordLiteral::=<<Record>>\\ |<<ThetaRecord>>\\\\\
[[Record]]Record::=<<Expression>>`\\\{`<<RecordElement>>\\sequence\{;\}<<RecordElement>>`\\`\}\\\\\
[[RecordElement]]RecordElement::=<<Identifier>>\\ `=`\\ <<Expression>>\\\\\
  | <<Identifier>>\\ `:=`\\ <<Expression>>\\\\\
  | `type`\\ <<Identifier>>\\ `=`\\ <<Type>>\
\\end\{eqnarray*\}\
.Record Literal Expression[[recordLiteralFig]]\
\\end\{figure\}\
\
\
There are two variants of the <<RecordLiteral>>: the <<Record>> form and the <<ThetaRecord>> form. This section focuses on the former.\
\
For example, given the type definition:\
[listing]\
type employee is emp\{\
  name has type string;\
  hireDate has type date;\
  salary has type ref integer;\
  dept has type ref string;\
\}\
\
A literal `emp` value will look like:\
[listing]\
def E is emp\{\
  name = "Fred Nice";\
  hireDate = today();\
  salary := 23000;\
  dept := "mail"\
\}\
\
\\begin\{aside\}\
Fields whose type is a `ref`erence type -- see <<referenceType>> -- are defined within the record using the `:=` operator. All other fields are defined using the `=` operator.\
\\end\{aside\}\
\
For any given <<RecordLiteral>> _all_ the fields of the record must be associated with a value. This value is either explicitly given or can be supplied by a `default` declaration within the type definition itself.\
\
Fields within a <<RecordLiteral>> are identified by name; and may be written in any order.\
\
=== Anonymous Records\
[[anonRecord]]\
(((expression,anonymous records)))\
(((anonymous records)))\
\
An anonymous record is one which does not have an explicit label.\
\\begin\{figure\}[htbp]\
\\begin\{eqnarray*\}\
[[AnonymousRecord]]AnonymousRecord::=`\\\{`<<RecordElement>>`;`...`;`<<RecordElement>>`\\`\}\\\\\
  | `\\\{`<<Definition>>\\sequence\{;\}<<Definition>>`\\`\}\
\\end\{eqnarray*\}\
.Anonymous Record Literal Expression[[anonRecordLiteralFig]]\
\\end\{figure\}\
\
For example, an anonymous record consisting of a `name` and an `address` may be written:\
[listing]\
\{name="Fred; address="1 Main St"\}\
\
Anonymous records have, as their type, a <<RecordType>> (see <<recordType>>). The type of this record would be represented by:\
[listing]\
\{ name has type string; address has type string\}}