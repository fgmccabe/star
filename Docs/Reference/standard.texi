@node Standard Contracts
@chapter Standard Contracts

In this chapter we outline the major standard contracts.

Many of these contracts have multiple implementations, for different
types and type combinations; these are outlined in separate chapters.

@node The @code{equality} contract
@section The @code{equality} contract
@anchor{EqualityContract}
@cindex equality contract
Equality is based on the @code{equality} contract. This defines the
@code{boolean}-valued function: @code{==}. The complementary function
@code{=!=} is not defined as part of the @code{equality} contract; but
is defined in terms of @code{==}.

@findex @code{equality} contract
@float Program,equalityContract
@caption{The Standard @code{equality} Contract}
@example
contract all t ~~ equality[t] ::= @{
  (==) : (t,t)=>boolean
@}
@end example
@end float

@c It is not necessary to explicitly implement the @code{equality}
@c contract. The language processor automatically implements it for types
@c that do not contain program values. However, it is possible to provide
@c an explicit implementation for @code{equality} for cases where a more
@c semantic definition of equality is desired.

@node @code{==} -- equals
@subsection @code{==} -- equals
@anchor{equalsPredicate}
@findex @code{==} predicate
@cindex equality predicate
@code{==} is part of the standard @code{equality} contract.

Its type is given by:
@example
(==) : all t ~~ equality[t] |: (t,t) => boolean
@end example

In general, equality is @emph{not} defined for all values. In
particular, equality is not defined for functions, procedures and
other program values.@footnote{Whether two expressions that denote
functions of the same type denote the same function is, in general,
not effectively decidable.}

@node @code{=!=} -- not equals
@subsection @code{=!=} -- not equals
@anchor{notEqualsPredicate}
@findex @code{=!=} predicate
@cindex inequality predicate

The type signature for @code{=!=} is:
@example
(=!=) : all t ~~ equality[t] |: (t,t) => boolean
@end example

The @code{=!=} predicate has a standard definition that makes it
equivalent to a negated equality:
@example
X =!= Y => \+ X==Y
@end example

@node The @code{comp} contract
@section The @code{comp} contract
@anchor{comparisonPredicates}

Comparison between values is based on the standard @code{comp}
contract -- see Program@ref{comparableContract}.

Comparison is @emph{not} automatically implemented for all types --
the standard language provides implementations for the arithmetic
types (@code{integer}s, @code{float}s etc.) and for the @code{string}
type.

@float Program,comparableContract
@caption{The Standard @code{comp} Contract}
@example
contract all t ~~ comp[t] ::= @{
  (<) : (t,t)=>boolean.
  (>=) : (t,t)=>boolean.
@}
@end example
@end float

@node @code{<} -- less than
@subsection @code{<} -- less than
@findex @code{<} predicate
The type signature for @code{<} is:
@example
(<) : all t ~~ comp[t] |: (t,t)=>boolean
@end example

The @code{<} predicate is satisfied if the left argument is less than
the right argument. The precise definition of less than depends on the
actual implementation of the @code{comp} contract for the type
being compared; however, for arithmetic types, less than is defined as
being arithmetic less than. For @code{string}s, one string is less
than another if it is smaller in the standard lexicographic ordering
of strings.

@node @code{>=} -- greater then or equal
@subsection @code{>=} -- greater then or equal
@findex @code{>=} predicate
The type signature for @code{>=} is:
@example
(>=) : all t ~~ comp[t] |: (t,t)=>boolean
@end example

The @code{>=} predicate is satisfied if the left argument is greater
than or equal to the right argument; as determined by the particular
implementation of the @code{comp} contract.

@node @code{=<} -- less than or equal
@subsection @code{=<} -- less than or equal
@findex @code{=<} predicate
The type signature for @code{=<} is:
@example
(=<) : all t ~~ comp[t] |: (t,t)=>boolean
@end example

The @code{=<} predicate is satisfied if the left argument is less than
or equals to the right argument.

This predicate is not directly part of the @code{comp} contract, instead it is defined in terms of @code{>=}:

@example
X =< Y => Y >= X.
@end example

@node @code{>} -- greater than
@subsection @code{>} -- greater than
@findex @code{>} predicate
The type signature for @code{>} is:
@example
(>) : all t ~~ comp[t] |: (t,t)=>boolean
@end example

The @code{>} predicate is satisfied if the left argument is strictly
greater than the right argument.

This predicate is not directly part of the @code{comp} contract, instead it is defined in terms of @code{<}:

@example
X > Y => Y< X.
@end example

@node The @code{display} contract
@section The @code{display} contract
@findex @code{display} contract
@cindex pretty print contract
@anchor{displayContract}

The standard contract @code{display}, shown in
Program~@ref{displayContractProg} together with the @code{ss} type
shown in Program~@ref{ppTypeProg}, is at the core of the standard
method for displaying values.

@quotation Note
The @code{display} contract is also used as part of
@refer{stringInterpolation} expressions.
@end quotation

@float Program,displayContractProg
@caption{The Standard @code{display} Contract}
@example
public contract all t ~~ display[t] ::= @{
  disp:(t)=>ss.
@}
@end example
@end float

One of the primary purposes of the @code{display} contract is to
support the standard string @refer{Interpolation} form.

@quotation Tip
One of the primary benefits of allowing programmers to define their
own implementation of @code{display} is to enable higher quality
display of values. By defining @code{display} for yourself, you can
use application oriented display of your values.
@end quotation

There are standard implementations of @code{display} contract for many
of the standard types. However, it is quite possible to define one's
own implementation, either to support your own types or to override
the standard display. For example, supposing that values of the
@code{tree} type:
@example
tree[t] ::= empty | node(tree[t],t,tree[t])
@end example

were intended to be displayed:
@example
@{ "alpha" "beta" "gamma" @}
@end example
then the following implementation of @code{display} would ensure that
such trees were displayed more conveniently:
@example
implementation all t ~~ display[t] |: display[tree[t]] => let@{
  treeDisplay(empty) => ss(" ").
  treeDisplay(node(L,Lb,R)) => ssSeq([treeDisplay(L),disp(Lb),treeDisplay(R)])
@} in @{
  disp(T) => ssSeq([ss("@{"),treeDisplay(T),ss("@}")])
@}
@end example

Note how the use of @code{disp} within the definition of
@code{treeDisplay} will ensure that the display of tree labels may
also be overridden with user-defined implementations of
@code{display}.

@node The @code{format} contract
@section The @code{format} contract
@findex @code{format} contract
@anchor{formatContract}

The standard contract @code{format}, shown in
Program~@ref{formatContractProg} is used when displaying values in a
formatted manner -- especially within @refer{Interpolation}
expressions.

@float Program,formatContractProg
@caption{The Standard @code{format} Contract}
@example
public contract all t ~~ format[t] ::= @{
  frmt:(t,string)=>ss.
@}
@end example
@end float

The second argument to @code{frmt} is normally a formatting string
that is in a format (sic) that is understood by any specific
implementers of the @code{format} contract.

@quotation
Normally, like @code{display}, calls to @code{frmt} are
represented implicitly in string @refer{Interpolation} expressions.
@end quotation

@node Formatting Codes
@subsection Formatting Codes

A formatting code is a description of how a numeric or @code{string}
valued expression should be displayed. Formatting codes allow more
detailed control of the representation of the format in terms of
minimum and maximum widths of output, the number of decimal places to
show and the style of representing numbers -- including how negative
numbers are displayed and the display of currencies.

@quotation Note
In @refer{stringInterpolation} expressions, formatting codes are
introduced with a @code{:} character immediately after the @code{$}
form and is terminated by a @code{;} character. An invalid formatting
code is ignored, and treated as though it were part of the quoted
string proper.
@end quotation

@node The @code{reversible} Contract
@section The @code{reversible} Contract

The @code{reversible} contract defines a single function @code{reverse} that is intended to mean reverse.

@float Program,reverseContractProg
@caption{The Standard @code{reversible} Contract}
@example
public contract all t ~~ reversible[t] ::= @{
  reverse : (t)=>t
@}
@end example
@end float

@node The @code{concat} Contract
@section The @code{concat} Contract

The @code{concat} contract defines a single function (@code{++}) that is intended to mean `glue together' -- in a type specific way.

@float Program,concatContractProg
@caption{The Standard @code{concat} Contract}
@example
public contract all t ~~ concat[t] ::= @{
  (++) : (t,t)=>t
@}
@end example
@end float

@node The @code{++} Contract Function
@subsection The @code{++} Contract Function
@findex @code{++} contract function
@anchor{plusPlusFunction}

The type signature for @code{++} is:
@example
(++) : all t ~~ concat[t] |: (t,t) => t
@end example

The @code{++} function concatenates two sequences to form their conjunction.

@node The @code{slice} Contract
@section The @code{slice} Contract

@float Program,sliceContractProg
@caption{The @code{slice} contract}
@example
public contract all s,k ~~ slice[s->>k] ::= @{
  _slice : (s,k,k)=>s.
  _splice : (s,k,k,s)=>s.
@}
@end example
@end float

@node The @code{_slice} Contract Function
@subsection The @code{_slice} Contract Function
@findex @code{_slice} contract function
@anchor{sliceFunction}

The type signature for @code{_slice} is:
@example
_slice : all s,k ~~ _slice[s->>k] |: (s,k,k) => s
@end example

The @code{_slice} function extracts a subsequence from a source
sequence. A call of the form:
@example
_slice(S,F,T)
@end example
extracts a subsequence of @code{S} starting from (and including)
@code{F} and ending with (but not including) @code{T}.

It is not required that @code{k} is actually @code{integer}; but it is
often more convenient.

The core property of @code{_slice} is that it should follow the equality:
@display
_slice(S,@var{zero},X)++_slice(S,X,@var{end}) == S
@end display
where @var{zero} is the index of the first entry in @code{S} and
@var{end} is just beyond the last entry in the collection.

@node The @code{_splice} Contract Function
@subsection The @code{_splice} Contract Function
@findex @code{_splice} contract function
@anchor{spliceFunction}

The type signature for @code{_splice} is:
@example
_splice : all s,k ~~ _slice[s->>k] |: (s,k,k,s) => s
@end example

The @code{_splice} function replaces a subsequence from a source
sequence. A call of the form:
@example
_splice(S,F,T,N)
@end example
returns a new sequence consisting of @code{S} with the subsequence
starting from (and including) @code{F} and ending with (but not
including) @code{T} replaced by @code{N}.

Furthermore, for any valid @code{K}:
@display
_splice(S,K,K,@var{empty}) == S
@end display
where @var{empty} is the empty sequence for the type @code{s}.

@node The stream Contract
@section The @code{stream} Contract
@findex @code{stream} contract

@float Program,streamContractProg
@caption{The @code{stream} contract}
@example
public contract all S,E ~~ stream[S->>E] ::= @{
 _eof:(S) => boolean.
 _hdtl:(S) => option[(E,S)].
 _back:(S) => option[(S,E)].
@}
@end example
@end float

@node @code{_eof} -- End of Stream
@subsection @code{_eof} -- End of Stream

@node @code{_hdtl} -- Head of Stream
@subsection @code{_hdtl} -- Head of Stream

@node @code{_back} -- Back of Stream
@subsection @code{_back} -- Back of Stream

@node The @code{sequence} Contract
@section The @code{sequence} Contract
@findex @code{sequence} contract

A sequence expression represents a use of one of the two standard
contracts: Program~@ref{streamContractProg} and
Program~@ref{sequenceContractProg}. The former is used when parsing a
sequence and the latter is used when constructing a sequence. More
formally, the @code{stream} contract is used for
@refer{SequencePattern}s and the @code{sequence} contract is used for
@refer{SequenceExpression}s.

@float Program,sequenceContractProg
@caption{The @code{sequence} contract}
@example
public contract all S,E ~~ sequence[S->>E] ::= @{
  _cons:(E,S) => S.
  _apnd:(S,E) => S.
  _nil:S.
@}
@end example
@end float

@node @code{_nil} -- Empty Sequence
@subsection @code{_nil} -- Empty Sequence

@node @code{_cons} -- Add to Front of Sequence
@subsection @code{_cons} -- Add to Front of Sequence

@node @code{_apnd} -- Add to End of Sequence
@subsection @code{_apnd} -- Add to End of Sequence


@node The @code{sizeable} Contract
@section The @code{sizeable} Contract

The @code{sizeable} contract defines two functions for measuring the
size of an entity.

The standard @code{sizeable} contract is defined for those collections
that have a concept of size associated with them.

@float Program,sizeableContractProg
@caption{The Standard @code{sizeable} Contract}
@example
contract all t ~~ sizeable[t] ::= @{
  size : (t) => integer;
  isEmpty : (t) => boolean;
@}
@end example
@end float

@node Size of a @code{sizeable} Collection
@subsection Size of a @code{sizeable} Collection
@findex @code{size} contract function

@example
size : all t ~~ sizeable[t] |: (t)=>integer
@end example

The @code{size} function returns the number of elements of a
@code{sizeable} collection. The precise meaning of the @code{size}
function is likely to be type-specific; for example, for
@code{string}s, the @code{size} of a @code{string} is the number of
characters in the string.

@node Is a @code{sizeable} Collection Empty
@subsection  Is a @code{sizeable} Collection Empty
@findex @code{isEmpty} contract function

@example
isEmpty : all t ~~ sizeable[t] |: (t)=>boolean
@end example

The @code{isEmpty} function returns @code{true} if the collection has
no elements.

@node The @code{indexed} Contract
@section The @code{indexed} Contract
@anchor{indexedContract}

The @code{indexed} contract provides functions that define what it
means to access and modify key-value collections.

@float Program,indexedContractProg
@caption{The Standard @code{indexed} Contract}
@example
public contract all m,k,v ~~ indexed[m ->> k,v] ::= @{
  _index:(m,k) => option[v].
  _insert:(m,k,v) => m.
  _remove:(m,k) => m.
  _empty:m.
@}
@end example
@end float

@node The @code{_index} Access Function
@subsection The @code{_index} Access Function
@findex @code{_index} contract function

The @code{_index} contract function specifies what it means to access
a key-value collection:

@float Program,indexFunctionProg
@caption{The @code{_index} Function}
@example
_index : all m,k,v ~~ indexed[m ->> k,v] |: (m,k) => option[v].
@end example
@end float

@quotation Note
The @code{_index} function returns an @code{option}al value since it
is not normally guaranteed that a particular key-value combination is
present in the collection.
@end quotation

@node The @code{_insert} Function
@subsection The @code{_insert} Function
@findex @code{_insert} contract function

The @code{_insert} contract function specifies what it means to add a
new key-value pair to a collection (or to modify an existing
association):

@float Program,insertFunctionProg
@caption{The @code{_insert} Function}
@example
_insert : all m,k,v ~~ indexed[m ->> k,v] |: (m,k,v) => m.
@end example
@end float

@quotation Note
The @code{_insert} function returns a new collection with the modified
information in it. This supports but does not require that the
implementation of @code{indexed} is @emph{applicative} in nature.
@end quotation

The standard implementations of @code{indexed} for the standard
@code{map} type is applicative.

@node The @code{_remove} Function
@subsection The @code{_remove} Function
@findex @code{_remove} contract function

The @code{_remove} contract function specifies what it means to remove a
new key-value pair from a collection.

@float Program,removeFunctionProg
@caption{The @code{_remove} Function}
@example
_remove : all m,k,v ~~ indexed[m ->> k,v] |: (m,k) => m.
@end example
@end float

@quotation Note
Like the @code{_insert} function, @code{_remove} returns a new
collection with the modified information in it.
@end quotation

@node The @code{_empty} Value
@subsection The @code{_empty} Value
@findex @code{_empty} contract variable

The @code{_empty} value denotes an empty key-value collection of the
appropriate sort.

@float Program,emptyValueProg
@caption{The @code{_empty} Value}
@example
_empty : all m,k,v ~~ indexed[m ->> k,v] |: m.
@end example
@end float

@quotation Note
The @code{_empty} value is often used as the starting point for
building up a key-value collection.
@end quotation


@node The @code{iter} Contract
@section The @code{iter} Contract

The @code{iter} contract integrates with the @code{execution} contract
to allow iteration over collections.

@float Program,iterContractProg
@caption{The Standard @code{iter} Contract}
@example
public contract all s,t ~~ iter[s->>t] ::= @{
  _iter:all x,m/1,e ~~ execution[m->>e] |: (s,m[x],(t,x)=>m[x]) => m[x]
@}
@end example
@end float

@node The @code{_iter} Iteration Function
@subsection The @code{_iter} Iteration Function
@findex @code{_iter} contract function

The @code{_iter} function specifies a key part of iteration over
collections: how individual elements of the collection should be
handled.

@node The @code{indexed_iter} Contract
@section The @code{indexed_iter} Contract

The @code{indexed_iter} contract integrates with the @code{execution} contract
to allow iteration over key-value collections.

@float Program,indexed_iterContractProg
@caption{The Standard @code{indexed_iter} Contract}
@example
public contract all s,k,v ~~ indexed_iter[s->>k,v] ::= @{
  _ix_iter:all x,m/1,e ~~ execution[m->>e] |: (s,m[x],(k,v,x)=>m[x]) => m[x]
@}
@end example
@end float

@node The @code{_ix_iter} Iteration Function
@subsection The @code{_ix_iter} Iteration Function
@findex @code{_ix_iter} contract function

The @code{_ix_iter} function specifies a key part of iteration over
key-value collections: how individual elements of the collection should be
handled.

@node The @code{arith} Contract
@section The @code{arith} Contract
@anchor{arithmeticContract}

The @code{arith} contract encodes the basic -- so-called calculator --
functions.

@float Program,arithContractProg
@caption{The Standard @code{arith} Contract}
@example
public contract all x ~~ arith[x] ::= @{
  (+): (x,x)=>x.
  (-): (x,x)=>x.
  __minus: (x)=>x.
  zero: x.
  (*): (x,x)=>x.
  (/): (x,x)=>x.
  (%): (x,x)=>x.
  one:x.
@}.
@end example
@end float

@node The @code{+} Function
@subsection The @code{+} Function
@findex @code{+} contract function

The @code{+} function defines the addition of two elements:

@float Program,plusFunctionProg
@caption{The @code{+} Function}
@example
(+) : all t ~~ arith[t] |: (t,t) => t.
@end example
@end float

@quotation Note
The @code{(+)} function takes two arguments of the same type and
returns a value of the same type as its arguments.

In fact, it is @emph{this} specification that ensures that there is no
implicit coercion between different kinds of numeric value.
@end quotation

@node The @code{-} Function
@subsection The @code{-} Function
@findex @code{-} contract function

The @code{-} function defines the subtraction of one element from another.

@float Program,minusFunctionProg
@caption{The @code{-} Function}
@example
(-) : all t ~~ arith[t] |: (t,t) => t.
@end example
@end float

@quotation Note
The @code{(-)} is a binary function. A separate function -- @code{_uminus} -- is used to denote unary negation.
@end quotation

@node The @code{_uminus} Function
@subsection The @code{_uminus} Function
@findex @code{_uminus} contract function

The @code{_uminus} function defines the unary negation of a number.

@float Program,uminusFunctionProg
@caption{The @code{_uminus} Function}
@example
_uminus : all t ~~ arith[t] |: (t) => t.
@end example
@end float

@quotation Note
The @code{_uminus} function is automatically substituted for
occurrences of unary minus in source programs. There is rarely a need
to explicitly refer to this function.
@end quotation

@node The @code{zero} Value
@subsection The @code{zero} Value
@findex @code{zero} contract variable

The @code{zero} value denotes the 0 value of the arithmetic type.

@float Program,zeroProg
@caption{The @code{zero} Value}
@example
zero : all t ~~ arith[t] |: t. 
@end example
@end float

@quotation Note
The @code{zero} value is particularly useful when defining arithmetic functions that should be neutral with respect to the actual type of numeric value. Literal decimal numbers have a fixed type -- @code{integer}.
@end quotation

@node The @code{*} Function
@subsection The @code{*} Function
@findex @code{*} contract function

The @code{*} function defines the multiplication of one element by another.

@float Program,timesFunctionProg
@caption{The @code{*} Function}
@example
(*) : all t ~~ arith[t] |: (t,t) => t.
@end example
@end float

@node The @code{/} Function
@subsection The @code{/} Function
@findex @code{/} contract function

The @code{/} function defines the division of one element by another.

@float Program,divideFunctionProg
@caption{The @code{/} Function}
@example
(/) : all t ~~ arith[t] |: (t,t) => t.
@end example
@end float

@node The @code{%} Function
@subsection The @code{%} Function
@findex @code{%} contract function

The @code{%} function defines the modulus of one element with respect
to another.

@float Program,modFunctionProg
@caption{The @code{%} Function}
@example
(%) : all t ~~ arith[t] |: (t,t) => t.
@end example
@end float

@node The @code{one} Value
@subsection The @code{one} Value
@findex @code{one} contract variable

The @code{one} value denotes the 1 value of the arithmetic type; i.e.,
the @emph{unit} of multiplication.

@float Program,oneProg
@caption{The @code{one} Value}
@example
one : all t ~~ arith[t] |: t. 
@end example
@end float

@quotation Note
Like the @code{zero}, the @code{one} value is particularly useful when
defining arithmetic functions that should be neutral with respect to
the actual type of numeric value.
@end quotation

@node The @code{coercion} Contract
@section The @code{coercion} Contract
@anchor{coercionContract}

The @code{coercion} contract embodies what it means to convert a value
of one type to another.

@float Program,coercionContractProg
@caption{The Standard @code{coercion} Contract}
@example
public contract all s,d ~~ coercion[s,d] ::= @{
  _coerce:(s)=>d
@}.
@end example
@end float

@node The @code{_coerce} Function
@subsection The @code{_coerce} Function
@findex @code{_coerce} contract function

The @code{_coerce} function defines a function that converts a value
of one type to another.

@float Program,coerceFunctionProg
@caption{The @code{_coerce} Function}
@example
_coerce : all s,d ~~ coercion[s,d] |: (s) => d.
@end example
@end float

@quotation Note
This is the basis of all coercion; expressions of the form:
@example
foo :: type
@end example
amount to calls to the appropriate implementation of the
@code{_coerce} function.
@end quotation

