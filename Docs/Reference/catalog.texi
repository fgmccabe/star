@node Source Catalogs
@appendix Source Catalogs

Star source code is managed by means of @emph{catalogs}. A catalog is
a document that gives the mapping from a package name to the file that
contains the source of that package.

@quotation Note
This separation is intended to avoid questions such as file name
extensions, directory structures and so on. A catalog is able to
collect together all the sources that are relevant to a project while
not requiring that they all be physically co-located.

Indeed, it would be fairly straightforward to extend the catalog
system to allow compilation of non file-based source units.
@end quotation

@node Catalogs and Sources
@section Catalogs and Sources

When a package imports another package the source merely contains a
statement that indicated which package is required:

@example
import star.json.
@end example

In order to determine what actual package this refers to there are two
systems that play a role: the @emph{catalog} system and the
@emph{repository} system. The former identifies where the source is --
by URI -- and the latter identifies where the compiled code can be
found. The compiler potentially needs both in order to properly import
the package.

The primary purpose of the catalog is to map package identifiers to
package URIs; which in turn identifies the actual resource.

@node Catalogs
@subsection Catalogs

A catalog is a mapping from logical names to URIs. The @Star{}
language system uses this mapping to locate source files and compiled
code when the corresponding resource is @code{import}ed by name.

Catalogs offer an additional level of indirection between a name and
the named entity. This indirection can be used, for example, to
implement versioned access to resources. In addition, catalogs serve
the role of pulling together the resources that a program or
application needs into a coherent set.


@node Structure of a Catalog
@subsection Structure of a Catalog

Catalogs are contained in json files@footnote{Subject to change}. The
general structure of a catalog json file looks like:

@example
@{
  "content" : @{
    @emph{PkgName} : @emph{FileName},
    @dots{}
    @emph{PkgName} : @emph{FileName}
  @},
  "version" : @emph{Semantic Version String},
  "subcatalogs" : [@emph{CatalogPath}, @dots{} @emph{CatalogPath}]
@}
@end example
where @emph{PkgName} is a valid @Star{} package name -- written as a
string because it's JSON.

@emph{FileName}s and @emph{CatalogPath}s are relative file names -- or URLs.

Catalogs may actually be in any of a number of formats -- depending on whether
there is a way of coercing the format to the standard catalog type --
as shown in @ref{catalogType}.

@float Program,catalogType
@caption{The @code{catalog} Type}
@example
public catalog ::= catalog@{
  base : uri.
  parent:option[catalog].
  version : option[version].
  subcats : option[cons[catalog]].
  content : map[string,uri].
@}
@end example
@end float

The elements of the @code{catalog} @refer{RecordConstructor} are:
@itemize
@item @code{base}
This is the base uri of the catalog: if not overridden, all URIs
referenced in the catalog should be interpreted as being
@emph{relative} to the base URI.

@item @code{version}
This is the default version of all the entries in the catalog.

@item @code{content}
This is a mapping from package names to URIs. Each entry shows how
to obtain the source of a given package.

@item @code{subcatalogs}
If specified, the list of catalogs in @code{subcatalogs} form
additional places to locate the source of a package. If a package
could not be located within this catalog, the compiler will search in
the list of subcatalogs, in order.
@end itemize

For example, a fragment of the catalog for the standard core library
is:

@example
@{
  "content": @{
    "star": "star.star",
    "star.arith": "arith.star",
    "star.action": "action.star",
    "star.boot": "boot.star",
    "star.cmdOpts": "cmdOpts.star",
    @dots{}
  @},
  "version": "1.0.0",
@}
@end example

@node Accessing Packages Using Catalogs
@subsection Accessing Packages Using Catalogs
@cindex accessing packages with catalogs
@cindex catalog,accessing packages with

The purpose of the catalog is to resolve package names to URIs. This
is primarily used by the @Star{} compiler, but is also a general
capability.

The resolution process can be summarized as:

@enumerate
@item
If the package is identified by name, the URI of the package is looked
up within the @emph{current} catalog.
@enumerate
@item
If the name is not present in the catalog, the parent catalog is
searched if available. The location of the parent catalog is
identified by name in the current catalog.
@item
If the name is not present, and there is no fall-back, exit with an error.
@end enumerate
@item
The located URI is resolved against the base URI of the current
catalog. This allows catalogs themselves to contain relative URIs
where possible.  This is the so-called target URI.
@item
The target URI is dereferenced -- using a transducer -- and
accessed. If the resource does not exist, or is not valid, exit with
an error.
@item
The catalog uri:
@example
"../catalog"
@end example
is resolved against the URI of the package containing the reference.
@enumerate
@item
If a catalog exists in this location then that catalog is used to
resolve references within the target resource.
@item
If there is no catalog, then a catalog @emph{may} be synthesized by
@emph{exploring} the space around the target URI.
@end enumerate
@end enumerate

@node Multiple Versions of a Package
@subsection Multiple Versions of a Package
A source and/or code repository may contain multiple versions of a
package. However, only one version of a given package may be imported
by a given package.

As a result, it is sufficient for the catalog to refer to a
version-specific URI for each package in its catalog.

However specified, the versions that a package is compiled against are
fixed during the compilation of the package. I.e., when a package is
compiled, it is compiled against specific versions of imported
packages. When the package is later executed, the specific versions
that were accessed at compile time are also used at run-time.

@quotation Note
Source catalogs and code repositories are responses to two related but
distinct problems: how to organize and access sources of programs and
how to organize access to executable code.
@end quotation

