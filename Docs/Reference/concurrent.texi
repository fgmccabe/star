@node Concurrent Execution
@chapter Concurrent Execution
@cindex concurrent execution
@cindex execution,parallel

Concurrent and parallel execution involves two inter-related concepts:
the @code{task} and the @code{nursery}. A @code{task} is a form of
@refer{Expression} which denotes a suspendable computation. A
@code{nursery} is a dynamic structure in which @code{task}s may be
performed.





@node Tasks
@section Tasks
The foundation for concurrency is the @refer{TaskExpression}. A
@code{task} is a @refer{Expression} that denotes a
computation that may be performed in parallel with other computations.

@node Task Expressions
@subsection Task Expressions

A @code{task} expression consists of a @code{task}-labeled @refer{BlockAction}.

@float BNF,taskExpressionFig
@caption{Fiber Expression}
@display
@var{ActionExpression} ::+ @refer{TaskExpression}
@anchored{TaskExpression} ::= @code{task} @refer{BlockAction}
@end display
@end float

@refer{TaskExpression}s denote computations that are expected to be
performed asynchronously or in parallel.@footnote{Merely using a
@code{task} expression is not sufficient to make a computation
parallel. For that, use the @code{background} operator.}

A @code{task} is 'created' with the @code{task} notation:
@example
T = task@{ logMsg(info,"This is a task action") @}
@end example

@refer{TaskExpression}s may have values; and may be composed and constructed like other expressions. For example, the function:
@example
tt(X) => task@{
  Y = 2;
  valis X+Y
@}
@end example

represents a rather elaborate way of adding 2 to a number. As with
@code{T} above, the expression:
@example
I = tt(3)
@end example

is not an @code{integer} but an @code{integer}-valued
@refer{TaskExpression}. The value returned may be extracted using
@code{valof}:
@example
Five = valof I
@end example

As with all @refer{Expression}s, if there is a possibility
that the @refer{TaskExpression} will fail, then it shoud be
encapsulated in a @code{try}-@code{catch} block:

@example
ive = valof @{
  try I catch @{
    logMsg(info,"Was not expecting this");
    valis 0
  @}
@}
@end example

@node The @code{task} type
@subsection The @code{task} type
The @code{task} type is a standard type that is used to represent
@refer{TaskExpression}s. 

@example
task[e] <~ @{@}
@end example

@quotation Note
Although the `task' type is implemented as a normal type, it's
definition is hidden as its internals are not relevant to the
programmer. Hence, it is declared using a @refer{TypeExistsStmt}
statement rather than with a @refer{AlgebraicTypeDefinition}
statement.
@end quotation

@node Task-related Functions
@section Task-related Functions
@cindex task functions

@node Background Task
@subsection Background Task
The @code{background} function takes a @code{task} and performs it in
the background (i.e., in parallel with the invoking call). The value
of the @code{background} task is the same as the value of the
backgrounded task.
@example
background : all t ~~ (task[t])=>task[t]
@end example

@quotation Note
@code{background} is a standard prefix operator -- with priority 950 -- 
hence a call to @code{background} may be written without parentheses.
@end quotation

@node Channels and Messages
@section Channels and Messages
[[channels]]

A channel is a typed communications channel between @code{task}s. In
order for a @code{task} to 'send a message' to another @code{task},
they would share the channel object itself and then the receiver would
use @code{recvRv} to wait for the message and the sender would use
@code{sendRv} to send the message.

@node The @code{channel} Type
@subsection The @code{channel} Type

@example
channel[
@end example


Like the @code{rendezvous} and @code{task} types, the @code{channel} type is _opaque_.

@node The @code{channel} Function
@subsection The @code{channel} Function

The @code{channel} function is used to create channels.
@example
channel: all t ~~ ()=>channel[t]
@end example

Each created channel may be used for sending and receiving multiple
messages. However, the channel is typed; i.e., only messages of that
type may be communicated.

Channels are multi-writer multi-reader channels: any number of tasks
may be reading and writing to a channel. However, any given
communication is between two tasks: one sender and one receiver.

If more than one @code{task} is trying to send a message then it is
non-deterministic which message is sent. If more than one @code{task}
is trying to receive a message then only one will get the message.

Message receives and sends may take place in either order. However,
message communication is _synchronous_. I.e., both sender and receiver
are blocked until a communication occurs.

An immediate implication of synchronous communication is that there is
no buffer of messages associated with @code{channel}s.


