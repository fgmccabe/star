@node Collections
@chapter Collections

This chapter defines the standard collection types. Note that many of
the functions that are implemented over collection types are exposed
via contract implementations.

@node Collection Types
@section Collection Types

There are three basic collection types supported: @code{cons} lists,
the @code{map} type and the @code{set} type.

@node The Cons List
@subsection The Cons List
@findex cons list

The @code{cons} type is defined as though by the type definition:

@float Program,consType
@caption{The @code{cons} List Type}
@example
all e ~~ cons[e] ::= .nil | .cons(e,cons[e]).
@end example
@end float

The standard contracts @code{equality}, @code{hashable}, @code{comp},
@code{stream}, @code{sequence}, @code{sizeable}, @code{measured},
@code{concat}, @code{head}, @code{iter}, @code{generate},
@code{display}, @code{format}, @code{functor}, @code{monad},
@code{mapping}, @code{folding}, @code{ixfold}, @code{searchable},
@code{filter} and @code{membership} are implemented for the
@code{cons} type.

In addition, the @code{coercion} contract is implemented from
@code{cons} lists to @code{map}s, @code{string}s and @code{vect}ors.

@node The Map Type
@subsection The Map Type

The @code{map} type denotes a set of key/value pairs. Its type is only
partially exposed:

@float Program,mapType
@caption{The @code{map} Type}
@example
all k,v ~~ equality[k], hash[k] |: map[k,v] <~ @{@}
@end example
@end float

All uses of the @code{map} type require that the key type supports
both @code{equality} and @code{hash}.@footnote{This is because the
underlying implementation requires it.}

@quotation Note
The underlying implementation of @code{map} is based on 'Ideal Hash
Trees'; which offer effectively constant time performance for
accessing and modifying the @code{map}.
@end quotation

The standard contracts @code{equality}, @code{sizeable},
@code{measured}, @code{display}, @code{indexed}, @code{ixfilter},
@code{ixfold}, @code{iter}, @code{generate}, @code{sequemce},
@code{stream} and @code{functor} are implemented for the @code{map}
type.

@node The Set Type
@subsection The Set Type

The @code{set} type supports set membership style functions. Its type
is partially exposed:

@float Program,setType
@caption{The @code{set} Type}
@example
all e ~~ equality[e], hash[e] |: set[e] <~ @{@}
@end example
@end float

Like the @code{map} type, using the @code{set} requires that element
type supports @code{equality} and @code{hash}.

The standard contracts @code{sequence}, @code{display},
@code{membership}, @code{setops}, @code{concat}, @code{sizeable},
@code{iter}, @code{folding} and @code{generate} are implemented for
the @code{set} type.

@node The Vector Type
@subsection The Vector Type

The @code{vect} type denotes a vector type, a list type that is
oriented to random access.

@float Program,vectorType
@caption{The @code{vect} Type}
@example
all k ~~ vect[k] <~ @{@}
@end example
@end float

@quotation Note
The underlying implementation of @code{vect} is based on a similar
strategy to the implementation of vectors in Clojure. Vectors are
represented as a multi-way branching tree; which offer effectively
constant time performance for accessing and modifying vectors up to a
significant size.
@end quotation

}@node Implemented Collection Contracts
@section Implemented Collection Contracts

For the vast majority of cases, the built-in functions that
are implemented for collections are mediated through contracts.

@node Equality Contract For Collections
@subsection Equality Contract For Collections

The @code{equality} contract (@refer{equalityContract}) is defined for
all the collection types; usually with requirement that the element
types also implement @code{equality}.



