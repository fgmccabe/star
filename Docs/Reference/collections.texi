@node Collections
@chapter Collections

This chapter defines the standard collection types.

@node Collection Types
@section Collection Types

@node The Cons List
@subsection The Cons List
@findex cons list

The @code{cons} type is defined as though by the type definition:

@float Program,consType
@caption{The @code{cons} List Type}
@example
all e ~~ cons[e] ::= nil | cons(e,cons[e]).
@end example
@end float

@node The List Type
@subsection The List Type

The @code{list} type is a built-in type that is used to represent linear sequences. It does not have a definition in terms of @refer{AlgebraicTypeDefinition}s.

The type signature for @code{list} types is given by:
@float Program,listType
@caption{The @code{list} List Type}
@example
all e ~~ list[e] <~ @{@}
@end example
@end float

@node The Map Type
@subsection The Map Type

The @code{map} type denotes a set of key/value pairs. Its type is only
partially exposed:

@float Program,mapType
@caption{The @code{map} Type}
@example
all k,v ~~ equality[k], hash[k] |: map[k,v] <~ @{@}
@end example
@end float

All uses of the @code{map} type require that the key type supports
both @code{equality} and @code{hash}.@footnote{This is because the underlying implementation requires it.}

@node The Set Type
@subsection The Set Type

@node Implemented Collection Contracts
@section Implemented Collection Contracts

For the vast majority of functions, all of the built-in functions that
are implemented for collections are mediated through contracts.

@node Equality Contract For Collections
@subsection Equality Contract For Collections

The @code{equality} contract (@refer{equalityContract}) is defined for
all the collection types; usually with requirement that the element
types also implement @code{equality}.



