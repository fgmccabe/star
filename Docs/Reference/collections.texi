@node Collections
@chapter Collections

This chapter defines the standard collection types. Note that all the
functions that are implemented over collection types are exposed via
contract implementations.

@node Collection Types
@section Collection Types

There are four basic collection types supported: @code{cons} lists, an
array-like @code{list} type, @code{map} type and the @code{set} type.

@node The Cons List
@subsection The Cons List
@findex cons list

The @code{cons} type is defined as though by the type definition:

@float Program,consType
@caption{The @code{cons} List Type}
@example
all e ~~ cons[e] ::= nil | cons(e,cons[e]).
@end example
@end float

@node The List Type
@subsection The List Type

The @code{list} type is a built-in type that is used to represent
linear sequences. It does not have a definition in terms of
@refer{AlgebraicTypeDefinition}s.

The type signature for @code{list} types is given by:
@float Program,listType
@caption{The @code{list} List Type}
@example
all e ~~ list[e] <~ @{@}
@end example
@end float

The internal implementation of @code{list} is not exposed; however, it
is intended that it supports constant-time access to elements of the
list -- making it somewhat array-like in performance.

@quotation Note
Internally, the implementation uses a @emph{Copy On Write} strategy
that has the effect of amortizing the cost of adding elements to the
list.
@end quotation

@node The Map Type
@subsection The Map Type

The @code{map} type denotes a set of key/value pairs. Its type is only
partially exposed:

@float Program,mapType
@caption{The @code{map} Type}
@example
all k,v ~~ equality[k], hash[k] |: map[k,v] <~ @{@}
@end example
@end float

All uses of the @code{map} type require that the key type supports
both @code{equality} and @code{hash}.@footnote{This is because the
underlying implementation requires it.}

@quotation Note
The underlying implementation of @code{map} is based on 'Ideal Hash
Trees'; which offer effectively constant time performance for
accessing and modifying the @code{map}.
@end quotation

@node The Set Type
@subsection The Set Type

The @code{set} type supports set membership style functions. Its type
is partially exposed:

@float Program,setType
@caption{The @code{set} Type}
@example
all e ~~ equality[e], hash[e] |: set[e] <~ @{@}
@end example
@end float

Like the @code{map} type, using the @code{set} requires that element
type supports @code{equality} and @code{hash}.

@node Implemented Collection Contracts
@section Implemented Collection Contracts

For the vast majority of cases, the built-in functions that
are implemented for collections are mediated through contracts.

@node Equality Contract For Collections
@subsection Equality Contract For Collections

The @code{equality} contract (@refer{equalityContract}) is defined for
all the collection types; usually with requirement that the element
types also implement @code{equality}.



