@node Date and Time
@chapter Date and Time

Date and time support revolves around the @code{time} built-in type.

@section The @code{time} Type

@subsection The @code{time} Type

The @code{time} type is a structure that refers to Unix time: i.e.,
the number of seconds since January 1st, 1970 GMT:

@example
public time ::= .time(float). -- Time since 1st Jan 1970
@end example

The underlying representation of time values is @code{float}; this
allows us to represent time values that are a fractional number of
seconds. However, the actual precision of time values depends on the
operating system; typically we expect at least microsecond precision.

@section Date and Time Functions

@subsection @code{now()}
@findex @code{now} function

The @code{now} function returns a @code{time} value that denotes the
current wall clock time:

@example
now: () => time
@end example

@subsection @code{today()}
@findex @code{today} function

The @code{today} function returns a @code{time} value that denotes the
wall clock time at midnight this morning:

@example
today: () => time
@end example

@subsection @code{ticks()}
@findex @code{ticks} function

@example
ticks: () => integer
@end example

The @code{ticks} function returns an integer that denotes the number
of micro seconds since the invokation of star program. This number is
not intended to be a reliable measure; in particular it will 'roll
over' every 73117 years.

@section Implemented Contracts

@subsection The @code{equality} contract

@subsection The @code{comp} contract

@c @subsection The @code{coercion} contract

@c Coercion is supported between 

@subsection The @code{display} contract

Times are displayed according to the standard format:

@example
www dd/mmm/yyyy hh:MM:SS aa
@end example

@subsection The @code{format} contract

The @code{_format} function computes a readable string representation of a
@code{time} as a string displaying the date and/or time. The second
argument is a format string that guides how to format the string.

The format string consists of letters, spaces and other characters;
the letters control the representation of some aspect of the date,
other non-letter characters are displayed as is in the
result. The individual code characters are shown

The @code{_format} function is typically used inside an interpolated string. For example:
@example
"$(today()):yyyy-mmm-ddd;"
@end example
shows the current date in the format @emph{year}-@emph{mon}-@emph{day}.

@subsubsection The @code{G} era code

The @code{G} code signifies the era; i.e., whether the year is before
the year zero or not. Years that are before year zero are designated
@code{BCE} (before common era) and later years are designated
@code{CE} (common era).

This is a repeated code, with 1 through 3 repetitions valid.

@subsubsection The @code{y} year code

The @code{y} code signifies the year.

This is a repeated code, with 1 through 4 repetitions valid. For example,

@example
_format(today(),"yy")
@end example
displays the least significant two digits of the year; and

@example
"$(today()):yyyy;"
@end example
shows the full 4 digit year.

@subsubsection The @code{m} month code

The @code{m} code signifies the month. This is a repeated code, with minimum 2 repitions.

If the code @code{m} or @code{mm} is used then the month is displayed
as a decimal number in the range 1-12, with @code{1} denoting January,
and 12 denoting December.

If the code @code{mmm} is used, then the month is written using the
three letter abbreviation (for example, @code{Jun} denoting June.

For a higher number of repetitions, the full name of the month is
printed. Note though that a minimum of nine repetitions is needed to
avoid truncating a month name.

@subsubsection The @code{w} day of week code

The @code{w} code signifies the day of the week. This is a repeated code, with minimum 1 repetition.

If the code @code{w} is used, then the day of the week is displayed as
a digit, with Sunday referred to as 0.

If the code @code{ww} or @code{www} is used then the day of the week
is displayed using a three letter abbreviation.

If more repetitions are used then the long form of the day of the week
is used. Although, in order to avoid truncating a week day name, there
should be eight repetitions.

For example, if it is Friday today, then
@example
_format(now(),"www")
@end example
results in 
@example
"Fri"
@end example
whereas
@example
"$(now()):wwwwwwww;"
@end example
would result in
@example
"  Friday"
@end example


@subsubsection The @code{D} day of the year code

The @code{D} code signifies the day of the year, in the range 1-366.

This is a repeated code, one should use @code{DDD} to ensure displaying all the days in the year.

@subsubsection The @code{d} day of the month code

The @code{d} code signifies the day of the current month, in the range 1-31.

This is a repeated code, one should use @code{dd} to ensure displaying all the days in any month.

@subsubsection The @code{H} hour of the day code

The @code{H} code signifies the hour, in the range 0-23. I.e., the
hour is displayed in maritime fashion, with 00 denoting midnight and
17 denoting 5 pm.

This is a repeated code, one should use @code{HH} to ensure displaying all the hours in the day.

@subsubsection The @code{h} hour of the day code.

The @code{h} code signifies the hour, in the range 0-11, the number of
hours since midnight or noon.

This is a repeated code, one should use @code{hh} to ensure displaying all the hours in the day.

@quotation Note
It is recommended to also use the @code{a} or @code{A} codes to indicate AM or PM.
@end quotation

@subsubsection The @code{M} minutes of the hour code

The @code{M} code signifies the number of minutes since the top of the hour; in the range 0-59.

@subsubsection The @code{S} seconds of the minute code

The @code{S} code signifies the number of seconds since the beginning
of the current minute; in the range 0-59.

@subsubsection The @code{a}, @code{A} AM/PM codes

The @code{a} and @code{A} codes are used to designate whether a time
is before noon or after. Use @code{a} to show @code{am} or @code{pm}
and use @code{A} to show @code{AM} or @code{PM} respectively.

This is a repeated code, one should use @code{aa} or @code{AA}.

@subsubsection The @code{z} timezone code.

The @code{z} code is used to show a string indicating the time zone associated with the time.

@subsubsection The @code{Z} timezone code.

The @code{Z} code is used to show the time zone in standard numeric format.

This is a repeated code, the valid forms are 3, 5 and 6 repetitions:

@itemize
@item
If @code{ZZZ} is used, then the time zone shows the number of hours
since UTC, e.g., pacific standard time is -08 hours.
@item
If code @code{ZZZZZ} is used, then the time zone shows the number of
hours and minutes in the format +HHMM.
@item
If code @code{ZZZZZZ} is used, then the time zone shows the number of
hours and minutes in the format +HH:MM.
@end itemize

@subsubsection All other characters

Any other characters in a time format string are displayed as is. This allows the use of characters such as @code{-} to separate fragments of a date and @code{:} to separate time segments.

@section Other time related functions

@subsection @code{timeDiff} -- the difference between two times

@example
timeDiff:(time,time) => float
@end example

The @code{timeDiff} returns the difference between two times -- expressed as a floating point number of seconds.

@subsection @code{timeDelta} -- increment a time

@example
timeDelta:(time,float) => time
@end example

The @code{timeDelta} function adds a number of seconds to a
@code{time} value to obtain a new @code{time}. For example, to get the
@code{time} corresponding to yesterday we can do:

@example
yesterday() => timeDelta(today(),-86400000.0)
@end example

@subsection @code{parseTime} -- parse a time

The @code{parseTime} function parses a string using a format string as
guidance for the format of the date/time.

@example
parseTime:(string,string)=>option[time]
@end example

The first argument is the string to parse, the second is a format string as defined above.

For example, if we have a date string produced:
@example
Td = _format(today(),"yyyy-mm-dd")
@end example
we can parse the result using the same format:
@example
parseTime(Td,"yyyy-mm-dd")
@end example

Since parsing is not guaranteed (the date/time may not be parseable
using the guiding format string) the return type from @code{parseTime}
is @code{option}al.
