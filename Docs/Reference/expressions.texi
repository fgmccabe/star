@node Expressions
@chapter Expressions

An expression is a form that denotes a @emph{value}. Evaluation is the
computational process of realizing the denoted value. Associated with
all expressions is a @refer{Type} -- which governs the valid
expressions and actions that the expression itself may be part of.

@float BNF,expressionFig
@caption{Expression}
@display
@anchored{Expression}::=@refer{Variable}
  | @refer{NumericLiteral}
  | @refer{StringLiteral}
  | @refer{AlgebraicLiteral}
  | @refer{ApplicativeExpression}
  | @refer{FieldAccess}
  | @refer{RecordUpdate}
  | @refer{CaseExpression}
  | @refer{TryCatchExpression}
  | @refer{RaiseExpression}
  | @refer{ConditionalExpression}
  | @refer{Condition}
  | @refer{ThunkExpression}
  | @refer{LetExpression}
  | @refer{ValofExpression}
  | @refer{LambdaExpression}
  | @refer{TypedExpression}
  | @refer{SequenceExpression}
  | @refer{RangeExpression}
  | @refer{IndexExpression}
  | @refer{SliceExpression}
@end display
@end float

@node Variables
@section Variables
@cindex variables

A @refer{Variable} is a placeholder that denotes a value. Variables
may be used to denote many kinds of values -- arithmetic values,
complex data structures and programs.

@float BNF,variableFig
@caption{Variable}
@display
@anchored{Variable}::=@refer{Identifier}
@end display
@end float

@quotation Note
Any given variable has a single type associated with it and may only
be bound to values of that type.@footnote{We sometimes informally
refer to a variable being `bound' to a value X (say). This means that
the value associated with the variable is X.}
@end quotation

Variables have a scope -- a syntactic range over which they are
defined. Variables can be said to be free in a given scope --
including functions that they are referenced within.

Variables are @emph{single-assignment}; i.e., once given a value, a
variable may not be reassigned to. Furthermore, all variable
introductions are in contexts where the variable is given a value.

However, it is possible to give a variable a @code{ref} type; which
permits the variable's value to be effectively re-assigned.

@quotation Note
Technically, assigning to a @code{ref} variable is not changing the
variable itself, but is changing the contents of the cell that denotes
the @code{ref} variable's value.
@end quotation

@node Re-assignable Variables in Expressions
@subsection Re-assignable Variables in Expressions
@cindex referring to re-assignable variables,in expressions
There are two modes of referring to re-assignable variables in
expressions: to access the value of the variable and to access the
variable itself. The primary reason for the latter may be to assign to
the variable, or to permit a later assignment.

An undecorated occurrence of a variable denotes access to the variable
itself, whereas if the access is decorated with a @code{!} then that
refers to the variable's value. Thus, given a variable declaration:
@example
Cx := 0
@end example

then the reference to @code{Cx} in the expression:
@example
Cx+3
@end example
is not legal because @code{Cx} here does not refer to the variable's
value. Instead use:
@example
Cx!+3
@end example

@node Modifying Fields of Records
@subsection Modifying Fields of Records

Assignability of variables does @emph{not} automatically imply that the
value of the variable is itself modifiable. Thus, given a variable
declaration such as:

@example
P := someone@{ name="fred"; age=23 @}
@end example

the assignment:
@example
P.age := 24
@end example

is not valid -- because, while we can assign a new value to @code{P},
that does not confer an ability to modify the value that @code{P} has.

However, by marking a @emph{field} of a record type as a @code{ref}
type, then we @emph{can} change that field of the record. Thus, for
example, if the type of @code{person} were:
@example
person ::= person@{
  name : string.
  age : ref integer.
@}
@end example

then the assignment:
@example
P.age := 24
@end example
is valid.
@quotation Note
Note that one may change a suitably declared field of a record even
when the variable 'holding' the record it not itself re-assignable.
@example
P = someone@{ name="fred". age := 23 @}
@end example

I.e., re-assignability depends only on whether the target is re-assignable.
@end quotation

In addition to modifying the contents of a re-assignable variable,
there is a @refer{RecordUpdate} expression which does not modify a
record but can be used to construct a new record value by replacing a
field in the record.

@node Numeric Literal Expressions
@section Numeric Literal Expressions
@cindex numeric literal
There are three forms of numeric literal expression: integers
(@ref{Integer Literal}), arbitrary precision integers
(@ref{Arbitrary Precision Integer}) and floating point numbers (@ref{FloatingPoint}).

@node Integer Literal
@subsection Integer Literal
@cindex integer

The @code{integer} type is used to denote integral values in the range
-2305843009213693952..2305843009213693951.@footnote{I.e., 62 bit
precision.}

Integers may be written in a variety of styles (see
@refer{decimalFig}; the most common form is the simple
@refer{Decimal} notation.

@node Arbitrary Precision Integer
@subsection Arbitrary Precision Integer
@cindex integer
@cindex arbitrary precision integer

Arbitrary precision integers do not have a fixed upper limit in their
range: in principle, a single number could take the entire memory of
the computer.@footnote{Not recommended.}

Arbitrary precision integers are written as a sequence of decimal
digits prefixed by a @code{0b}:

@example
0b815915283247897734345611269596115894272000000000
@end example

It is possible to coerce between so-called @emph{bigint}s and regular
integers; although it is not guaranteed to be possible in all cases.

@node Floating Point Literals
@subsection Floating Point Literals
@cindex float

The @code{float} type is used to represent fractional values. Floating
point numbers are represented as IEEE double precision -- i.e., 64
bit.

@quotation Note
In fact, the precision of floating numbers is limited to 62 bits. The
least significant bits are dropped.
@end quotation


The syntax of floating point numbers is given in
@ref{floatingPointFig}.

@node String Literal Expressions
@section String Literal Expressions
@cindex string literals

The @code{string} type is used to denote string values. There are two
main forms of @code{string} literal: the double-quoted string
expression and the triple-quoted or block-quoted @code{string}
literal.

The syntax of @code{string} literals is given in @ref{quotedStringFig}.
The simplest form of @code{string} literal is a sequence of characters
enclosed in double-quotes:

@example
"A string literal with 35 characters"
@end example

@node String Interpolation
@subsection String Interpolation
@cindex string interpolation
@anchor{stringInterpolation}
String interpolation refers to the embedding of expressions in string
literals. The actual string value of an interpolated @code{string}
literal requires the evaluation of those expressions.

For example, given a variable @code{X} with the value 24, then:
@example
"this has the value of X: $(X)"
"$(X*X) people saw this"
@end example

would have values:
@example
"this has the value of X: 24"
@end example
and
@example
"576 people saw this"
@end example
respectively.

There are three forms of interpolation expression: a display
interpolation, a formatted interpolation and an embedded
interpolation.

@quotation Note
If a @code{string} interpolation expression itself contains a string,
the various quoting mechanisms for strings apply to that string
also. I.e., it is not necessary to `double-quote' strings within
@code{string} interpolation expressions.

For example, the @code{string} expression in:

@example
"The price of cheese is $(priceOf("cheese"))"
@end example

works as expected: the argument to the @code{priceOf} function is the
string literal @code{"cheese"}. An even more nested example is:
@example
"The price of $(P) is $(priceOf("SKU$(P)"))"
@end example

In this example, we have a @code{string} interpolation expression embedded
within another @code{string} interpolation expression.
@end quotation

An @refer{Interpolation} expression may be followed by a
@refer{FormattingSpec}. If present, then this specification is used to
guide how values are formatted.

For example, the value of
@example
"--$(120345567):999,999,999,999;--"
@end example

is the string:
@example
"--120,345,567--"
@end example

Detailed formatting is controlled by the @code{format} contract -- see
@refer{formatContractProg} -- in particular the different
implementations of that contract which in turn means that different
types of expression will have type appropriate ways of specifying the
formatting.

@node Semantics of String Interpolation
@subsubsection Semantics of String Interpolation

String interpolation expressions may refer to variables that are in
scope at the location of the string literal itself.

An expression of the form:
@example
"@var{prefix}$(@var{Exp})@var{suffix}"
@end example

is interpreted as: 
@example
_multicat([@var{prefix},disp(@var{Exp}),@var{suffix}])
@end example

If a @refer{FormattingSpec} is present, then the translation takes
that into account also. For example, the expression:

@example
"@var{prefix}$(@var{Exp}):@var{Format};@var{suffix}"
@end example

is equivalent to the expression: 
@example
_multicat([@var{prefix},frmt(@var{Exp},@var{Format}),@var{suffix}])
@end example

where @code{frmt} is part of the @code{format} contract -- see
@refer{formatContract}.

The standard @code{_multicat} function takes a list of @code{string}
values and concatentates them into a single @code{string} value.

@quotation Note
@code{_multicat} is itself defined via a contract specification: it is
part of the @code{concat} contract. 
@end quotation

@node String Embedding
@subsubsection String Embedding
@cindex string embedding
@anchor{stringEmbedding} String embedding is a simpler form of string
interpolation where the contents of the embedded expression are
expected to be already @code{string}-valued and are simply
subistituted in place.

For example, given a variable @code{F} with the value @code{"foo"}, then:
@example
"#(F) is the complement of bar"
@end example

would have values:
@example
"foo is the complement of bar"
@end example

@node Block Strings
@subsection Block Strings
@cindex block string

A @var{BlockString} is a string literal that consists of a sequence of
characters enclosed in triple quotes; as defined in
@ref{blockStringFig}.

The principal difference between a @var{BlockString} and a regular
@var{QuotedString} is that no interpretation of characters in the text
is made. I.e., there is no equivalent of string interpolation and nor
are any escape characters interpreted.

In addition, @var{BlockString}s can span multiple lines whereas
@var{QuotedString}s are not permitted to include new-line characters.

@node Algebraic Constructor Expressions
@section Algebraic Constructor Expressions

The @refer{Constructor} expressions are those that refer to
constructors that are defined in @refer{AlgebraicTypeDefinition}s.

There are three primary forms of @refer{Constructor}s:
@itemize
@item
@refer{EnumeratedSymbol}s
@item
@refer{PositionalConstructorLiteral} terms, and
@item
@refer{RecordLiteral} terms.
@end itemize

@float BNF,algebraicExpressionFig
@caption{Algebraic Constructor Expressions}
@display
@anchored{AlgebraicLiteral} ::= @refer{EnumeratedSymbol}
  | @refer{PositionalConstructorLiteral}
  | @refer{RecordLiteral}
@end display
@end float

@node Enumerated Symbols
@subsection Enumerated Symbols
@cindex enumerated symbols

Enumerated symbols are written using regular identifiers (see
@refer{enumeratedSymbolFig}) -- prefixed with a period. Such a symbol
must first have been declared within a type definition statement which
also determines the type of the symbol.

@float BNF,enumeratedSymbolFig
@caption{Enumerated Symbol}
@display
@anchored{EnumeratedSymbol} ::= @code{.}@var{Identifier}
@end display
@end float

For example, the @code{boolean} type definition has two
@refer{EnumeratedSymbol}s in its definition: @code{.true} and
@code{.false}. Thus

@example
.true
@end example
 
is an expression consisting of an @refer{EnumeratedSymbol} from the
type definition:
@example
boolean ::= .true | .false.
@end example

Enumerated symbols have no internal structure; they are often used
to define enumerations or for sentinels. For example, the
standard cons-list type uses @code{nil} to mark the empty list:

@example
all e ~~ cons[e] ::=  .nil | .cons(e,cons[e])
@end example

@quotation Note
The period in front of an enumerated helps to highlight the special
role of enumerated symbols. It also helps to prevent silent errors
caused by mistyping an enumerated symbol.
@end quotation

@node Positional Constructor Literals
@subsection Positional Constructor Literals
@cindex positional constructor

@refer{PositionalConstructorLiteral} expressions denote data
constructor values. In particular, it refers to positional
constructors that are introduced in an algebraic
@refer{TypeDefinition}.

@float BNF,positionalConstructorFig
@caption{Positional Constructor Literal}
@display
@anchored{PositionalConstructorLiteral} ::= @code{.}@refer{Identifier}@code{(}@refer{Expression}@code{,} @dots{} @code{,}@refer{Expression}@code{)}
@end display
@end float
The valid types of the arguments to a
@refer{PositionalConstructorLiteral} are determined by its definition
within the appropriate type definition.

For example, in the type definition:
@example
address ::= .noWhere | .someWhere(string,integer,string)
@end example

@code{someWhere} as the identifier of a
@refer{PositionalConstructorLiteral} and any instance must have
exactly three arguments: a @code{string}, an @code{integer} and a
@code{string}.

@quotation Note
Positional constructors, like @refer{EnumeratedSymbol}s, are marked by
a leading @code{.} character. This helps to distinguish such
expressions from normal function calls.
@end quotation

@node Accessing Elements of a Positional Constructor Literal
@subsubsection Accessing Elements of a Positional Constructor Literal
The only way that elements of a @refer{PositionalConstructorLiteral}
can be @emph{accessed} is via a pattern match -- see
@refer{posConPattern}. For example, given the definition of
@code{address} above, we can 'unpack' its argument using a pattern
such as in
@example
city(someWhere(City,_,_)) => City
@end example

Unlike positional constructors, records allow their fields to be
addressed individually.

@node Record Literals
@subsection Record Literals
A record literal is a collection of values identified by name.

Like @refer{PositionalConstructorLiteral}s, the @refer{RecordLiteral} must have
been defined with a @refer{TypeDefinition} statement. This also
constrains the types of the expressions associated with the fields.

@float BNF,recordConstructorFig
@caption{Record Literal}
@display
@anchored{RecordLiteral}::=@refer{Record} | @refer{RecRecord}
@anchored{Record} ::= @refer{Identifier}@code{@{} @refer{RecordElement} @refer{Terminator} @dots{} @refer{Terminator} @refer{RecordElement} @code{@}}
@anchored{RecordElement} ::= @refer{Identifier} @code{=} @refer{Expression}
| @refer{Identifier} @code{:=} @refer{Expression}
| @refer{TypeAliasStmt}
@end display
@end float

There are two variants of the @refer{RecordLiteral}: the
@refer{Record} form and the @refer{RecRecord} form. This section
focuses on the former.

For example, given the type definition: 
@example
employee ::= emp@{
  name : string.
  hireDate : date.
  salary : ref integer.
  dept : ref string.
@}
@end example
       
A literal @code{emp} value will look like: 
@example
E = emp@{ name = "Fred Nice".
  hireDate = today().
  salary := 23000.
  dept := "mail"
@}
@end example
  
@quotation Note
Fields whose type is a @refer{ReferenceType} are defined within the
record using the @code{:=} operator. All other fields are defined
using the @code{=} operator.
@end quotation

For any given @refer{RecordLiteral} @emph{all} the fields of the
record must be associated with a value. This value is either
explicitly given or can be supplied by a @code{default} declaration within
the type definition itself.

Fields within a @refer{RecordLiteral} are identified by name; and may
be written in any order.

@node Accessing Fields of a Record
@subsection Accessing Fields of a Record
@cindex record access
@findex . operator

Record access expressions access the value associated with a field of
a record value. 

@float BNF,recordAccessFig
@caption{Field Access}
@display
@anchored{FieldAccess}::=@refer{Expression} @code{.} @refer{Identifier}
@end display
@end float

An expression of the form 
@example
A.F
@end example

where @code{F} is the name of an attribute of the record @code{A} denotes the
value of that attribute. For example, given the type definition

@example
person ::= someone@{ name : string. age : integer @}
@end example

and a @code{person} value bound to @code{P}: 
@example
P = someone@{ name="fred". age=32 @}
@end example

then the expression @code{P.name} has value @code{"fred"}.

@quotation Note
The binding of the record access operator (@code{.}) is very strong. Thus,
expressions such as @code{A.L[ix]} and @code{A.F(a,b*3)} are equivalent to

@example
(A.L)[ix]
@end example
and
@example
(A.F)(a,b*3)
@end example
respectively.
@end quotation

@node Updating Fields of a Record
@subsection Updating Fields of a Record
@cindex record update
@findex . operator
@findex = operator

A record cannot be updated in the normal sense -- unless one or more
of the fields of the record is marked as being a reference
variable. However, there is a notation for constructing a new literal
from an existing record, replacing one or more of the fields with new
values.

@float BNF,recordUpdateFig
@caption{Record Update}
@display
@anchored{RecordUpdate}::=@refer{Expression} @code{.} @refer{Identifier} @code{=} @refer{Expression}
@end display
@end float

An expression of the form 
@example
A.F=B
@end example

where @code{F} is the name of an attribute of the record @code{A}
denotes a version of @code{A} with the @code{F} field replaced by
@code{B}.

The type of the overall expression is the same as the type of
@code{A}; since we are essentially creating a variant of @code{A}.

@example
person ::= someone@{ name : string. age : integer @}
@end example

and a @code{person} value bound to @code{P}: 
@example
P = someone@{ name="fred". age=32 @}
@end example

then the expression @code{P.name="peter"} has value
@example
someone@{ name="peter". age=32 @}
@end example

@quotation Note
The old version of the record -- @code{P} -- is still available, if it
is still accessible.
@end quotation

@node Recursive Record Literals
@subsection Recursive Record Literals
@cindex theta record

A @refer{RecRecord} is a record whose contents is specified by means
of a sequence of @refer{Definition}s.

@float BNF,thetaRecordFig
@caption{Theta Record}
@display
@anchored{RecRecord} ::= @refer{Identifier}@code{@{.} @refer{Definition}@refer{Terminator} @dots{} @refer{Terminator} @refer{Definition} @code{.@}}
@end display
@end float

Externally, a @refer{RecRecord} is the same as a regular
@refer{Record}; internally, however, its fields are defined
differently using @refer{Definition}s. @refer{Definition}s include
@refer{RecordElement} but may also include @refer{TypeDefinition}s and
other forms of definition.

Importantly, @emph{within} a @refer{RecRecord}, definitions may be
@emph{mutually recursive}.

@refer{RecRecord}s are especially convenient when the fields of the
record are program values. For example, assuming a type definition
such as: 
@example
onewayQ[t] ::= onewayQ@{
  add : (t)=>action[(),()].
  take : ()=>t.
@}
@end example
then the literal: 
@example
onewayQ@{.
  private Q := [].
  add(X) => action @{
    Q := [Q..,X];
    return ()
  .@}
  take() => valof action@{
    H = head(Q);
    Q := tail(Q);
    return H
  @}
@}
@end example
defines a @code{onewayQ} record with two exposed values -- the
functions @code{add} and @code{take}.

@quotation Note
If there are extra definitions, they should be marked @code{private}
which will exclude them from the record's type signature.
@end quotation

@quotation Note
A @refer{RecRecord} has many of the characteristics of an object in
OO languages -- except that there is no concept of inheritance; nor is
there a direct equivalence of the @code{self} or @code{this} keyword.
@end quotation

@quotation Note
A definition within a @refer{RecRecord} that is marked
@code{private} does @emph{not} 'contribute' to the external type of
the record; and neither can such an attribute be accessed via the
@refer{FieldAccess} expression.
@end quotation

@node Tuples
@section Tuples
@cindex tuples
A tuple consists of a sequence of expressions separated by commas and
enclosed in parentheses. In effect, a tuple is a
@refer{PositionalConstructorLiteral} where the @refer{Identifier} is
omitted.

@float BNF,tupleFig
@caption{Tuple Literal}
@display
@anchored{TupleLiteral}::= @code{(} @refer{Expression}@code{,} @dots{} @code{,} @refer{Expression} @code{)}
@end display
@end float

Tuples allow a straightforward and casual grouping of values
together without requiring a specific type definition of a data
structure.
@quotation Note
Unlike @refer{PositionalConstructorLiteral}s, the set of possible
tuples @emph{cannot} be defined using a
@refer{TypeDefinition}. Instead, the tuple types form a @emph{type
schema}.

@quotation Note
Not a single type, because each arity of anonymous tuple type denotes
a different type. However, all tuples are related by their tuple-ness.
@end quotation
@end quotation

In that tuples can be used to group elements together, they are
somewhat similar to arrays. However, unlike arrays, each element of a
tuple may be of a different type, and also unlike arrays, tuple
elements may not be accessed via an indexing operation: tuples can
only be unwrapped by some form of pattern matching.

For example, if the @code{split} function splits a list into a front half
and back half, it may be used in a statement of the form: 
@example
(F,B) = split(L)
@end example
which has the effect of unpacking the result of the @code{split} function
call and binding the variables @code{F} and @code{B} to the front half and back
half of the list @code{L}.

The tuple notation is unremarkable except for two cases: the single
element tuple and the zero element tuple.

@node Zero-ary Tuples 
@subsection Zero-ary Tuples
@cindex 0-ary tuples
Zero-element tuples @emph{are} permitted. A zero-element tuple, which
is written

@example
()
@end example 
is essentially a symbol.

A tuple of no values is effectively the same as void and is used to
signal void or empty arguments.

@node Singleton Tuples
@subsection Singleton Tuples
Some special handling is required to represent tuples of one element.

The principal issue is the potential ambiguity between a tuple with
one element and a normal operator override expression.

For example, 
@example
(a+b)*c
@end example
is such a case: the inner term @code{(a+b)} is not intended to denote a
tuple but simply the sum of @code{a} and @code{b}.

A singleton tuple @emph{may} be written; by doubly parenthesizing
it. An expression of the form: 
@example
((34))
@end example
denotes a singleton tuple with the integer @code{34} in it.

@quotation Note
Fortunately, singleton tuples are not often required in programs.
@end quotation

@node Accessing Tuples
@subsection Accessing Tuples
We can access the elements of a tuple by pattern matching, as in:

@example
(A,B) .= @var{Ex}
@end example

We can also access a tuple by index:

@example
T.3
@end example

This type will access the fourth element of @code{T} (elements of a
tuple start at index 0). The type of this element depends on the the
type of @code{T}: which is constrained to be a tuple of at least four
elements.

@quotation Note
The element being indexed must be identified by a literal
integer. @Star{} does not support dynamic access to tuple elements.
@end quotation


@node Function Application Expressions
@section Function Application Expressions
@cindex expressions,function application

A function application expression applies a function to zero or more
arguments.

@float BNF,applicationFig
@caption{Function Application Expression}
@display
@anchored{ApplicativeExpression} ::= @refer{Expression} @code{(} @refer{Expression}@code{,} @dots{} @code{,} @refer{Expression}@code{)}
@end display
@end float

It is quite normal for the function expression being applied to
arguments itself to be the result of a function application. For
example, given the function @code{double}:
@example
double : all s ~~ (((s)=>s))=>((s)=>s)
double(F) => (X) => F(F(X))
@end example

we can apply @code{double} to @code{inc}: 
@example
inc : (integer)=>integer.
inc(X) => X+1.
@end example

to get an expression such as: 
@example
double(inc)(3)
@end example

which has value 5.

@quotation Note
The @refer{PositionalConstructorLiteral} expression is actually a form of the
@refer{ApplicativeExpression}; where the function being applied is the
constructor defined in a @refer{TypeDefinition}.
@end quotation

@node Control Expressions
@section Control Expressions
@cindex control expression

The so-called control expressions involve and modify the meaning of
other expressions and actions.

@node Case Expression
@subsection Case Expressions
@cindex case expression

@float BNF,caseExpressionFig
@caption{Case Expression}
@display
@anchored{CaseExpression} ::= @code{case}@refer{Expression} @code{in} @refer{CaseHandler}

@anchored{CaseHandler} ::= @code{@{} @refer{CaseRule}@code{.} @dots{} @code{.} @refer{CaseRule}  @code{@}}

@anchored{CaseRule} ::= @refer{Pattern} @code{=>} @refer{Expression} |
  @refer{Pattern} @code{default} @code{=>} @refer{Expression}
@end display
@end float

The value of a case expression depends on which of the cases match its
governing expression.

For example, the expression: 
@example
case D in @{
  monday => 0.
  tuesday => 1.
  _ => 10
@}
@end example

compares the value of the variable @code{D} against the symbols
@code{monday} and @code{tuesday} and returns 0 or 1 if either of those
match. Other values of @code{D} return @code{10}.

@quotation Note
The cases of a case expression resemble syntactically the equations of
a function definition. This is deliberate: a function definition
expressed as equations is effectively a @code{case} expression.
@end quotation

@node Try Catch 
@subsection Try Catch
@cindex try catch 
@findex try
@findex catch

The @refer{TryCatchExpression} expression is used to denote an expression which may
need to respond to exception situations. 

@float BNF,tryCatchFig
@caption{Try Catch}
@display
@anchored{TryCatchExpression} ::= @code{try} @refer{Expression} @code{catch} @refer{Type} in @refer{CaseHandler}
@end display
@end float

The type of any exception thrown within the body of the
@code{try}@dots{}@code{catch} must be consistent with the handler. For
example, in:
@example
try@{
  raise 10
@} catch integer in @{
  (E) => E+10
@}
@end example
the type of @code{E} is @code{integer}; which is consistent with the expression
@example
raise 10
@end example
The value of this overall expression is @code{20}.

Exception handler expressions may be nested within one another; and
their exception types may be different. However, when an exception is
raised, only a single exception handler will be applied: there is no
automatic cascading of exceptions from one handler to another.

@quotation Note
Exception handling exposes a -- somewhat annoying -- limitation on
type inference.  This affects functions that do not themselves raise
any exceptions, but which must work in situations where exceptions may
occur.

Consider the example:
@example
tester:all e ~~ (()=>integer raises e)=>integer raises e.
tester(F) => F().

...

try@{
  if tester(ζmyFoo) then ...
@} catch () in @{ ... @}
@end example

If the @code{myFoo} function does raise an exception, then, clearly,
the only exception that can be handled in the call to @code{tester} is
the unit exception -- @code{()}.

However, suppose that @code{myFoo} does not actually raise an
exception. In order for the call to @code{tester} to type check, we
are required to declare @code{myFoo} with a @code{raises} qualifier.

Given that @code{myFoo} doesn't actually raise an exception, this
definition should suffice:

@example
myFoo:()=>integer raises _
@end example

I.e., we should be able to use @code{myFoo} in the context of any
exception handler -- because it does not actually throw an exception.

Unfortunately, this does not work. In particular, the call to
@code{tester} will fail to type check.

The reason is that, although there is an exception handler for
@code{()} in scope, the compiler cannot assume that all exceptions in
the scope will be of type @code{()}. That, in turn, results in an
error of the form:

@example
cannot find a exception context for %_e at ..
@end example

A good rule of thumb to avoid this kind of problem is to avoid the use of generic 
@end quotation

@node Raise
@subsection Raise
@cindex raise

@float BNF,raiseFig
@caption{Raise}
@display
@anchored{RaiseExpression} ::= @code{raise} @refer{Expression}
@end display
@end float

When a @code{raise} expression is evaluated, its expression is
evaluated and that value is raised as an exception. There must either
be a @refer{TryCatchExpression} form, a @refer{TryCatchAction} form in
the enclosing lexical scope, or the function in which it occurs must
have been declared as raising a value of the appropriate type -- i.e.,
it must have been declared as having been constrained with a
@code{raises} constraint.

@quotation Note
The type of a @code{RaiseExpression} is unconstrained -- because its value is
never consumed.
@end quotation

@quotation Note
If evaluating the expression that denotes the exception to raise
itself raises an exception, that is a fatal error and causes overall
execution of the program to stop.
@end quotation

@quotation Note
There is no automatic search for an handling form: every @code{raise}
must be lexically accounted for.
@end quotation

@node Conditional Expression
@subsection Conditional Expressions
@cindex conditional expression

@float BNF,conditionalExpressionFig
@caption{Conditional Expression}
@display
@anchored{ConditionalExpression} ::= @code{(}@refer{Condition} @code{??} @refer{Expression} @code{||} @refer{Expression}@code{)}
@end display
@end float

The value of a conditional expression depends on whether the
@refer{Condition} is satisfiable or not. If the @refer{Condition} is
satisfiable, then the expression is equivalent to the 'then' branch of
the conditional expression; otherwise it is equivalent to the 'else'
branch.

For example, the expression: 
@example
(P in members ?? X>Y || X<Y)
@end example

is equivalent to one of @code{X>Y} or @code{X<Y} depending on whether the
@refer{Condition}: 
@example
P in members
@end example
is satisfiable -- i.e., has at least one solution.

The condition of a conditional expression may introduce variables,
depending on the form of the condition -- for example, if the
@refer{Condition} is a @refer{SearchCondition} condition like that
above. These variables are 'in scope' within the 'then' part of the
conditional expression but are @emph{not} in scope for the 'else'
part.

@quotation Note
The only guarantees as to evaluation of a
conditional expression are that
@enumerate
@item
the conditional will be evaluated prior to evaluating either arm of
the conditional
@item
only one of the arms will be evaluated -- depending
on the value of the condition.
@end enumerate
@end quotation

@node Thunk Expressions
@subsection Thunk Expressions
@cindex thunk expression

@float BNF,thunkExpressionFig
@caption{Thunk Expression}
@display
@anchored{ThunkExpression} ::= @code{$$} @refer{Expression}
  | @refer{Expression} @code{!!}
@end display
@end float

Thunk expressions are @emph{delayed} or @emph{lazily evaluated}
expressions: the value of a thunk expression is computed the first
time it is needed.

Thunk expressions have two flavors: the thunk expression -- which
establishes a value to be computed at some point in the future -- and
the thunk reference expression which accesses the value of the thunk,
and, if not previously evaluated, evaluate the delayed expression.

For example, a thunk to add two numbers might be:

@example
Thk = $$ (x+2)
@end example

The embedded expression is not immediately evaluated. However, the
values of any @emph{free} variables (in this case @code{x}), are
frozen at this time.

To access the value of a thunk, we use the @code{!!} operator:

@example
Thk!!
@end example

This evaluates the embedded expression, if it was not prieviously
evaluated. Otherwise, it returns the value computed. In this sense,
thunks are effectively a means of @emph{memoizing} computations.

We can see this by modifying the generic fibonacci function, whose
naive definition is:

@example
fib(0) => 1.
fib(1) => 1.
fib(N) => fib(N-1)+fib(N-2)
@end example

to use thunks:
@example
memFib(N) => let@{
  fibs = @{ $$(fb(ix-1)+fb(ix-2)) | ix in range(2,N,1) @}:vector[thunk[integer]].
  fb(0) => 1.
  fb(1) => 1.
  fb(ix) where F?=fibs[ix] => F!!
@} in fb(N-1)
@end example

This version of fibonacci is linear in @code{N}, whereas the
recursive version is exponential in @code{N}.

@node Let Expressions
@subsection Let Expressions
@cindex let expressions

A @code{let} expression allows an expression to be defined in terms of
auxiliary definitions.

@float BNF,letExpressionFig
@caption{Let Expression}
@display
@anchored{LetExpression}::=@code{let} @refer{LetEnvironment} @code{in} @refer{Expression}
@anchored{LetEnvironment} ::= @code{@{} @refer{RecordElement}@refer{Terminator} @dots{} @refer{Terminator} @refer{RecordElement} @code{@}} |
  @code{@{.} @refer{Definition}@refer{Terminator} @dots{} @refer{Terminator} @refer{Definition} @code{.@}}
@end display
@end float

A @code{let} expression consists of a body -- which is an
@refer{LetEnvironment} -- and a bound @refer{Expression}. The type of
a @code{let} expression is the type of the bound expression.

There are two forms of let expressions, recursive and
non-recursive. The non-recursive form is written using the @code{@{}
and @code{@}} brackets, whereas the recursive environment is written
using @code{@{.}  and @code{.@}} brackets.

Both environments support value and type definitions; the recursive
environment allows mutually recursive definitions to be constructed.

Within a non-recursive let environment, the elements being defined are
not themselves in scope: only variables and types that are defined
outside the environment are in scope within the environment.

@quotation Note
This is different to the rule for some languages that allow a form of
sequential scope within a let environment: i.e., they allow later
definitions to rely on earlier definitions. However, in @Star{}, a let
environment is also permitted inside a record expression which would
result in a significantly confusing situation.
@end quotation

@quotation Note
@code{let} expressions are an important program structuring tool for
programmers. It is worth emphasizing that @code{let} expressions are
expressions! They can be used in many, perhaps unexpected, places.

For example, a @code{sort} function may require a comparison predicate in
order to operate. This can be supplied as a named function: 
@example
pComp : (person,person)=>boolean.
pComp(someone@{name=N1@},someone@{name=N2@}) => N1<N2

S = sort(L,myCompare)
@end example

Or, the same may be achieved where the call to @code{sort} is not so
conveniently close to a definition environment: 
@example
sort(L, let@{
  pComp(someone@{name=N1@},someone@{name=N2@}) => N1<N2
@}
in pComp)
@end example

Of course, in this case, the @code{sort} expression could equally have
been written using a lambda expression:
@example
sort(L, (someone@{name=N1@},someone@{name=N2@}) => N1<N2)
@end example

The @code{let} expression has major applications when constructing
function-returning functions.
@end quotation

@node Optional Expressions
@subsection Optional Expressions
@cindex optional expressions

An @code{option} expression is used to handle cases where a value is not
always guaranteed. The @code{option} type is built-in but is defined as
though by the algebraic type definition in:

@float Program,optionTypeDef
@caption{@code{option} Type Definition}
@example
option[t] ::= .none | .some(t)
@end example
@end float

The @code{option} type is intended to convey one of two possibilities:
a given value exists -- in which case the @code{some} constructor is
used -- or no value exists -- in which case @code{none} is used.

For example, 
@example
some("alpha")
@end example

signals the definite tring value @code{"alpha"}; whereas 
@example
.none
@end example
signals that there is no value.

The @code{option} type is used as the return type of functions that
must reliably signal whether or not a value exists.
@quotation Note
The @code{option} type serves as a normal replacement for @code{null} that one
sees in languages like Java.
@end quotation

@node Typed Expressions
@section Typed Expressions
@cindex typed expressions
A type annotation expression is an explicit declaration of the type of
an expression. A type coercion expression denotes a conversion of a
value so that it conforms to a particular type.

@float BNF,typedExpressionFig
@caption{Typed Expression}
@display
@anchored{TypedExpression}::= @refer{TypeCoercion} | @refer{TypeAnnotationExpression}
@end display
@end float

@node Type Annotation Expression
@subsection Type Annotation Expression
@cindex type annotation expressions
A @refer{TypeAnnotationExpression} is an expression that is annotated
with a @refer{Type}. The annotation amounts to an assertion that the
@refer{Type} of the expression is as annotated.

@float BNF,typeAnnotationExpressionFig
@caption{Type Annotation Expressions}
@display
@anchored{TypeAnnotationExpression} ::= @code{(}@refer{Expression} @code{:} @refer{Type}@code{)}
@end display
@end float

@quotation Note
The @refer{TypeAnnotationExpression} should not be confused with type
casting as is found in some languages. The
@refer{TypeAnnotationExpression} is a way for the programmer to
communicate exactly what the expected type of an expression is;
analogously to the @refer{TypeAnnotation}s found in @refer{LetExpression}s.
@end quotation

@node Type Coercion
@subsection Type Coercion
@cindex type coercion
@anchor{typeCoercionExpression}

@float BNF,typeCoercionFig
@caption{Type Coercion}
@display
@anchored{TypeCoercion} ::= @refer{Expression} @code{::} @refer{Type}
  | @refer{Expression} @code{:?} @refer{Type} 
@end display
@end float

A @refer{TypeCoercion} expression amounts to a call to convert a value
of one type to that of another.  For example, coercing a @code{float}
value to an @code{integer} value -- which also has the potential to
change the value (stripping any fractional part of the value).

Type coercion is supported by a special @code{coercion}
@refer{ContractDefinition} shown in:

@example
all s,t ~~ contract coercion[s,t] ::= @{
  _coerce:(s) => option[t]
@}
@end example

@quotation Note
Specifically, an expression of the form: 
@example
X :: integer
@end example
is equivalent to the expression: 
@example
(_optval(_coerce(X)) : integer)
@end example
which has the effect of declaring that the
expression has type @code{integer} and the @code{_coerce} function is an
overloaded function that references a type-specific implementation --
based on the source type of @code{X} and @code{integer}.
@end quotation

The @code{:?} form of coercion expression is used in situations where
the coercion may @emph{fail}. If the coercion fails then the value
should be @code{.none}. For example, the coercions of @code{string}
values to @code{integer} is not guaranteed -- it depends on whether
the string denotes an integer or not:
@example
"fred" :? integer
@end example
has value @code{.none}; as does:
@example
"34ed" :? integer
@end example
The latter is @code{.none} because the coercion from strings to
integers attempts to make the whole string an integer value.

There are many standard coercions available.  However, it is also
possible for a programmer to define their own type coercion by
appropriately implementing the @code{coercion} contract.

@node Type Zeta Expression
@subsection Type Zeta Expression
@cindex type zeta expression
@cindex suppression of type refreshing

The standard semantics of types, particularly a generic type system
like that of @Star{}, imply a process called @emph{refreshing} or
@emph{standardizing apart}. Each occurrance of an identifier in the program
@emph{gets its own type}.

Every variable has its type recorded in the appropriate scope. This
type may be quantified and/or constrained. However, @emph{occurrances}
of the identifier are assigned a type that depends on
@emph{refreshing} its recorded type.

For example, given the definition:

@example
id:all x ~~ (x)=>x
@end example

the recorded type for @code{id} is @code{all x ~~ (x)=>x}. However, an occurrance of @code{id}, as in:

@example
id("hello")
@end example

gets an initial type that is computed from its recorded type:

@example
(%x)=>%x
@end example

where @code{%x} is a new type variable not occurring anywhere else in the program.

A similar process is used to move aside any constraints that are
implied by the recorded type of the variable. (The constraints are
subsequently applied to determine what runtime information to supply.)

This is the process that allows different occurrances of @code{id} to
have different types of arguments. For example, even though we might
have a use of @code{id} with a @code{string}, as above, this does not
prevent other uses with other argument types:

@example
id(45.3)
@end example

In nearly all situations, this process of refreshing the types of
variables is very convenient and exactly mirrors the intuition of what
it means to use generic functions.

However, in some situations, automatically refreshing types can
cause problems. For example, in the following function, the argument is
intended to be a generic function:

@example
foo:(all a~~(a)=>a,integer)=>integer
@end example

The first argument to @code{foo} is supposed to be generic, not
specialized to any particular type. The type of this argument is
actually the same as that for @code{id}, and so, a call to @code{foo}
along the lines of:

@example
foo(id,34)
@end example

should be expected to type correctly. However, the rule referred to
above about refreshing types of occurrances will lead the type checker
to try to match the types:

@example
(%x)=>%x
@end example
and
@example
all a ~~ (a)=>a
@end example

These two types are @emph{not} equivalent, they are not @emph{unifiable}.

The @code{ρ} operator -- as applied to an identifier -- allows us to
resolve this by suppressing the normal type refresh. In particular, the call:

@example
foo(ζid,42)
@end example

@emph{will} be accepted by the type checker. This is because the type
of the expression @code{ρid} is

@example
all x ~~ (x)=>x
@end example

and this does unify with @code{all a ~~ (a)=>a}.

@quotation Note
We do not anticipate many uses of this operator; in addition, it's
meaning is quite subtle, hence the use of a non-ascii operator for
it. However, when needed, @code{ζ} can be a life saver!
@end quotation

@node Sequence Expressions
@section Sequence Expressions
@cindex sequence expressions
@cindex expression,sequence

Sequence expressions are a syntactic feature that make it
straightforward to represent sequences and other forms of collection
values. Some sequence forms embody a sequential ordering of
the elements. A collection may have an ordering present; but
that is not required by the contract and is not enforced in the
notation.

@node Sequence Expression Notation
@subsection Sequence Expression Notation

@float BNF,sequenceExpressionFig
@caption{Sequence Expressions}
@display
@anchored{SequenceExpression} ::= @code{[} @refer{ExpSequence} @code{]}

@anchored{ExpSequence} ::= @refer{Expression}@code{,} @dots{} @code{,} @refer{Expression}[@code{,..}@refer{Expression}
@end display
@end float

I.e., a sequence expression consists of a sequence of
@refer{Expression}s separated by commas. In addition, the tail of the
sequence may be denoted by an expression. Otherwise the sequence is
nil-terminated.

Sequence expressions are interpreted in terms of the @code{sequence} contract.

An expression of the form: 
@example
[@var{E@sub{1}},@dots{},@var{E@sub{n}}]
@end example

is equivalent to the expression: 
@example
_cons(@var{E@sub{1}}, @dots{} , _cons(@var{E@sub{n}},_nil) @dots{} )
@end example

where @code{_cons} and @code{_nil} are elements of the @code{sequence} contract.

@quotation
There is a corresponding contract for sequence terms as @refer{SequencePattern}s;
which uses the @code{stream} contract to signal the underlying
semantics.
@end quotation


@node Range Expression Notation
@subsection Range Expression Notation

@float BNF,rangeExpressionFig
@caption{Range Expressions}
@display
@anchored{RangeExpression} ::= @refer{Expression}@code{..<} @refer{Expression}
  | @refer{Expression}@code{..>} @refer{Expression}
@end display
@end float

I.e., a range expression denotes a range of numbers. The range expression

@example
0..<100
@end example

denotes the integers in the range 0 .. 99 inclusive. The range expression

@example
100..>0
@end example

denotes a decreasing range of integers in the range 100 down to 1.

Range expressions are most useful when used in @code{for} loops. For
example, the traditional-looking action:

@example
for Ix in 0..<Mx do @{
  ...
@}
@end example
will repeat the body of the loop @code{Mx} times.

@subsubsection The @code{range} term

Range expressions are syntactic sugar for terms involving the
@code{range} constructor function. The @code{range} type is defined as though by:

@example
all i ~~ range[i] ::= .range(i,i,i).
@end example

An ascending range expression like that above is equivalent to

@example
.range(0,100,one)
@end example

and the descending range is:

@example
.range(100,0,-one)
@end example

What makes the @code{range} type interesting is the contracts that are implemented
for it: the @code{stream} contract, the @code{sequence} contract, the
@code{folding} contract, the @code{iter} contract, the @code{display}
contract, and the @code{generate} contract.

The last of these is what enables the use of range expressions in
@code{for} loops.

Range expressions work with @code{integer} values, but also with
@code{float} and @code{bignum} values. In fact, range expressions can
work with any type for which the @code{arith} contract is implemented
-- including user-defined types.

@node Index Expression
@subsection Index Expression

@float BNF,indexExpressionFig
@caption{Index Expressions}
@display
@anchored{IndexExpression} ::= @refer{Expression} @code{[} @refer{Expression} @code{]}
 | @refer{Expression} @code{[} @code{~} @refer{Expression} @code{]}
 | @refer{Expression} @code{[} @refer{Expression} @code{->} @refer{Expression} @code{]}
@end display
@end float

Index expressions are used to denote accessing elements of a collection. There
are several variants of the notation -- corresponding to element selection,
replacing an element in a collection and removing an element from a collection.

There is a related similar notation -- the @refer{Slice Notation} --
that is used to denote sub-sequences.

The index notation is based on the @code{indexed} contract (@ref{The
indexed Contract}).

An expression of the form: 
@example
@var{C}[@var{E}]
@end example

is equivalent to: 
@example
_index(@var{C},@var{E})
@end example

@quotation Note
The result type of an index expression is @code{option}al. This reflects the
fact that accessing a collection for an element may not be succesfull.
@end quotation

The @code{indexed} contract (and therefore the index notation) is
supported for lists, maps.

Replacing elements in a collection is denoted using a variant of the
index notation where the index takes the form of:

@example
@var{C}[@var{K} -> @var{E}]
@end example

which denotes the collection @code{@var{C}} with the element associated with
@var{K} replaced (or set) with @code{@var{E}}. This expression is equivalent to
the call:

@example
_put(@var{C},@var{K},@var{E})
@end example

and the returned value is a new collection with the replacement made.

@quotation Note
The original collection is generally @emph{not} updated by the call to @code{_put}.
@end quotation

Removing an element is denoted using the variant:

@example
@var{C}[~@var{K}]
@end example

which denotes the collection @code{@var{C}} with the element @code{@var{K}} removed.

@quotation Note
If the collection did not contain any value associated with the key
@code{@var{K}} then the result is the original collection. Otherwise the value
is the collection with any value associated with @code{@var{K}} removed.
@end quotation

@node Slice Notation
@subsection Slice Notation

@float BNF,sliceExpressionFig
@caption{Slice Expressions}
@display
@anchored{SliceExpression} ::= @refer{Expression} @code{[} @refer{Expression} @code{:} @refer{Expression} @code{]}
@end display
@end float

The slice notation is based on the @code{slice} contract (@ref{The slice Contract}).

An expression of the form: 
@example
@var{C}[@var{F}:@var{T}]
@end example

refers to the subset of the collection @code{@var{C}} that starts at element @code{@var{F}} and continues until element @code{@var{T}} (but does not include it).

The above expression is actually equivalent to a call to the @code{_slice} function:
@example
_slice(@var{C},@var{F},@var{T})
@end example

@quotation Note
The result type of a slice expression is the same as the collection type that is being sliced.
@end quotation

