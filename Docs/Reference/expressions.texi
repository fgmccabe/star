@node Expressions
@chapter Expressions

An expression is a form that denotes a @emph{value}. Evaluation is the
computational process of realizing the denoted value.

@float BNF,expressionFig
@caption{Expression}
@display
@anchored{Expression}::=@refer{Variable}
  | @refer{ScalarLiteral}
  | @refer{StringLiteral}
  | @refer{AlgebraicLiteral}
  | @refer{ApplicativeExpression}
  | @refer{ConditionalExpression}
  | @refer{Condition}
  | @refer{LetExpression}
  | @refer{ValofExpression}
  | @refer{LambdaExpression}
  | @refer{TypedExpression}
  | @refer{SequenceExpression}
@end display
@end float

@node Variables
@section Variables
@cindex variables


A @refer{Variable} is a placeholder that denotes a value. Variables
may be used to denote many kinds of values -- arithmetic values,
complex data structures and programs.

@float BNF,variableFig
@caption{Variable}
@display
@anchored{Variable}::=@refer{Identifier}
@end display
@end float

@quotation Note
Any given variable has a single type associated with it and may only
be bound to values of that type.@footnote{We sometimes informally
refer to a variable being `bound' to a value X (say). This means that
the value associated with the variable is X.}
@end quotation

Variables have a scope -- a syntactic range over which they are
defined. Variables can be said to be free in a given scope --
including functions that they are referenced within.

Variables can be classified into single-assignment variables
(variables that denote values and are therefore not reassignable) and
re-assignable variables. The latter have a different type signature
that signals the re-assignable property.

@node Re-assignable Variables in Expressions
@subsection Re-assignable Variables in Expressions
@cindex referring to re-assignable variables,in expressions
There are two modes of referring to re-assignable variables in
expressions: to access the value of the variable and to access the
variable itself. The primary reason for the latter may be to assign to
the variable, or to permit a later assignment.

An undecorated occurrence of a variable denotes access to the variable
itself, whereas if the access is decorated with a @code{!} then that
refers to the variable's value. Thus, given a variable declaration:
@example
Cx := 0
@end example

then the reference to @code{Cx} in the expression:
@example
Cx+3
@end example
is not legal because @code{Cx} here does not refer to the variable's
value. Instead use:
@example
Cx!+3
@end example

@node Variable Assignment
@subsection Variable Assignment
@cindex assignment to variables
@cindex variables,assignment to

Assignment is an @refer{Action} that replaces the value of a
re-assignable variable with another value. The variable being
re-assigned must have a @code{ref} type -- there is no `implicit'
assignability of a variable or field.

@node Modifying Fields of Records
@subsection Modifying Fields of Records

Assignability of variables does @emph{not} automatically imply that the
value of the variable is itself modifiable. Thus, given a variable
declaration such as:

@example
P := someone@{ name="fred"; age=23 @}
@end example

the assignment:
@example
P.age := 24
@end example

is not valid -- because, while we can assign a new value to @code{P},
that does not confer an ability to modify the value that @code{P} has.

However, by marking a @emph{field} of a record type as a @code{ref}
type, then we @emph{can} change that field of the record. Thus, for
example, if the type of @code{person} were:
@example
person ::= person@{
  name : string.
  age : ref integer.
@}
@end example

then the assignment:
@example
P.age := 24
@end example
is valid.
@quotation Note
Note that one may change a suitably declared field of a record even
when the variable 'holding' the record it not itself re-assignable.
@example
P is someone@{ name="fred". age := 23 @}
@end example

I.e., re-assignability depends only on whether the target is re-assignable.
@end quotation

@node Scalar Literal Expressions
@section Scalar Literal Expressions
@cindex scalar literal
There are three forms of scalar literal expression: numeric literals,
string literals and enumerated symbols.

@float BNF,scalarLiteralFig
@caption{Scalar Literal}
@display
@anchored{ScalarLiteral}::=@refer{IntegerLiteral}
  | @refer{FloatingPoint}
@end display
@end float

@node Integer Scalar Literals
@subsection Integer Scalar Literals
@cindex integer

The @code{integer} type is used to denote integral values in the range
-9223372036854775808..9223372036854775807.@footnote{I.e., 64 bit
precision.}

Integers may be written in a variety of styles (see
@refer{decimalFig}; the most common form is the simple
@refer{Decimal} notation.

@float BNF,integerLiteralFig
@caption{Integer Literals}
@display
@anchored{IntegerLiteral} ::= @refer{Decimal} | @refer{Hexadecimal} | @refer{CharacterCode}
@end display
@end float

@node Floating Point Literals
@subsection Floating Point Literals
@cindex float

The @code{float} type is used to represent fractional values. Floating
point numbers are represented as IEEE double precision -- i.e., 64
bit.

The syntax of floating point numbers is given in
@ref{floatingPointFig}.

@node String Expressions
@section String Expressions
@cindex string expressions

The @code{string} type is used to denote string values. There are two
main forms of @code{string} literal: the double-quoted string
expression and the triple-quoted or block-quoted @code{string}
literal.

The syntax of @code{string} literals is given in @ref{quotedStringFig}.

The simplest form of @code{string} literal is a sequence of characters
enclosed in double-quotes.

In addition, quoted strings may include @emph{interpolation}
expressions -- which are embedded expressions whose values are
interpolated into the actual string value.

@node String Interpolation
@subsection String Interpolation
@cindex string interpolation
@anchor{stringInterpolation}
String interpolation refers to the embedding of expressions in string
literals. The actual string value of an interpolated @code{string}
literal requires the evaluation of those expressions.

For example, given a variable @code{X} with the value 24, then:
@example
"this has the value of X: $(X)"
"$(X*X) people saw this"
@end example

would have values:
@example
"this has the value of X: 24"
@end example
and
@example
"576 people saw this"
@end example
respectively.

@quotation Note
If a @code{string} interpolation expression itself contains a string,
the various quoting mechanisms for strings apply to that string
also. I.e., it is not necessary to `double-quote' strings within
@code{string} interpolation expressions.

For example, the @code{string} expression in:

@example
"The price of cheese is $(priceOf("cheese"))"
@end example

works as expected: the argument to the @code{priceOf} function is the
string literal @code{"cheese"}. An even more nested example is:
@example
"The price of $(P) is $(priceOf("SKU$(P)"))"
@end example

In this example, we have a @code{string} interpolation expression embedded
within another @code{string} interpolation expression.
@end quotation

An @refer{Interpolation} expression may be followed by a
@refer{FormattingSpec}. If present, then this specification is used to
guide how values are formatted.

For example, the value of
@example
"--$(120345567):999,999,999,999;--"
@end example

is the string:
@example
"--120,345,567--"
@end example

Detailed formatting is controlled by the @code{format} contract -- see
@refer{formatContractProg} -- in particular the different
implementations of that contract which in turn means that different
types of expression will have type appropriate ways of specifying the
formatting.

@node Semantics of String Interpolation
@subsubsection Semantics of String Interpolation

String interpolation expressions may refer to variables that are in
scope at the location of the string literal itself.

An expression of the form:
@example
"@var{prefix}$(@var{Exp})@var{suffix}"
@end example

is interpreted as: 
@example
ssSeq([ss("@var{prefix}"),displ(@var{Exp}),ss("@var{suffix})])"
@end example

If a @refer{FormattingSpec} is present, then the translation takes
that into account also. For example, the expression:

@example
"@var{prefix}$(@var{Exp}):@var{Format};@var{suffix}"
@end example

is equivalent to the expression: 
@example
ssSeq([ss("@var{prefix}"),frmt(@var{Exp},@var{Format}),ss("@var{suffix})]::string"
@end example

where @code{frmt} is part of the @code{format} contract -- see
@refer{formatContract}.

@node Block Strings
@subsection Block Strings
@cindex block string

A @var{BlockString} is a string literal that consists of a sequence of
characters enclosed in triple quotes; as defined in
@ref{blockStringFig}.

The principal difference between a @var{BlockString} and a regular
@var{QuotedString} is that no interpretation of characters in the text
is made. I.e., there is no equivalent of string interpolation and nor
are any escape characters interpreted.

In addition, @var{BlockString}s can span multiple lines whereas
@var{QuotedString}s are not permitted to include new-line characters.

@node Algebraic Constructor Expressions
@section Algebraic Constructor Expressions

The @refer{AlgebraicConstructor} expressions are those that refer to
constructors that are defined in @refer{AlgebraicTypeDefinition}s --
@emph{or those that arise from standard type schemas such as tuples and
anonymous records}.

There are three primary forms of @refer{AlgebraicConstructor}s:
@itemize
@item
Enumerated Symbols
@item
@refer{PositionalConstructorLiteral} terms, and
@item
@refer{RecordLiteral} terms.
@end itemize

@float BNF,algebraicExpressionFig
@caption{Algebraic Constructor Expressions}
@display
@anchored{AlgebraicLiteral} ::= @refer{EnumeratedSymbol}
  | @refer{PositionalConstructorLiteral}
  | @refer{RecordLiteral}
@end display
@end float

@node Enumerated Symbols
@subsection Enumerated Symbols
@cindex enumerated symbols

Enumerated symbols are written using regular identifiers (see
@refer{enumeratedSymbolFig}). Such a symbol must first have been
declared within a type definition statement which also determines the
type of the symbol.

@float BNF,enumeratedSymbolFig
@caption{Enumerated Symbol}
@display
@anchored{EnumeratedSymbol} ::= @var{Identifier}
@end display
@end float

For example, the @code{boolean} type definition has two
@refer{EnumeratedSymbol}s in its definition: @code{true} and
@code{false}. Thus

@example
true
@end example
 
is an expression consisting of an @refer{EnumeratedSymbol} from the
type definition:
@example
boolean ::= true | false.
@end example

Enumerated symbols have no internal structure; they are often used
to define enumerations or for sentinels. For example, the
standard cons-list type uses @code{nil} to mark the empty list:

@example
all e ~~ cons[e] ::=  nil | cons(e,cons[e])
@end example

@node Positional Constructor Literals
@subsection Positional Constructor Literals
@cindex positional constructor

@refer{PositionalConstructorLiteral} expressions denote data
constructor values. In particular, it refers to positional
constructors that are introduced in an algebraic
@refer{TypeDefinition}.

@float BNF,positionalConstructorFig
@caption{Positional Constructor Literal}
@display
@anchored{PositionalConstructorLiteral} ::= @refer{Identifier}@code{(}@refer{Expression}@code{,}...@code{,}@refer{Expression}@code{)}
@end display
@end float
The valid types of the arguments to a @refer{PositionalConstructorLiteral} are determined by its definition within the appropriate type definition.

For example, the type definition:
@example
address ::= noWhere | someWhere(string,integer,string)
@end example

defines @code{someWhere} as the identifier of a
@refer{PositionalConstructorLiteral} and any instance must have
exactly three arguments: a @code{string}, an @code{integer} and a
@code{string}.

@node Accessing Elements of a Positional Constructor Literal
@subsubsection Accessing Elements of a Positional Constructor Literal
The only way that elements
of a @refer{PositionalConstructorLiteral} can be @emph{accessed} is via a
pattern match -- see @refer{posConPattern}. For example, given the
definition of @code{address} above, we can 'unpack' its argument using a
pattern such as in 
@example
city(someWhere(City,_,_)) => City
@end example

Unlike positional constructors, records allow their fields to be
addressed individually.

@node Record Literals
@subsection Record Literals
A record literal is a collection of values identified by name.

Like @refer{PositionalConstructorLiteral}s, the @refer{RecordLiteral} must have
been defined with a @refer{TypeDefinition} statement. This also
constrains the types of the expressions associated with the fields.

@float BNF,recordConstructorFig
@caption{Record Literal}
@display
@anchored{RecordLiteral}::=@refer{Record} | @refer{ThetaRecord}
@anchored{Record} ::= @refer{Identifier}@{. @refer{RecordElement}@dots{}@refer{RecordElement} .@}
@anchored{RecordElement} ::= @refer{Identifier} = @refer{Expression}
| @refer{Identifier} := @refer{Expression}
| @code{type} @refer{Identifier} = @refer{Type}
@end display
@end float

There are two variants of the @refer{RecordLiteral}: the
@refer{Record} form and the @refer{ThetaRecord} form. This section
focuses on the former.

For example, given the type definition: 
@example
employee ::= emp@{
  name : string.
  hireDate : date.
  salary : ref integer.
  dept : ref string.
@}
@end example
       
A literal @code{emp} value will look like: 
@example
E = emp@{. name = "Fred Nice".
  hireDate = today().
  salary := 23000.
  dept := "mail"
.@}
@end example
  
@quotation Note
Fields whose type is a @refer{ReferenceType} are defined within the
record using the @code{:=} operator. All other fields are defined
using the @code{=} operator.
@end quotation

For any given @refer{RecordLiteral} @emph{all} the fields of the
record must be associated with a value. This value is either
explicitly given or can be supplied by a @code{default} declaration within
the type definition itself.

Fields within a @refer{RecordLiteral} are identified by name; and may
be written in any order.

@node Accessing Fields of a Record
@subsection Accessing Fields of a Record
@cindex record access
@findex . operator

Record access expressions access the value associated with a field of
a record value. 

@float BNF,recordAccessFig
@caption{Record Access}
@display
@anchored{RecordAccess}::=@refer{Expression} . @refer{Identifier}
@end display
@end float

An expression of the form 
@example
A.F
@end example

where @code{F} is the name of an attribute of the record @code{A} denotes the
value of that attribute. For example, given the type definition

@example
person ::= someone@{ name : string. age : integer @}
@end example

and a @code{person} value bound to @code{P}: 
@example
P = someone@{. name="fred". age=32 .@}
@end example

then the expression @code{P.name} has value @code{"fred"}.

@quotation Note
The (@code{.}) access operator is also used in cases where an anonymous
record is used; for example given the record: 
@example
R = @{ alpha = "a". beta=4 @}
@end example
then @code{R.alpha} has value @code{"a"}
@end quotation

@quotation Note
The binding of the record access operator (@code{.}) is very strong. Thus,
expressions such as @code{A.L[ix]} and @code{A.F(a,b*3)} are equivalent to

@example
(A.L)[ix]
@end example
and
@example
(A.F)(a,b*3)
@end example
respectively.
@end quotation

@node Theta Record Literals
@subsection Theta Record Literals
@cindex theta record

A @refer{ThetaRecord} is a record whose contents is specified by means
of a @refer{ThetaEnvironment}.@footnote{There are variants corresponding to
labeled and anonymous records.}

@float BNF,thetaRecordFig
@caption{Theta Record}
@display
@anchored{ThetaRecord} ::= @refer{Identifier}@{ @refer{Definition}@dots{}@refer{Definition} @}
@end display
@end float

Externally, a @refer{ThetaRecord} is the same as a regular
@refer{Record}; internally, however, its fields are defined
differently using @refer{Definition}s. @refer{Definition}s include
@refer{RecordElement} but may also include @refer{TypeDefinition}s and
other forms of definition.

Furthermore, @emph{within} a @refer{ThetaRecord}, definitions may be
@emph{mutually recursive}.

@refer{ThetaRecord}s are especially convenient when the fields of the
record are program values. For example, assuming a type definition
such as: 
@example
onewayQ[t] ::= onewayQ@{
  add : (t)=>action[(),()].
  take : ()=>t.
@}
@end example
then the literal: 
@example
onewayQ@{
  private Q := [].
  add(X) => action @{
    Q := [Q..,X];
    return ()
  @}
  take() => valof action@{
    H = head(Q);
    Q := tail(Q);
    return H
  @}
@}
@end example
defines a @code{onewayQ} record with two exposed values -- the
functions @code{add} and @code{take}.

@quotation Note
If there are extra definitions, they should be marked @code{private}
which will exclude them from the record's type signature.
@end quotation

@quotation Note
A @refer{ThetaRecord} has many of the characteristics of an object in
OO languages -- except that there is no concept of inheritance; nor is
there a direct equivalence of the @code{self} or @code{this} keyword.
@end quotation

@quotation Note
A definition within a @refer{ThetaRecord} that is marked
@code{private} does @emph{not} 'contribute' to the external type of
the record; and neither can such an attribute be accessed via the
@refer{RecordAccess} expression.
@end quotation

@node Tuples
@section Tuples
@cindex tuples
A tuple consists of a sequence of expressions separated by commas and
enclosed in parentheses. In effect, a tuple is a
@refer{PositionalConstructorLiteral} where the @refer{Identifier} is
omitted.

@float BNF,tupleFig
@caption{Tuple Literal}
@display
@anchored{TupleLiteral}::= ( @refer{Expression}, @dots{}, @refer{Expression} )
@end display
@end float

Tuples allow a straightforward and casual grouping of values
together without requiring a specific type definition of a data
structure.
@quotation Note
Unlike @refer{PositionalConstructorLiteral}s, the set of possible
tuples @emph{cannot} be defined using a
@refer{TypeDefinition}. Instead, the tuple types form a @emph{type
schema}.

@quotation Note
Not a single type, because each arity of anonymous tuple type denotes
a different type. However, all tuples are related by their tuple-ness.
@end quotation
@end quotation

In that tuples can be used to group elements together, they are
somewhat similar to arrays. However, unlike arrays, each element of a
tuple may be of a different type, and also unlike arrays, tuple
elements may not be accessed via an indexing operation: tuples can
only be unwrapped by some form of pattern matching.

For example, if the @code{split} function splits a list into a front half
and back half, it may be used in a statement of the form: 
@example
(F,B) = split(L)
@end example
which has the effect of unpacking the result of the @code{split} function
call and binding the variables @code{F} and @code{B} to the front half and back
half of the list @code{L}.

The tuple notation is unremarkable except for two cases: the single
element tuple and the zero element tuple.

@node Zero-ary Tuples 
@subsection Zero-ary Tuples
@cindex 0-ary tuples
Zero-element tuples @emph{are} permitted. A zero-element tuple, which
is written

@example
()
@end example 
is essentially a symbol.

A tuple of no values is effectively the same as void and is used to
signal void or empty arguments.

@node Singleton Tuples
@subsection Singleton Tuples
Some special handling is required to represent tuples of one element.

The principal issue is the potential ambiguity between a tuple with
one element and a normal operator override expression.

For example, 
@example
(a+b)*c
@end example
is such a case: the inner term @code{(a+b)} is not intended to denote a
tuple but simply the sum of @code{a} and @code{b}.

A singleton tuple @emph{may} be written; by doubly parenthesizing
it. An expression of the form: 
@example
((34))
@end example
denotes a singleton tuple with the integer @code{34} in it.

@quotation Note
Fortunately, singleton tuples are not often required in programs.
@end quotation

@node Anonymous Records
@section Anonymous Records

An anonymous record is one which does not have an explicit label. It
is the counterpart to the tuple, except that elements of an anonymous
record can be accessed using @refer{RecordAccess} expressions.

Like the normal @refer{RecordLiteral}, there are two variants: an
@refer{AnonymousRecord} and an @refer{AnonymousThetaRecord}.

@float BNF,anonRecordFig
@caption{Anonymous Record Literal}
@display
@anchored{AnonymousRecord}::= @{. @refer{RecordElement}. @dots{} @refer{RecordElement} .@}
@anchored{AnonymousThetaRecord}::= @{ @refer{Definition}. @dots{} @refer{Definition} @}
@end display
@end float

For example, an anonymous record consisting of a @code{name} and an
@code{address} may be written: 
@example
@{. name="Fred. address="1 Main St" .@}
@end example

Anonymous records have, as their type, a @refer{RecordType}. The type of this record would be represented by:

@example
@{ name : string. address : string @}
@end example


@node Function Application Expressions
@section Function Application Expressions
@cindex expressions,function application

A function application expression applies a function to zero or more
arguments.

@float BNF,applicationFig
@caption{Function Application Expression}
@display
@anchored{ApplicativeExpression} ::= @refer{Expression}(@refer{Expression},@dots{},@refer{Expression})
@end display
@end float

It is quite normal for the function expression being applied to
arguments itself to be the result of a function application. For
example, given the function @code{double}:
@example
double : all s ~~ (((s)=>s))=>((s)=>s)
double(F) => (X) => is F(F(X))
@end example

we can apply @code{double} to @code{inc}: 
@example
inc : (integer)=>integer.
inc(X) => X+1.
@end example

to get an expression such as: 
@example
double(inc)(3)
@end example

which has value 5.

@quotation Note
The @refer{PositionalConstructorLiteral} expression is actually a form of the
@refer{ApplicativeExpression}; where the function being applied is the
constructor defined in a @refer{TypeDefinition}.
@end quotation

@node Control Expressions
@section Control Expressions
@cindex control expression

The so-called control expressions involve and modify the meaning of
other expressions and actions.

@node Conditional Expression
@subsection Conditional Expressions
@cindex conditional expression

@float BNF,conditionalExpressionFig
@caption{Conditional Expression}
@display
@anchored{ConditionalExpression} ::= @code{(}@refer{Condition} @code{?} @refer{Expression} @code{||} @refer{Expression}@code{)}
@end display
@end float


The value of a conditional expression depends on whether the
@refer{Condition} is satisfiable or not. If the @refer{Condition} is
satisfiable, then the expression is equivalent to the 'then' branch of
the conditional expression; otherwise it is equivalent to the 'else'
branch.

For example, the expression: 
@example
(P in members ? X>Y || X<Y)
@end example

is equivalent to one of @code{X>Y} or @code{X<Y} depending on whether the
@refer{Condition}: 
@example
P in members
@end example
is satisfiable -- i.e., has at least one solution.

The condition of a conditional expression may introduce variables,
depending on the form of the condition -- for example, if the
@refer{Condition} is a @refer{SearchCondition} condition like that
above. These variables are 'in scope' within the 'then' part of the
conditional expression but are @emph{not} in scope for the 'else'
part.

@quotation Note
The only guarantees as to evaluation of a
conditional expression are that
@enumerate
@item
the conditional will be evaluated prior to evaluating either arm of
the conditional
@item
only one of the arms will be evaluated -- depending
on the value of the condition.
@end enumerate
@end quotation

@node Let Expressions
@subsection Let Expressions
@cindex let expressions

A @code{let} expression allows an expression to be defined in terms of
auxiliary definitions.

@float BNF,letExpressionFig
@caption{Let Expression}
@display
@anchored{LetExpression}::=@code{let} @refer{AnonymousRecord} @code{in}
@refer{Expression}
@end display
@end float

A @code{let} expression consists of a body -- which is an
@refer{AnonymousRecord} -- and a bound @refer{Expression}. Within the
@refer{AnonymousRecord} may occur any of the permitted forms of
definition: function definitions, variable definitions, type
definitions, and so on. The scope of these definitions includes the
bound expression.

@quotation Note
@code{let} expressions are an important program structuring tool for
programmers. It is worth emphasizing that @code{let} expressions are
expressions! They can be used in many, perhaps unexpected, places.

For example, a @code{sort} function may require a comparison predicate in
order to operate. This can be supplied as a named function: 
@example
pComp : (person,person)=>boolean.
pComp(someone@{name=N1@},someone@{name=N2@}) => N1<N2

S = sort(L,myCompare)
@end example

Or, the same may be achieved where the call to @code{sort} is not so
conveniently close to a theta environment: 
@example
sort(L, let@{
  pComp(someone@{name=N1@},someone@{name=N2@}) => N1<N2
@}
in pComp)
@end example

The @code{let} expression has major applications when constructing
function-returning functions.
@end quotation

The type of a @code{let} expression is the type of the bound expression.

@node Optional Expressions
@subsection Optional Expressions
@cindex optional expressions

An @code{option} expression is used to handle cases where a value is not
always guaranteed. The @code{option} type is built-in but is defined as
though by the algebraic type definition in:

@float Program,optionTypeDef
@caption{@code{option} Type Definition}
@example
option[t] ::= none | some(t)
@end example
@end float

The @code{option} type is intended to convey one of two possibilities:
a given value exists -- in which case the @code{some} constructor is
used -- or no value exists -- in which case @code{none} is used.

For example, 
@example
some("alpha")
@end example

signals the definite tring value @code{"alpha"}; whereas 
@example
none
@end example
signals that there is no value.

The @code{option} type is used as the return type of functions that
must reliably signal whether or not a value exists.
@quotation Note
The @code{option} type serves as a normal replacement for @code{null} that one
sees in languages like Java.
@end quotation

@node Typed Expressions
@section Typed Expressions
@cindex typed expressions
A type annotation expression is an explicit declaration of the type of
an expression. A type coercion expression denotes a conversion of a
value so that it conforms to a particular type.

@float BNF,typedExpressionFig
@caption{Typed Expression}
@display
@anchored{TypedExpression}::= @refer{TypeCoercion} | @refer{TypeAnnotationExpression}
@end display
@end float

@node Type Annotation Expression
@subsection Type Annotation Expression
@cindex type annotation expressions
A @refer{TypeAnnotationExpression} is an expression that is annotated
with a @refer{Type}. The annotation amounts to an assertion that the
@refer{Type} of the expression is as annotated.

@float BNF,typeAnnotationExpressionFig
@caption{Type Annotation Expressions}
@display
@anchored{TypeAnnotationExpression} ::= @code{(}@refer{Expression} @code{:} @refer{Type}@code{)}
@end display
@end float

@quotation Note
The @refer{TypeAnnotationExpression} should not be confused with type
casting as is found in some languages. The
@refer{TypeAnnotationExpression} is a way for the programmer to
communicate exactly what the expected type of an expression is;
analogously to the @refer{TypeAnnotation}s found in
@refer{ThetaEnvironment}s.
@end quotation

@node Type Coercion
@subsection Type Coercion
@cindex type coercion
@anchor{typeCoercionExpression}

@float BNF,typeCoercionFig
@caption{Type Coercion}
@display
@anchored{TypeCoercion} ::= @code{(}@refer{Expression} @code{::} @refer{Type}@code{)}
@end display
@end float

A @refer{TypeCoercion} expression amounts to a call to convert a value
of one type to that of another.  For example, coercing a @code{float}
value to an @code{integer} value -- which also has the potential to
change the value (stripping any fractional part of the value).

Type coercion is supported by a special @code{coercion}
@refer{ContractDefinition} shown in:

@example
all s,t ~~ contract coercion[s,t] ::= @{
  _coerce:(s)=>t
@}
@end example

@quotation Note
Specifically, an expression of the form: 
@example
X :: integer
@end example
is equivalent to the expression: 
@example
(_coerce(X) : integer)
@end example
which has the effect of declaring that the
expression has type @code{integer} and the @code{_coerce} function is an
overloaded function that references a type-specific implementation --
based on the source type of @code{X} and @code{integer}.
@end quotation

There are many standard coercions available.  However, it is also
possible for a programmer to define their own type coercion by
appropriately implementing the @code{coercion} contract.

@node Sequence Expressions
@section Sequence Expressions
@cindex sequence expressions
@cindex expression,sequence

Sequence expressions are a syntactic feature that make it
straightforward to represent sequence and other forms of collective
values. The difference between a collection and a
sequence is that the latter embodies a sequential ordering of
the elements. A collection may have an ordering present; but
that is not required by the contract and is not enforced in the
notation.

@node Sequence Expression Notation
@subsection Sequence Expression Notation

@float BNF,sequenceExpressionFig
@caption{Sequence Expressions}
@display
@anchored{SequenceExpression} ::= @code{[} @refer{ExpSequence} @code{]}

@anchored{ExpSequence} ::= @refer{Expression}[@code{..,}@refer{Expression}], @dots{},@refer{Expression}[@code{,..}@refer{Expression}
@end display
@end float

I.e., a sequence expression consists of a sequence of
@refer{Expression}s separated by commas. In addition, either -- but
not both -- the tail or the front of the sequence may be denoted by an
expression. Otherwise the sequence is nil-terminated.

Sequence expressions are interpreted in terms of the @code{stream} contract.

An expression of the form: 
@example
[@var{E@sub{1}},@dots{},@var{E@sub{n}}]
@end example

is equivalent to the expression: 
@example
_cons(@var{E@sub{1}}, @dots{} , _cons(@var{E@sub{n}},_nil) @dots{} )
@end example

This sequence is constructed from the back. Conversely, a sequence may
be front loaded and be defined by appending elements to a front
expression:
@example
_apnd(@dots{}_apnd(_apnd(_nil,@var{E@sub{1}})@var{E@sub{2}})@dots{},@var{E@sub{n}})
@end example
