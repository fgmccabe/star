@node Getting Star
@appendix Getting Star

The Star language system is available on github at:
@url{https://github.com/fgmccabe/star}

@node Building Star
@section Building Star

To build the Star language system from scratch requires a few
dependencies; most notably SWI-Prolog -- which is used to build the
bootstrap compiler -- and cmake. The latter should be at least version 3.7.

Once dependencies are satisfied, and the source code has been
downloaded from GitHub, building is straightforward: construct a
@code{build} directory:

@example
$ mkdir build
$ cd build
$ cmake ..
@end example
Once @code{cmake} has run, just @code{make}:
@example
$ make
@end example

This builds the run-time, compiles the bootstrap compiler and compiles
the standard library and runs the tests.

Once completed without errors, install:
@example
$ make install
@end example

@node Emacs Support
@section Emacs Support
There is a fairly rudimentary support for Star for Emacs. Installing
Star should ensure that the compiled elisp files are in the correct
location. To enable access to Star mode, add the following to your
@code{.emacs} file:

@example
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/")
(autoload 'star-mode "star")
(add-to-list 'auto-mode-alist '("\\.\\(star\\)$" . star-mode))
@end example

@node Font Coloring
@subsection Font Coloring

@node Indentation
@subsection Indentation

@node Error Reporting
@subsection Error Reporting

@node Customization
@subsection Customization

@node Compiling Programs
@section Compiling Programs

@node The @code{catalog}
@subsection The @code{catalog}

@node Using the Bootstrap Compiler
@subsection Using the Bootstrap Compiler

The bootstrap compiler is ultimately intended purely for developing
Star itself. However, it is also currently the only compiler.

@quotation Note
The bootstrap compiler is written in SWI-Prolog; and it requires that
@code{swipl} is installed in your system.
@end quotation

The command line usage for @code{sbc} is:

@example
$ sbc -r @var{repo} -w @var{wd} -g --stdin -- @var{package}
@end example

@table @code
@item r
The @code{-r} flag indicates the directory where the @emph{code
repository} is. If it is not specified explicitly the compiler will
search the current working directory for a sub-directory called
@code{.star-repo}; and its parent directories until root, until it
finds one.
@item -w
The @code{-w} flag indicates that the compiler should search the
indicated directory for the appropriate catalog file for the package
to compile.
@item -g
The @code{-g} flag enables the generation of additional code that will
allow debuggers to debug the execution of the program.
@item --stdin
The @code{--stdin} flag is used when the source of the file to compile
is provided via @code{stdin} rather than an explicit file.
@end table

@node Documentation
@section Documentation

The documentation for Star is split into three documents: this
document, the Star reference manual and a programming guide to
Star. It is recommended that you read the latter as you familiarize
yourself with the language.






