Agenthood is often a useful metaphor in structuring large systems Singh3, Wooldridge4. The intuition is that an agent represents a focus of responsibility within a system: by structuring the system in terms of who is responsible for what it can make large systems more tractable. Star supports the agent metaphor with two key concepts: the concept of a speech action and the concept of an actor.
There may be many technical distinctions between agents and objects. The essential distinction is not technological, though: an agent is an embodiment of a functionally important part of a system and class notation is a technique for constructing programs. Agents reflect a division of requirements; object orientation reflects implementation.
Agenthood is also useful when the application programmer is tasked with modeling aspects of the world that are self-actuated: for example when modeling the behavior of people or of machines. Agents are also key to understanding systems that cross multiple ownership domains. Indeed, in an environment where different elements of a system reside on different machines some degree of self-responsibility is almost inevitable.
The agent metaphor suggests more; in particular two aspects: agents are typically designed to be `in charge of' their own area of responsibility and agents collaborate by `talking' to each other. There is an implication of autonomy with an agent; and agents posses the power of speech. One of the hallmarks of agents in the real world is that they chatter to each other with messages â€” rather than directly interfering with each other by setting variables.