Another benefit that perhaps explains some of the modern excitement is that functional programming represents a more tractable route to developing parallel and multi-threaded programs.
A program written in a classic von Neumann style is best understood in terms of instructions to a simple machine. Each successive instruction modifies the state of the machine in some way – such as storing values in cells or printing a result.
The issue with this programming model is that modern machines do not fit the original von Neumann model very well. It is normal now for a single computer to have eight ‘cores’, which permit up to 16 independently executing tasks to execute in parallel. Furthermore, modern graphics processors come with thousands of cores — which do not necessarily have to be processing graphics!
Traditional procedural programming languages have a very difficult time with multi-threaded and parallel programs. Because of the complexity of writing them safely, they must currently be written by ‘programming masters’.