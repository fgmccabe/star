Object oriented languages have a very finely developed sense of the noun. An object is intrinsically a noun; objects reference concrete or abstract things that a programmer is manipulating. The notation of classes, interfaces, inheritance and so on represents a powerful set of concepts for organizing the application’s nouns.
However, just as in spoken languages like English, verbs are also important: what you do with objects is at least as important as the objects themselves. Most OO languages do not treat verbs – a.k.a. methods – with the same respect that they confer on nouns.
The result is that methods are written using a vocabulary that a programmer in the 1970’s would be completely familiar with – even when the same programmer would find classes and interfaces novel concepts.
Functional languages give more weight to the verbs. A function is a first class value and there are many ways in which functions can be combined and abstracted. The result is that the expression of control in a functional language can be subtler and more expressive than is possible in most OO languages. This makes a material difference to the productivity of the programmer and can also make a difference in the readability of the code.