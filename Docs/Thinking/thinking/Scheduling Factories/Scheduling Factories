Star has been used for a number of applications. One of these – an application
to schedule the processing of wafers in a semiconductor factory (a.k.a. fab) –
illustrates how the different features of Star come together in a whole.

One of the first applications of the emerging Starview Enterprise Platform was
ALPS (‘Advanced Logistics and Planning System’), a system for scheduling
semiconductor fabs.

Semiconductor fabrication is a complex process, with modern microprocessors
going through (on the order of) 1000 production steps going on over several
weeks.

There is often significant competitive pressure to use leading edge
technology. The result is that equipment is fickle and breaks down or fails to
operate at specification frequently.

Moreover, many fabs are moving to highly diversified product mixes. It is not 10
times harder to make 100 products instead of 10, it is 1000’s of times harder.

Consequently, long-term planning of the fab operation is impossible, and
scheduling systems need to strike a delicate balance between the planning
required to make good decisions and simultaneously not relying on the fab
actually executing the plans generated.

The problem is further exacerbated by problems quite specific to semiconductors:
for example, some production routes – the sequences of production steps involved
in making a product – involve queue-time zones. A queue-time zone is a
sub-sequence that, once entered, has to be completed within a certain time. If a
wafer does not complete a queue-time zone on time, chemical processes cause it
to ‘go bad’ resulting in a reworking of some of the process at best and a
scrapping of work at worst.

The latest iteration of the ALPS system ‘ALPS 4’ makes use of almost all of
Star's advanced facilities:

•	ALPS uses Star's advanced type system to provide high-level compositional models of conceptual entities such as tools, wafers, and routes.
•	Parametric polymorphism is used extensively to abstract over type definitions for concrete equipment, wafers, production recipes etc., making ALPS into a modular framework.
•	The framework is purely functional, which enables the composition and nesting of the fab (as well as simulated fabs) with schedulers. Star enables purely functional programming with its support for higher-order programming, and through providing high-performance functional data structures for dictionaries and sequences.
•	Advanced concepts from functional programming enable the modular composition of scheduling strategies: ALPS uses monads17 to manage the ‘hope’ that the fab will follow its scheduling instructions, and arrows18 to allow modular composition of scheduling strategies. Star provides general support for both through type contracts and computation expressions.

In particular, ALPS solves the queue-time problem through the combination of its
purely functional operation and the composable scheduler framework.

Whenever ALPS encounters a wafer about to enter a queue-time zone, it starts a
recursive speculative simulation of the system, and monitors the wafer to see if
it would successfully completes the queue-time zone. Depending on the result, it
lets the wafer enter or delays it.

Full speculative simulation is impossible with traditional scheduling systems
used in the industry. A typical system operates on a live, multi-gigabyte
database containing the fab state. Thus speculative simulation would entail
copying the database state or snapshotting over longer sequences of
transactions, each of which would be prohibitively expensive.

In the following sections we elaborate on three selected aspects of the ALPS
system to show how Star supports the development of complex applications:

	•	purely functional programming to enable speculative simulation;
	•	algebraic data types to implement compositional models for routes;
	•	monads to manage scheduler expectations about the fab.
