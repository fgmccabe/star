@node Why Star?
@chapter Why Star?

Star is first of all a general purpose programming language. You can
use it to effectively solve problems in many domains. Star was
originally developed to help write analytical and statistical
applications. However, it has evolved into a general purpose
problem-oriented programming language.@footnote{As opposed to a
systems-oriented programming language like C.} Many of the features
and functionalities of the platform are expressed in a way that is
consistent with Star. As such, it plays a key role in enabling the
different elements of an application built on the platform to work
smoothly together.

Like any programming language, Star represents a distinct view point
on what programming languages should be. Star is a rich
functional-first language with carefully constructed semantics. Star
is designed to be readable, powerful, safe and extensible.

Performance is also important, of course. However, we view performance
as being guided by the principle of `fast enough is good enough'.

@node Texture
@section Texture
All programming languages can be said to have a particular style or
texture. This is often so strong that it only needs a single line of
source code to be able to identify a programming language. In the case
of Star, this line might be (we explain what it means a bit later on):

@example
factorial:all t ~~ arith[t] |: (t)=>t.
@end example

This is a @emph{type annotation}: a description of the type of a
variable -- in this case @code{factorial}. It is a function type --
which means that we can call @code{factorial}. It is also, somewhat
unusually for factorial, @emph{generic}: the factorial of any type can
be computed -- provided that arithmetic has been implemented for it.

Although this is not the simplest type annotation; overall, the
texture of Star is designed to enhance the readability of
programs. Readability is important because many people have to be able
to read programs; perhaps more than are involved in writing them. Even
with an emphasis on readability, the power of the language is such
that Star programs tend to be shorter than their equivalents written
in languages like Java.

This is a function definition that should be more straightforward to
understand:
@example
doubleMe:(integer)=>integer.
doubleMe(x) => x + x.
@end example

Although mostly not mandatory, in most cases we strongly favor a
programming style where the type of functions and other top-level
definitions are called out explicitly. Here is another function
calling the just-defined @code{doubleMe}:

@example
doubleUs:(integer,integer)=>integer.
doubleUs(x, y) => doubleMe(x) + doubleMe(y).
@end example

A complete Star program that uses the @code{doubleMe} and
@code{doubleUs} functions to print a result is:
@example
sample.first@{
  import star.
  import star.script.
  
  doubleMe:(integer)=>integer.
  doubleMe(x) => x + x.

  doubleUs:(integer,integer)=>integer.
  doubleUs(x, y) => doubleMe(x) + doubleMe(y).

  main:()=>action[(),()].
  main() => do @{
    show doubleUs(3,4)
  @}
@}
@end example

Function definitions can use multiple clauses, pattern matching, and guards:
@example
lucky:(integer)=>string.
lucky(7) => "LUCKY NUMBER SEVEN!".
lucky(x) default => "Sorry, you’re out of luck, pal!"

fctrl:(integer)=>integer.
fctrl(0) => 1.
fctrl(n) where n > 0 => n * fctrl(n-1)
@end example
In fact, this last function is not fully paradigmatic of Star. A
better, albeit more complex, version of this would be:
@example
factorial:all t ~~ arith[t] |: (t)=>t.
factorial(zero) => one.
factorial(n) where n > zero => n * factorial(n-one)
@end example
This version of factorial will work with integers, floats anything
that can do arithmetic. Here we use special variables @code{zero} and
@code{one} to denote 0 and 1 in a type-agnostic way.

@node Higher Order Functions
@subsection Higher Order Functions
Star supports higher-order functions. The following @code{apply} function
corresponds to the familiar map function from other functional
languages.
@example
apply:all s,t ~~ ((s)=>t,cons[s])=>cons[t].
apply(f, .nil) => .nil.
apply(f, cons(x, xs)) =>
      cons(f(x), apply(f, xs)).
@end example
Although Star has a sophisticated type system that supports automatic
type inference, we recommend that that programmers supply type
annotations, which often improve readability.

@quotation Note
Specifically, the rule for type inference is that Star will
automatically infer the types of all variables; but will never infer a
@emph{generic} -- or quantified -- type for functions.

This represents an interesting balance between convenience -- many
programs are not actually fully generic -- and precision.
@end quotation
So, since @code{apply} is supposed to be generic, we are required to
supply a type annotation for it:
@example
apply:all s,t ~~ ((s)=>t,cons[s])=>cons[t].
@end example
This states that @code{apply} is generic in two types, that it takes a
function argument and a @code{cons} list argument and returns a new
@code{cons} list.


@node Patterns
@subsection Patterns
Patterns and pattern matching are ubiquitous in Star. Nearly all
literal forms have a pattern equivalent that allows matching and, most
importantly, de-structuring such values.

For example, we can define functions over collections that allow us to
(say) compute the maximum element in a collection:

@example
maximum:all t ~~ arith[t] |: (list[t],t)=>t.
maximum([H,..T]) => let @{
  max([],Mx) => Mx.
  max([F,..R],Mx) where F>Mx => max(R,F).
  max([_,..R],Mx) default => max(R,Mx).
@} in max(T,H)
@end example
The @code{max} function enclosed in the @code{let} body uses patterns to
match against the successive elements of the collection. 

The pattern form:
@example
[H,..T]
@end example
matches any non-empty sequence; and binds the first element of the
sequence to the variable @code{H} and the remainder of the sequence to
@code{T}.

The pattern form:
@example
[]
@end example
only matches an empty collection.

The @code{maximum} function is written in terms of a local function –
@code{max} – and a call to that local function. The @code{let}
expression is one of the foundations and cornerstones of functional
programming.

@quotation Note
Notice that the type annotation for @code{maximum} has a special
@code{arith} clause attached to it:
@example
maximum:all t ~~ arith[t] |: (list[t],t)=>t.
@end example
The clause @code{arith[t] |:} means that the type variable @code{t} is
@emph{constrained} -- it must be a type that @emph{implements} the
arithmetic contract -- @code{arith}.

Type contracts like this one are fairly ubiquitous in Star; they
represent similar functionality to type classes in Haskell or traits
in some modern language like Rust or Go.
@end quotation

@node Defining Types
@subsection Defining Types
Like most functional languages, Star supports many forms of sequence
collection natively. One of the more common kinds of list is the ‘cons
list’ a.k.a. single-linked list. Cons lists are defined using a type
definition that introduces the type and its different ‘shapes’:

@example
all t ~~ cons[t] ::= .nil | cons(t,cons[t]).
@end example

This states that there are two forms of @code{cons} lists: the empty cons
list @code{.nil}, and a pairing @code{cons(x, xs)} where @code{x} is
the first element, and @code{xs} is the rest of the list. The
@code{all} quantifier at the beginning of the declaration of the @code{cons}
type marks the type as a generic type – specifically a universal type.

@quotation Note
Notice the period in front of the @code{.nil} enumeration symbol. This
allows us (the compiler and the programmer) to be more obvious in
distinguishing such symbols from variables. There are other benefits,
but clarity is the main driver.@footnote{It @emph{does} have the
somewhat unfortunate side-effect of requiring a period in front of
boolean @code{.true} and @code{.false} literals.}
@end quotation


All Star values can be written as literals, including user defined
types like cons. For example, the @code{cons} list:

@example
cons("alpha",cons("beta",cons("gamma",.nil)))
@end example
contains the strings @code{"alpha"}, @code{"beta"} and @code{"gamma"}.

The standard implementation of @code{cons} lists in Star also supports
the sequence notation we saw above. So, this list can also be written:
@example
["alpha", "beta", "gamma"]:cons[string]
@end example
Note that we are not allowed to mix strings and integers in the same
list. That is because Star is strongly, statically typed and requires
all elements of a list to have the same type.

Just as with sequences, we can define functions over @code{cons} lists via
pattern matching:
@example
maxCons:(cons[integer]) => integer.
maxCons(cons(x, .nil)) => x.
maxCons(cons(x, xs)) default => let @{
     maxRest = maxCons(xs).
   @} in (x > maxRest ? x || maxRest)
@end example
   
The first @code{maxCons} equation is for @code{cons} lists with one
element, where @code{maxCons} simply returns that element. The second
equation first computes the maximum of the rest of the list via a
recursive call, and uses a conditional expression to compute the
maximum for the entire list.

The expression
@example
(x > maxRest ? x || maxRest)
@end example
is a conditional expression: if @code{x} is greater than
@code{maxRest} then it is the maximum; otherwise @code{maxRest}
is. This is an example of a very well known form of expression that
uses symbolic operators rather than keywords.

@node Collections
@subsection Collections
Star has a standard way of writing sequences and collections – like
lists and dictionaries. For example, the expression
@example
[4, 8, 15, 16, 42]:list[integer]
@end example
denotes the list with the numbers 4, 8, 15, 16 and 42 in it. This
notation – which is called the sequence notation – is quite
general. We can denote a different kind of collection, containing cons
elements for example, using:
@example
[4, 8, 15, 16, 42]:cons[integer]
@end example
or, we can even denote a general collection without being explicit
about the type of collection:
@example
[4, 8, 15, 16, 42]
@end example
In this last case, the compiler may have to rely on the context to
fully determine the type of the sequence.

As another example, we can see that a dictionary literal is also a
variation on the collection – except that we have keys as well as
values:
@example
@{ "alpha"->1, "beta"->2 @}
@end example

@node Comprehensions
@subsection Comprehensions
Star has a built-in query expression notation that allows us to avoid
a lot of common recursive forms of definition. For example, the
@code{apply} function can be written more succinctly using:
@example
apply(f,C) => @{ f(X) | X in C @}
@end example
the meaning of the expression is equivalent to the recursive
definition we saw of @code{apply} above.

@node A Little Context
@section A Little Context

The origins of Star lie in a platform that was originally oriented
towards complex event processing applications.@cite{luckham:2012}
StarRules — as it was known then — was a rules language that allowed
one to express CEP-style rules succinctly.

However, as often happens, requirements evolved and CEP itself became
just one of many application areas that the Starview platform can
address. The same pressures for generality in the platform lead to a
greater interest in extensibility and generality in the programming
language.

@node All Projects are Team Projects
@subsection All Projects are Team Projects

A key observation about successful software projects is that they
involve teams; even if they start out as solo projects, they
invariably become team projects. Furthermore, deployment targets will
often extend to span a range of devices from smart phones to
multi-cluster super computers. Finally, software is rarely completely
useful in isolation: integration with other systems if often key to
realizing the benefits of a given system. These aspects have
continually influenced Star’s design.

Another strong influence on Star was the social context: We assumed
that any any given software project would involve many people. This
led us to conclude that features such as clear semantics, safety,
strong modularization, and in particular multi-paradigm support are
essential rather than being optional.

The foundations for safety in a programming language stem from an
expressive type system — the more expressive the type system, the less
the temptation to escape from it — and from an easy-to-reason-about
semantics. These requirements favor primarily functional languages,
especially when it comes to reasoning about parallel and distributed
programming.

Star is not a pure language in the sense that it permits programs with
assignments and stateful objects. This is both because we wish to
permit programmers to build in ways that suits their needs and because
some algorithms are easier to express using mutable state. However,
the language encourages the programmer to program more
declaratively. Star enables procedural programming whilst constraining
features to avoid some pitfalls of global hidden state.

@node Requirements Change and Systems Evolve
@subsection Requirements Change and Systems Evolve

One particular scenario played out several times: we developed some
high-level but specific feature that was designed to meet a particular
goal; but, in order to address a slightly different goal we were
forced to evolve to a simpler but more general form.

For example, initially Star had a high-level concurrency model to
allow multiple agents to process events with some degree of
parallelism. This model was elegant and had an intuitive semantics,
but did not fit certain kinds of applications that we also wanted to
be able to support. At this point we had a choice: to develop
additional forms of concurrency to address the new requirements or to
modify the original.

We chose to refactor the concurrency model with a more general
one. The main reason being that we could not be certain that other
variants of concurrency would also be important in the future.

This refactor also had the side-effect of making the concurrency
framework lower-level. This process of replacing specific but
high-level features with more general but lower-level ones occurred
several times: for concurrency, relational data structures and the
rules formalism itself.

It was partly in response to this that we invested effort in making
the Star language extensible via an extensible grammar and macros. In
effect, we adopted a domain-specific language methodology for the
design of Star itself. Using these extensibility facilities means that
we are often able to present high-level features while basing them on
more general more low-level capabilities.

@node Star is Rich
@section Star is Rich

Star is a full-featured language. It is an intentionally rich
language. In addition to the features described here are concurrency
features, data abstraction features that include the concept of
existentially quantified types – that enables abstract data types –
and computation expressions – that are important when designing
systems that rely on being able to delay and control how expressions
are evaluated; and many more.

In the chapters that follow, we will focus on three major features of
Star that define much of the essence of Star: actors, contracts and
the features needed to extend the syntax and capabilities of Star.
