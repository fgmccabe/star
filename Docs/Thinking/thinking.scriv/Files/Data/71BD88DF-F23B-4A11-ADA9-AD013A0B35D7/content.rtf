{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Georgia;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\deftab720
\pard\pardeftab720\sl280\qj\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Functional programming has roots that go back to the origins of programming itself. However, it has been recently gaining in prominence because of some of the inherent advantages in the paradigm:\
\pard\pardeftab720\fi374\sl280\sa240\qj\partightenfactor0

\i \cf2 Its \'91declarative\'92 nature makes reasoning about functional programs easier than for \'91procedural\'92 programs.\
\pard\pardeftab720\sl280\qj\partightenfactor0

\i0 \cf2 This benefits programmers in a surprising number of ways. Of course, the most obvious one is that correctness and type safety are easier to establish than for a program built out of assignment and for-loops.\
\pard\pardeftab720\fi374\sl280\qj\partightenfactor0
\cf2 A subtler but equally critical benefit is that it can make programming itself easier: the programmer is free to focus on sub-problems without unnecessary entanglement with other sub-problems.\
The impact of this benefit can be quite dramatic: similar in effect to the introduction of garbage collected memory compared to managed memory allocation.\
}