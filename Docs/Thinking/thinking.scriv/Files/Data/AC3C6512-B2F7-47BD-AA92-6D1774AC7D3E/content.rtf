{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 It can be said with some justification that any programs over 100 lines of code can be structured in terms of a basic engine and a policy for using the engine. The reason for this is very simple: it is often much easier to customize a general solution to a problem than to solve the specifics.\
A policy tends to be different to a machine. Perhaps that is because policies express what the application is supposed to do (or not to do) where the mechanics describe how the application performs its function.\
The distinction between policy and mechanism does not only apply to the overall application. It can be seen to apply at many different levels within libraries and within applications. For example, the speech actions introduced in {\field{\*\fldinst{HYPERLINK "applewebdata://889DB927-ECD1-408E-A1E0-7B44D4BA874F/Text/body3.xhtml"}}{\fldrslt Actors}} and the index notation introduced in {\field{\*\fldinst{HYPERLINK "applewebdata://889DB927-ECD1-408E-A1E0-7B44D4BA874F/Text/body4.xhtml#doc71"}}{\fldrslt Accessing Collections}} are both examples of the same policy vs mechanism distinction \'97 albeit at a fine granularity.\
There is no single `policy language' that is suitable for all purposes. Instead, Star makes it straightforward for programmers to design their own policy frameworks. This is by enabling so-called domain specific languages (DSLs).\
A domain specific language is a complex name for a simple idea: a DSL is a notation that is tailored for specific purposes. In particular, there is no requirement that DSLs be `full languages'; this is especially true in the context of a language like Star, which has strong support for DSLs. Instead, a Star-based DSL can selectively focus on a particular kind of policy expression. This, in turn, greatly simplifies the task of designing and implementing such DSLs.}