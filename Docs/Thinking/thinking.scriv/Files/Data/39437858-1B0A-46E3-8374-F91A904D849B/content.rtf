{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 One particular scenario played out several times: we developed some high-level but specific feature that was designed to meet a particular goal; but, in order to address a slightly different goal we were forced to evolve to a simpler but more general form.\
For example, initially Star had a high-level concurrency model to allow multiple agents to process events with some degree of parallelism. This model was elegant and had an intuitive semantics, but did not fit certain kinds of applications that we also wanted to be able to support. At this point we had a choice: to develop additional forms of concurrency to address the new requirements or to modify the original.\
We chose to refactor the concurrency model with a more general one. The main reason being that we could not be certain that other variants of concurrency would also be important in the future.\
This refactor also had the side-effect of making the concurrency framework lower-level. This process of replacing specific but high-level features with more general but lower-level ones occurred several times: for concurrency, relational data structures and the rules formalism itself.\
It was partly in response to this that we invested effort in making the Star language extensible via an extensible grammar and macros. In effect, we adopted a domain-specific language methodology for the design of Star itself. Using these extensibility facilities means that we are often able to present high-level features while basing them on more general more low-level capabilities.}