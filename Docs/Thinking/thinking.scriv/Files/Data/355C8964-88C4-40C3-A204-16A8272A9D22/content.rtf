{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fnil\fcharset0 Georgia;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 A macro is a program that is used to `replace' some source text with other source text. Except that we do not mean literal string text here. Star's macros operate on abstract syntax terms; i.e., the result of parsing the source text using the operator precedence grammar.\
We have already seen some simple examples of macros. There are two kinds of macros in Star: macro rules, like this rule which implements a form of lambda expression:
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2 \cf2 <$Scr_Ps::0>
\f3 # ?L >\\ ?E ==> (L) => E
\f1 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 <!$Scr_Ps::0>
\f0\fs26 and code macros. Code macros are simply normal Star functions that are applied to the program rather than to input data.\
The macro language is sufficiently powerful to allow arbitrary transformations of source programs. This is important because there are many occasions where the transformations required can involve expression forms and semantics that are unknown to the core Star language.\
A good example of this is the built-in query notation used for conditions, queries and so on in Star. The semantics of a condition like:
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\fi28\sl300\partightenfactor0

\f4\fs26 \cf2 (X,Y) in R1 && (Y,Z) in R2
\f1\fs24 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \kerning1\expnd0\expndtw0 are not based on evaluation but on 
\i satisfaction
\i0 . The condition is satisfied if there are bindings for X, Yand Z that make the predicates true. In particular, it may be that one or more of these variables is completely defined within the condition and is not referenced externally.\
The satisfaction semantics has to be implemented by transforming the condition into an equivalent expression that uses evaluation to compute the necessary bindings.}