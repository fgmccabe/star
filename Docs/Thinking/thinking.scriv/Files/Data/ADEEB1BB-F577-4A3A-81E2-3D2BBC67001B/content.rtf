{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Many functional programming languages \'97 including Star \'97 are based on an \'91equational style\'92. Equational programs are written as a series of equations; for example, in the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 credit
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  function:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\pardeftab720\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<$Scr_Ps::0>
\f2 credit:(customer)=>float.\
credit(C) where inGoodStanding(C) => 0.15.\
credit(C) where inDefault(C) => -0.1.\
  ...\
credit(_) default => 0.0.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 <!$Scr_Ps::0>
\f0\fs26 Each line of this definition is an equation. It specifies the meaning of the credit function in a restricted setting \'96 the complete function is understood by combining the cases together.\
Using equations we can separate out the different cases for the customer\'92s credit and \'91work on them separately\'92. This allows the programmer to focus attention and allows for rapid editing and reorganization should the need arise.\
Case-based approaches to programming are significantly more productive than traditional if-then-else procedural programming.\
}