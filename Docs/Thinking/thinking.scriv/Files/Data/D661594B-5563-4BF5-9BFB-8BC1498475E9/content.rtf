{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Georgia;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 At their most basic, contracts are a way of denoting `overloaded' functions. I.e., by giving different implementations of a contract for different types, it is possible to provide multiple implementations of a function. For example, there are several implementations of 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  for integers, floats, and so on. It is also straightforward to implement 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 arith
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  for your own type.\
However, another pattern of use of contracts is as an analog of interfaces. For example, we saw in {\field{\*\fldinst{HYPERLINK "scrivlnk://0F33A287-C84B-4E1E-AC76-6BCA9C300171"}}{\fldrslt Actors}} that actors used speech actions to express communication between them.\
In fact, there are many entities that can handle speech actions. In addition to basic actors, Star also has concurrent actors \'97 which have a completely different implementation.\
\pard\pardeftab720\fi374\sl280\qj\partightenfactor0
\cf0 In addition to these implementations we can envisage many other entities that will want to be able to handle speech actions
\f3\fs24 \cf2 \expnd0\expndtw0\kerning0
.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \kerning1\expnd0\expndtw0 To enable all these diverse uses of speech actions we encapsulate the semantics of speech actions in a contract:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<$Scr_Ps::0>
\f2 contract all t ~~ speech[t] ::= \{\
  _notify:all x ~~ (t,(x)=>())=>().\
  _query: all x,s ~~ (t,(x)=>s) => s.\
  _request: all x ~~ (t,(x)=>())=>()\
\}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 <!$Scr_Ps::0>
\f0\fs26 As we shall see in {\field{\*\fldinst{HYPERLINK "scrivlnk://AC3C6512-B2F7-47BD-AA92-6D1774AC7D3E"}}{\fldrslt Application = Policy + Mechanism}}, a speech action such as:
\f3\fs24 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1 \cf2 <$Scr_Ps::0>
\f2 query A with list of \{ all X where X in R \}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 <!$Scr_Ps::0>
\f0\fs26 is translated by macros into the call to the function 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 _query
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26 :
\f3\fs24 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1 \cf2 <$Scr_Ps::0>
\f2 _query(A,(AA) => list of \{ all X where X in AA.R \}))\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 <!$Scr_Ps::0>
\f0\fs26 Now the role of the 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 speech
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  contract may be highlighted: it serves as the specification of the semantics of speech actions. More informally, one can think of the language of speech actions as a kind of `ceiling': the DSL defines a language that is embedded within Star. The 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 speech
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  contract, on the other hand, represents a `floor' to the speech action language.\
As a specification of semantics, contracts do not address all the issues. It is not possible, for example, to express that implementations of arithmetic obey the normal Peano axioms of arithmetic. However, it is possible to place assertions in a contract that are verified when the implementation is created.}