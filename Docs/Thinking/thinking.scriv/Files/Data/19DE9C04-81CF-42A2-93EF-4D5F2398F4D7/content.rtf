{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\deftab720
\pard\pardeftab720\sl280\qj\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
Object oriented languages have a very finely developed sense of the 
\i noun
\i0 . An object is intrinsically a noun; objects reference concrete or abstract 
\i things
\i0  that a programmer is manipulating. The notation of classes, interfaces, inheritance and so on represents a powerful set of concepts for organizing the application\'92s nouns.\
\pard\pardeftab720\fi374\sl280\qj\partightenfactor0

\fs24 \cf2 However, just as in spoken languages like English, verbs are also important: what you do with objects is at least as important as the objects themselves. Most OO languages do not treat verbs \'96 a.k.a. methods \'96 with the same respect that they confer on nouns.\
The result is that methods are written using a vocabulary that a programmer in the 1970\'92s would be completely familiar with \'96 even when the same programmer would find classes and interfaces novel concepts.\
Functional languages give more weight to the verbs. A function is a first class value and there are many ways in which functions can be combined and abstracted. The result is that the expression of control in a functional language can be subtler and more expressive than is possible in most OO languages. This makes a material difference to the productivity of the programmer and can also make a difference in the readability of the code.}