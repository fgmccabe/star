{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
A function is defined as a sequence of 
\i rewrite equations
\i0  each of which consist of a 
\i pattern
\i0  and an 
\i expression
\i0 . There are three general forms of rewrite equations:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\i\fs22 Pattern
\f3\i0  => 
\f2\i Expression
\f3\i0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 or\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\i\fs22 Pattern
\f3\i0  where 
\f2\i Condition
\f3\i0  => 
\f2\i Expression
\f3\i0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 or\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\i\fs22 Pattern
\f3\i0  default => 
\f2\i Expression
\f3\i0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 The left hand side of a rewrite equation consists of the pattern which determines the applicability of the equation; and the right hand side represents the value of the function if the pattern matches.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::1>
\f0\b\fs26 Pattern\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 <!$Scr_Ps::1><$Scr_Ps::2>
\f0\i\fs26 A pattern represents a test or guard on a value. Patterns can be said to succeed or fail depending on whether the value being tested matches the pattern.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\i0\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::2>
\f0\fs26 We also refer to a pattern being 
\i satisfied
\i0  when matching a {\field{\*\fldinst{HYPERLINK "scrivcmt://58B5191B-1C75-4CE3-ABEE-4F5145B3F2E6"}}{\fldrslt \cf2 value.}}\
The pattern in a rewrite equation is a guard on the arguments of the function call. For example, given a call\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22 sign(34)\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 the patterns in the different equations of the sign function will be applied to the integer value 34.\
When the pattern on the left hand side of a rewrite equation succeeds then the equation 
\i fires
\i0  and the value of the expression on the right hand side of the equation becomes the value of the function.\
As we noted earlier, patterns are ubiquitous in 
\b Star
\b0 . They are used in equations, in variable declarations, in queries and in many other places. Here, we shall look at three main kinds of pattern, and in later sections, we look at additional forms of patterns.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::1>
\f0\b\fs26 Variable Pattern\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 <!$Scr_Ps::1><$Scr_Ps::2>
\f0\i\fs26 A variable pattern is denoted by an identifier; specifically by the first occurrence of an identifier.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\i0\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::2>
\f0\fs26 A variable pattern always succeeds and has the additional effect of 
\i binding
\i0  the variable to the value being matched.\
For example, the X in the left hand side of\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22 double(X) => X+X\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 is a variable pattern. Binding X means that it is available for use in the right hand side of the equation \'97 here to participate in the expression X+X.\
The part of the program that a variable has value is called its 
\i scope
\i0 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Variables in rewrite equations always have scope ranging from the initial occurrence of the variable through to the whole of the right hand side of the equation.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Variable patterns are the 
\i only
\i0  way that a variable can get a value in 
\b Star
\b0 .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Variables are never redeclared within a given scope. It is not permitted to hide a variable with a new variable that is defined within the natural scope of the variable.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf2 This is somewhat different to the scope rule for most other functional (and non-functional) languages \'97 which allow outer scoped variables to be effectively eclipsed or hidden by inner variables.\
The rationale for this choice is based on the observation that errors that arise from mistakenly hiding outer variables are often particularly difficult to track down.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::1>
\f0\b\fs26 Literal Pattern\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 <!$Scr_Ps::1><$Scr_Ps::2>
\f0\i\fs26 A literal pattern \'97 such as a numeric literal or a string literal \'97 only matches the identical number or string.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\i0\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::2>
\f0\fs26 Clearly, a literal match amounts to a comparison of two values: the pattern match succeeds if they are identical and fails otherwise.\
Equality is based on 
\i semantic equality
\i0  rather than 
\i reference equality
\i0 . What this means, for example, is that two strings are equal if they have the same sequence of characters in them, not just if they are the same object in memory.\
There is no automatic coercion of values to see if they 
\i might
\i0  match. In particular, an integer pattern will only match an integer value and will not match a float value \'97 even if the numerical values are the same. I.e., there will be no attempt made to coerce either the pattern or the value to fit.\
This, too, is based on the desire to avoid hard-to-detect bugs from leaking into a program.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::1>
\f0\b\fs26 Guard Pattern\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 <!$Scr_Ps::1><$Scr_Ps::2>
\f0\i\fs26 Sometimes known as a semantic guard, a guard pattern consists of a pair of a pattern and a condition:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\i0\fs24 \cf0 <!$Scr_Ps::2><$Scr_Ps::0>
\f2\i\fs22 Pattern
\f3\i0  
\f1\fs24 <$Scr_Cs::3>
\f3\fs22 where
\f1\fs24 <!$Scr_Cs::3>
\f3\fs22  
\f2\i Condition
\f3\i0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 Conditions are boolean-valued and the guard succeeds if both the pattern matches and if the condition is 
\i satisfied
\i0 . 
\b Star
\b0  has a normal complement of special conditional expressions which we shall explore as we encounter the need. In the case of the equation:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22  sign(X) where X>0\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 the guard pattern is equivalent to:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22 X where X>0\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 We can put guard pattern anywhere that a pattern is valid; and, for convenience, we can also put them immediately to the left of the rewrite equation\'92s is operator.\
Notice that any variables that are bound by the pattern part of a guarded pattern are 
\i in scope
\i0  in the condition part of the guard.\
In the pattern above, the variable X will be bound in the variable pattern X and will then be tested by evaluating the condition X>0.\
Subsequent occurrences of variables in a pattern \'91stand for\'92 equality guards. For example, the equation:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22 same(X,X) => true\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 is exactly equivalent to:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22 same(X,X1) where X==X1 => true\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 or just:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f3\fs22 same(X,X1) => X==X1
\f1\fs24 <!$Scr_Ps::0>}