{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
In 
\b Star
\b0 , most programs are defined using 
\i \cf2 rules
\i0 \cf2 . In this case, 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::0>
\f2\fs22 fact
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::0>
\f0\fs26  is defined using 
\i \cf2 equations
\i0 \cf2 . The equations that make up a function definition (or any program definition for that matter) are statements that are written in order.\
Rule-based programs support a 
\i \cf2 case driven
\i0 \cf2  approach to programming: a program is defined in terms of the different cases or situations that apply. Using rules to cover different cases allows the programmer to focus on each case in relative isolation.\
In addition, as we shall see later on, the partitioning of programs into cases like this is very helpful in supporting large-scale issues such as code annotations, versioning and life-cycle management.\

\b Star
\b0  has various kinds of rules, including function definitions, pattern definitions, variable definitions and macro definitions. Furthermore, it is possible for new kinds of rules to be introduced \'96 via the extensibility mechanisms of 
\b Star
\b0  (more on that in {\field{\*\fldinst{HYPERLINK "scrivlnk://A15F7AA4-5D6D-49F9-A22C-813E63D84054"}}{\fldrslt Chapter 7}}).}