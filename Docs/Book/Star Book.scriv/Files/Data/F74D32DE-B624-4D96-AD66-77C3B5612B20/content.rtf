{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
There are two variants of function \'97 the anonymous or 
\i lambda
\i0  function and the named function. We have already seen some simple examples both forms; for now, we continue to focus on named functions.\
It is often easier to introduce functional programming using numerical examples. Last chapter we saw, for example, the {\field{\*\fldinst{HYPERLINK "scrivlnk://EFA77E9F-5A99-428C-B6C7-4D091FDD98FF"}}{\fldrslt 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 factorial}}
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  program. This is mostly because most programmers are already familiar with numbers. Continuing that tradition, here is a function that returns the sign of a number:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 sign:(integer) => integer.\
sign(X) where X<0 => -1.\
sign(0) => 0.\
sign(X) where X>0 => 1.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 Each of these equations applies to different situations: the first equation applies when the input argument is negative, the second when it is exactly zero and the third when it is strictly positive. These represent the three possible cases in the definition of the sign function.\
A 
\b Star
\b0  function may be built from any number of rewrite equations; however, they must all be contiguous within the same group of statements.\
Although it is good practice to ensure that equations in a function definition do not overlap, 
\b Star
\b0  will try the equations in a function definition in the order they are written in. We could have relied on this and written sign using:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1><$Scr_Ps::0>
\f2\fs22 sign(X) where X<0 => -1.\
sign(0) => 0.\
sign(X) => 1.
\f1\fs24 <!$Scr_Cs::1>
\f2\fs22 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 Sometimes it is important to mark a particular equation as the 
\i default
\i0  case: i.e., an equation that should be used if none of the other cases apply:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 sign(X) where X<0 => -1.\
sign(0) => 0.\
sign(X) default => 1.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 An explicitly marked default equation does not need to be the last equation; but, wherever it is written, default equations are only attempted after all other equations have failed to apply.}