{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A task expression denotes a possibly suspended 
\i computation
\i0  \'97 which itself is a sequence of actions \'97 and which may have a value when the computation is performed. Furthermore, tasks have the potential to be executed concurrently or even in parallel with other tasks.\
Like tasks, functions can also be viewed as representing suspended computations. However, unlike functions, a task expression represents a single suspended computation.\
A task expression is written as a sequence of actions, enclosed in a task block; for example, in:\{\\SCRV_FN=As in other programming languages, actions are separated by semi-colons in 
\b Star
\b0 .\\END_SCRV_FN\}\
T = task\{\
  X = 1;\
  Y = 2;\
  valis X+Y\
\}\
the variable T is bound to a task expression whose returned value will be 3 \'97 the value returned by the action:\
valis X+Y\
Task expressions have a type: task[t] where t is the type of the value returned by the task. So, for example, the type of T above is given by\
T:task[integer].\
as it produces an integer value.}