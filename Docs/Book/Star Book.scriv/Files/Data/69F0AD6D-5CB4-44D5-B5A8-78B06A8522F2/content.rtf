{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
A 
\i generic
\i0  type is one which has one or more type variables in it. For example, the type expression:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 (x,x)=>boolean\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 is such a generic type (assuming that x is a type variable \'96 see below).\
All type variables must be bound by a quantifier in some enclosing scope. If a type variable is not bound, it is considered 
\i free
\i0  in that type expression.\
A 
\i quantified type
\i0  is a type that introduces (i.e., binds) a type variable. There are two quantifiers in 
\b Star
\b0 : a universal quantifier and an existential quantifier.\
The most common quantifier is the 
\i universal quantifier
\i0  and universally quantified types correspond closely to generic types in other languages.\
Universally quantified types are often used to denote function types and collection types. For example, the type\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 all x ~~ (x,x)=>boolean\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 is a universally quantified type that denotes the type of a generic binary function that returns a boolean value. The standard type for the equality predicate 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 ==
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::1>
\f0\fs26  is similar to this type.\
A universal type should be read as \'91for all possible values\'92 of the bound variable. For example, this function type should be read as denoting functions that:\
for any possible type \'96 x \'96 the function takes two such x\'92s and returns a 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 boolean
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::1>
\f0\fs26 .\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\b \cf2 Star
\b0  also supports 
\i existentially
\i0  quantified types \'97 these are useful for denoting the types of modules and/or abstract data types. However, we will leave our exploration of existential types for later.}