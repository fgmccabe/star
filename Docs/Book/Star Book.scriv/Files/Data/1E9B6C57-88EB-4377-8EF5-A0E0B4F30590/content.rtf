{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We have, in 
\b Star
\b0 , a better, more systematic, approach to describing and implementing public APIs \'96 based on speech actions.\{\\SCRV_FN=And contracts of course.\\END_SCRV_FN\} For example, assuming that Ag had the appropriate type similar to that of A above, we could issue a speech action against Ag with a very similar query:\
query Ag with list of \{ all y where\
    (y,"1in-washer") in products and\
    quantity(y)>20 \}\
One of the most obvious differences here being where the target of the API is mentioned: it is only mentioned at the top of the query. The type of Ag, assuming nothing else is known about it, takes the form:\{\\SCRV_FN=This is a simplification of the actual speech contract form.\\END_SCRV_FN\}\
Ag:t where speech over t determines myAPI\
This type annotation highlights two important aspects of speech actions as 
\b Star
\b0  program fragments: the entity being queried must implement the speech contract and that the API of the queried entity is also baked into its type \'96 albeit via the speech contract. Actual concrete implementations of speech tend to show the relationship more directly \'96 as we shall see below when we look at [actors][actors].\
As we already noted, in classical speech action theory a speech action is a combination of a performative and content. 
\b Star
\b0  supports three performatives: notify which corresponds to a notification that something has happened, query which corresponds to a question, and request which corresponds to a request to perform an action. We have found that these three performatives are sufficient to cover the vast majority of communication requirements in practical software systems.\
The general form of the query speech action is an 
\i expression
\i0  of the form:\
query 
\i Agent
\i0  with 
\i Expression
\i0 \
where 
\i Agent
\i0  is an entity with a constrained type that implements the speech contract.\
The query is an expression \'96 how can it be a speech action? The straightforward response is that it is not the expression that is the action, the speech action as a whole consists of the query performative and the content of the action is an expression. Syntactically, because the query has a value, it makes the most sense for the query to be presented to the programmer as an expression.}