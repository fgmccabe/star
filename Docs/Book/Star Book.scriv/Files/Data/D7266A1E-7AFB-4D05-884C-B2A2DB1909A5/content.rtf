{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
There is a perception of functional programming that it is 
\i weird
\i0  and 
\i difficult
\i0 . This is unfortunate for a number of reasons; the most important being that functional programming is 
\i not
\i0  weirder than procedural programming and that all programmers can benefit by programming functionally.\
As for being difficult, a more accurate description would be that there is a deeper 
\i range of features
\i0  in functional programming than in most modern programming languages: so a perception of complexity can arise simply because there is more to say about functional programming languages. However, the simplest aspects of functional programming are very simple and the ramp need not be steep.\
What may be surprising to the reader who is not familiar with functional programming is that it is 
\i old
\i0 : predating the origins of modern computing itself, that there is a huge amount that can be expressed functionally, and that functional programming is often at least as efficient and sometimes more efficient than procedural programming.\
In this chapter we will show how we can utilize 
\b Star
\b0  as a vehicle for functional programming. As a side-goal, we also hope to demystify some of the language and ideas found in functional programming.}