{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let us start with modeling each filter as a concurrent task; which can be implemented using:\
fun filter(P,inChannel) is let\{\
  def outChannel is channel()\
  fun loop() is task\{\
    while true do \{\
      def I is valof (wait for recvRv(inChannel))\
      if I%P!=0 then -- not a multiple, pass it on\
        perform wait for sendRv(outChannel,I)\
    \}\
  \}\
\
  \{ ignore background loop() \}\
\} in outChannel\
The heart of the filter function is a concurrently executing task that listens for input, checks to see if the input number is a multiple of \'91its\'92 prime, and if it is not passes it on.\
Notice that the filter function is written in such a way that it does not directly know what the recipient of the output messages will be. This is quite common in programs of this type and is the concurrent analog of returning a value from a function. In this case the returned \'91value\'92 is presented as a sequence of messages on a channel.\
The sharp-eyed reader will spot something else that is novel here: the let environment has a local action as well as two definitions. The form:\
\{ ignore Action \}\
within a let definition environment denotes an action that is performed as part of \'91constructing\'92 the let environment.\
One might ask, why do we ignore the background task and not perform it? Well, the simple answer is that performing a task implies waiting for the task to finish. In fact, performing a task is equivalent to ignoring the result of taking its value:\
ignore valof background loop()\
will clearly not finish until the loop finishes; which it will not.\
Our filter task will never terminate, indeed the entire Sieve consists of a network of tasks that do not terminate of their own accord.}