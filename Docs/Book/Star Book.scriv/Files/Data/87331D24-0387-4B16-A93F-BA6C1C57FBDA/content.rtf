{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
In many ways, the defining characteristic of a programming language is the approach to types. As we shall see, 
\b Star
\b0 \'92s type system is quite extensive and powerful; however, simple types are quite straightforward.\
The most basic question to ask about types is\
\pard\tx720\tx1080\tx1440\li720\sl264\slmult1\sb240\sa240\pardirnatural\partightenfactor0

\f1\fs24 \cf2 <$Scr_Ps::0>
\f0 What is a type?\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf2 <!$Scr_Ps::0>
\f0\fs26 There is some surprising variability to the answer to this question; for example, in many OO languages, types are conflated with classes. 
\b Star
\b0  types are terms \'96 i.e., names \'96 that denote different kinds of values.\
\pard\tx720\tx1080\tx1440\li720\sl264\slmult1\sb240\sa240\pardirnatural\partightenfactor0

\f1\fs24 \cf2 <$Scr_Ps::0>
\f0\b Type\

\b0 A type is a term that denotes zero or more values. I.e., a type is the 
\i \cf2 name
\i0 \cf2  of a collection of {\field{\*\fldinst{HYPERLINK "scrivcmt://6CA25749-538C-4EFD-8A60-894694FFB2A4"}}{\fldrslt values.}}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf2 <!$Scr_Ps::0>
\f0\b\fs26 Star
\b0 \'92s type system can be broken down into a number of dimensions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
How legal values of various kinds can be identified with a type;\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
the treatment of type variables and quantifiers; and\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
constraints on types, particularly type variables\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\b \cf2 Star
\b0  distinguishes two basic styles of type: so-called 
\i \cf2 structural
\i0 \cf2  or transparent types and 
\i \cf2 nominative
\i0 \cf2  or opaque types. A structural type term echoes the values it models, whereas a nominative type typically does not.\
For example, the standard type integer is nominative \'97 its name gives no hint as to the representation, structure or kinds of values that are modeled by {\field{\*\fldinst{HYPERLINK "scrivcmt://93B6E197-6128-4209-9C87-B6CDAF82BEF4"}}{\fldrslt integer.}} However, a nominative type often indicates some actual entity being modeled \'96 in this case integer values. Two nominative types which have different names always denote distinct values, whereas two structural types that look the same are actually identical.}