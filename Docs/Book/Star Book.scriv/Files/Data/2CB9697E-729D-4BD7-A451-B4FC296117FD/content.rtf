{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 One of the distinctive features of the sequence notation is that it is an example of 
\i syntax
\i0  that is underwritten by a semantics expressed as a 
\i contract
\i0 . This is part of a widespread pattern in 
\b Star
\b0 .\
This has a parallel in modern OO languages like Java and C# where important contracts are expressed as interfaces rather than concrete types. However, 
\b Star
\b0  extends the concept by permitting special notation as well as abstract interfaces \'97 as many mathematicians understand, a good notation can make a hard problem easy. In 
\b Star
\b0  we further separate interfaces from types by separating the type definition from any contracts that may be implemented by it.\
This is part of a general pattern in 
\b Star
\b0 : there are many 
\i sub-languages
\i0  that are actually underwritten by contracts for their realization. For example, the 
\i indexing
\i0  notation has the same pattern: of a special notation backed by contract.\
The merit of this combination of special syntax and contracts is that we can have the special notation expressing a salient concept \'97 in this case the sequence \'97 and we can realize the notation without undue commitment in its lower-level details. In the case of sequence notation, we can have a notation of sequences without having to commit to the type of the sequence itself.}