{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Our original 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 simple
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  package record had the type\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 simple: exists foo/1 ~~ \{\
  type foo/1.\
  foo:all t ~~ (t) <=> foo[t].\
  bar:all t ~~ foo[t].\
  fooMe:all t ~~ (t)=>foo[t].\
\}
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The type signature has a type 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 foo
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  and a constructor 
\f1\fs24 <$Scr_Cs::1>
\f2\fs22 foo
\f1\fs24 <!$Scr_Cs::1>
\f0\fs26  in it. This is permitted because types and values have different name spaces in {\field{\*\fldinst{HYPERLINK "scrivcmt://809CE6B3-502E-440D-86E1-4216CE1648E8"}}{\fldrslt 
\b Star
\b0 .}} \
Why, one might ask, is it so important for packages to have this kind of semantics? After all, few other programming languages make the effort to give a first class semantics for {\field{\*\fldinst{HYPERLINK "scrivcmt://1478D771-6DBC-47B9-AB12-7E622418CA7A"}}{\fldrslt modules.}} The most straightforward answer is that it likely will not matter unless your programs because very large.\
In mega-scale applications, programming between modules can easily become a major headache if not semantized (sic) correctly. However, we shall see an application of this for much smaller systems in {\field{\*\fldinst{HYPERLINK "scrivlnk://5D934E35-A167-4F02-BDFE-1D970DCE26AE"}}{\fldrslt Chapter 8}} when we discuss building platforms rather than simple applications.}