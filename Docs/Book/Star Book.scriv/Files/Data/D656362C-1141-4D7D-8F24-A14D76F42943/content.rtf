{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We start with representing triple graphs. Reflecting the ontology we constructed above, we can define three types to represent 
\i concepts
\i0 , 
\i triples
\i0 , and 
\i graphs
\i0 .\
There are two kinds of concept, and we want to keep them distinct in our representation:\
type n3Concept is n3C(string) or n3S(string)\
The two kinds of concept are the named concept \'97 identified by the n3C constructor \'97 and the literal string \'97 identified by the n3S constructor.\
The triple is similarly represented by a type definition:\
type n3triple is n3(n3Concept,n3Concept,n3Concept)\
where the three arguments to n3 are the subject, predicate and object respectively of the triple.\
Notice that here we are being explicit about the strong connection between subjects, predicates and objects: they are all 
\i concepts
\i0 .\
A triple graph may be represented in a variety of ways \'97 it is effectively a collection of triples. However, for the purposes of exposition, we will assume that triple graphs are represented as lists of triples. We can capture this with a type alias statement:\
type n3Graph is alias of list[n3Triple]\
A more robust implementation of the triple graph store would provide better support for querying triple graphs by the individual subjects, predicates and objects of triples. This would normally involve being able to index the triples by their subjects, predicates and objects.}