{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If a package defines a main procedure\{\\SCRV_FN=A procedure, in 
\b Star
\b0 , is a function that returns the void tuple ().\\END_SCRV_FN\} then that package may act as a command-line program as well as a package. There are two styles of main program possible; one where command line arguments are automatically converted into regular values and one where you get the arguments as a list[string]s.\
If the main procedure is defined then automatic coercion from command line arguments to internal types is performed. For example,\
myProgram\{\
  main:(integer,string)=>().\
  main(Count,Name) do \{\
    ...\
  \}\
\}\
With this style of main, a command-line invocation of the program is possible:\
$ Star myProgram 34 fred\
where the run-time verifies verifies that exactly two arguments are passed, the first being an integer. In principle, the arguments of main may be of 
\i any
\i0  type \'97 so long as the type is known to implement the coercion contract:\
coercion[string,
\i T
\i0 ]\
where 
\i T
\i0  is the type being passed to the main function. I.e., so long as there is a way of parsing a string value we can pass such arguments from the command line to our main program. However, there is another constraint: the ability of the operating system to pass in arbitrary strings to a command line program.\
For example, list structures are difficult to get past the typical shell:\
$ Star myProgram "list of [1,2,3]"\
In practice, this means that most simple types can easily be passed to a main procedure; and, with some difficulty, collection types such as list[integer] may also be used.\
This capability is not often provided in programming languages. Normally, you are limited to passing in an array of strings to the top-level main function. Why this is the case is a question best asked of the respective programming language designers.\
However, for program safety reasons, it is not permitted to coerce strings into 
\i functions
\i0  or other forms of code (the ability to coerce a string into a function amounts to dynamic compilation).\
If you want to manage all the command-line arguments, then define the procedure _main instead:\
myProgram\{\
  _main:(list[string])=>().\
  _main(args) do \{ ... \}\
\}\
The _main procedure is given all the command line arguments as a list[string]. This variant of _main (you cannot have both in the same package) is useful if you want to process command line arguments with dash-options.}