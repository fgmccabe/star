{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
The easiest way to access the compiler is to pick up the released code from {\field{\*\fldinst{HYPERLINK "https://github.com/fmccabe/Star/releases"}}{\fldrslt \cf3 \ul \ulc3 Github}}. \uc0\u8232 \
Assuming that you have downloaded the release files, assuming that you have your Star files in the current directory, you can compile and run a 
\b \cf2 Star
\b0 \cf2  program using:\
$ Star fact.star 10\
This will compile the file fact.star and run it, passing the integer 10 to the embedded program.\
The first time you run the compiler it will be a little slow. This is because it also compiles the standard library into the sub-directory ./starcode/. Subsequently, the compiler will be significantly quicker.\
The 
\b \cf2 Star
\b0 \cf2  compiler generates Java byte code, which means that it relies on the JVM platform for its execution. It also means that integrating 
\b \cf2 Star
\b0 \cf2  code with Java code is straightforward. For details of how this works we recommend the {\field{\*\fldinst{HYPERLINK "https://github.com/fmccabe/Star/releases/download/v101RC1/reference.pdf"}}{\fldrslt \cf3 \ul \ulc3 Star Language definition}}.}