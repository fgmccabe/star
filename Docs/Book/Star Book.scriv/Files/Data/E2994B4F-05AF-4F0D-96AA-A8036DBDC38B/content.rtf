{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Software agents represent one of those concepts that are very compelling \'96 perhaps precisely because it speaks to natural human intuitions. Agents are also a popular model for distributed systems. Distributed systems are often characterized by multiple loci of control \'96 typically one per machine in the system \'96 and assigning an agent to each locus is a very natural architecture.\
In this chapter we look at how we can build agent-based systems and hence distributed systems.\
You will notice that the style of this chapter is a little different from previous chapters. This is because many of the concepts we discuss relatively high-level and are not commonly directly grounded in conventional programming paradigms. However, building distributed systems 
\i is
\i0  a programming task; even if many of the issues and concepts don\'92t have much in the way of touch points in language features.\
On the other hand, 
\b Star
\b0  does have some important features that simplify building this style of application: notably the 
\i actor
\i0 , 
\i speech actions
\i0  and support for 
\i component architectures
\i0 .}