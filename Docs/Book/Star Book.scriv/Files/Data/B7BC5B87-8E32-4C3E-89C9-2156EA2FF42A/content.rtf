{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The straightforward answer to this is no. There is a great deal more to functional programming than can be captured in a few pages. However, we have covered some of the key features of functional programming \'97 particularly as it applies to 
\b Star
\b0 . In subsequent chapters we will take a closer look at collections, at modular programming, at concurrency and even take a pot shot at Monads.\
If there is a single idea to take away from this chapter it should be that functional programming is natural. If there is a single piece of advice for the budding functional 
\b Star
\b0  programmer, it should be to 
\i hide the recursion
\i0 . If there is a single bit of comfort to offer programmers it should be that 
\i Rome was not built in a day
\i0 .}