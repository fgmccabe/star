{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs26 \cf2 \expnd0\expndtw0\kerning0
Star
\b0  is a so-called 
\i strict
\i0  language. What that means is that arguments to functions are evaluated prior to calling the function. Most programming languages are strict; for two main reasons:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
It is significantly easier for programmers to predict the evaluation characteristics of a strict language.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
It is also easier to implement a strict language efficiently on modern hardware. Suffice it to say that modern hardware was designed for evaluating strict languages, so this argument is somewhat circular.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf2 There many possible styles of evaluation order; one of the great merits of programming declaratively is that the order of evaluation does not affect the actual results of the computation.\
It may, however, affect whether you get a result. Different strategies for evaluating expressions can easily lead to differences in which programs terminate and which do not.\
One other kind of evaluation that is often considered is 
\i lazy
\i0  evaluation. Lazy evaluation means simply that expressions are only evaluated 
\i when needed
\i0 . Lazy evaluation has many potential benefits: it certainly enables some very elegant programming techniques.\
Essentially for the reasons noted above, 
\b Star
\b0  does not use lazy evaluation; however, as we shall see, there are features of 
\b Star
\b0  that allow us to recover some of the power of lazy {\field{\*\fldinst{HYPERLINK "scrivcmt://2D88C3AE-CB7D-4B7D-8426-553529E6A36E"}}{\fldrslt \cf2 evaluation.}}\
The other dimension in evaluation order relates to the rewrite equations used to define functions. Here, 
\b Star
\b0  uses an in-order evaluation strategy: the equations that make up the definition of a function are tried in the order that they are written \'97 with the one exception being any default equation which is always tried last.}