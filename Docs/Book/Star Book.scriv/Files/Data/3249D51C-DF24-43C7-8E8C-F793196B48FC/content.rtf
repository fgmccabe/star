{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
Task expressions are instances of a more general 
\b Star
\b0  feature: the 
\i computation expression
\i0 . Task expressions are oriented towards the concurrent execution of computations; other forms of computation expression have different purposes. In particular, the simple 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 valof
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::1>
\f0\fs26  expression:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 valof\{\
  x = 2;\
  y = f(x);\
  valis x+y\
\}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 is actually a degenerate case of an action computation expression:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 valof action computation \{\
  x = 2;\
  y = f(x);\
  valis x+y\
\}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 There are several forms of computation expression in the 
\b Star
\b0  library; they are used for expressing tests for example. In fact, computation expressions are 
\i syntactic sugar
\i0  for 
\i monadic
\i0  expressions \'97 and play the same role in 
\b Star
\b0  as the do notation plays in Haskell.\
Monads represent a generalization of the kind of deferred computation we see in task expressions. In effect, monads represent a standard way of 
\i composing computations
\i0 .\
The computation expression is syntactic support for using the 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 monad
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::1>
\f0\fs26  contract \'97 actually called computation. We can see the extent of this support by looking at the \'91raw\'92 version of the action function:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 AA:((integer)=>integer)=>integer.
\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\

\f2\fs22 \cf0 \kerning1\expnd0\expndtw0 AA(f) is action computation \{\
  x = 2\
  y = valof f(x)\
  valis x+y\
\}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 The AA function becomes the somewhat more complex {\field{\*\fldinst{HYPERLINK "scrivcmt://227C035F-792E-4EA5-90A0-6D4BC04C3B4F"}}{\fldrslt form:}}\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Ps::0>
\f2\fs22 AA:((integer)=>integer)=>integer.\
AA(f) => _delay(() => valof\{\
  x = 2;\
  y = _perform(f(x), raiser_fun);\
  valis _encapsulate(x+y)\
\}).\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Ps::0>
\f0\fs26 Note how the inner valof expression is transformed to a call to 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 _perform
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::1>
\f0\fs26 ; whereas the result of the action computation is encapsulated in a call to the function 
\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 <$Scr_Cs::1>
\f2\fs22 _delay
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
<!$Scr_Cs::1>
\f0\fs26 . These are all functions in the standard computation contract; and so will actually be further specialized to be specific for the action expression.\
It is beyond the scope of this book to explore more deeply the handling of monadic computations. However, if you wish to explore further, a more complete description of computation expressions is given in the 
\b Star
\b0  language definition.}